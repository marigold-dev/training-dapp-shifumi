#import "storage.jsligo" "Storage"
#import "parameter.jsligo" "Parameter"
#import "views.jsligo" "Views"
#import "errors.jsligo" "Errors"
#import "session.jsligo" "Session"
#import "conditions.jsligo" "Conditions"

export type storage = Storage.t;
export type parameter = Parameter.t;
export type return_ = [list<operation>, storage];

// Anyone can create a session (must specify players and number of rounds)
const createSession = ([param, store] : [Parameter.createsession_param, Storage.t]) : return_ => { 
    let new_session : Session.t = Session.new(param.total_rounds, param.players);
    let new_storage : Storage.t = { ...store,  
        next_session: store.next_session + (1 as nat), 
        sessions: Map.add(store.next_session, new_session, store.sessions)
    };
    [list([]) as list<operation>, new_storage]
};

// search for a non troller in the session
const find_me_a_name = ([sessionId, missing_players, current_session, store] : [nat, set<Session.player>, Session.t, Storage.t]) : return_ => { 
    let rem_player = ([acc, elt] : [set<address>, address] ) : set<address> => Set.remove(elt, acc);
    let winners_set : set<address> = Set.fold(rem_player, missing_players, current_session.players);
    let _check_has_winner : unit = assert_with_error( (Set.cardinal(winners_set) > (0 as nat)), Errors.no_winner);
    let add_player = ([acc, elt] : [list<address>, address]) : list<address> => list([elt, ...acc]);
    let winners_list : list<address> = Set.fold(add_player, winners_set, (list([]) as list<address>));
    let winner : address = Option.unopt(List.head_opt(winners_list));
    let new_current_session : Session.t = {...current_session, result:Winner(winner) };
    let new_storage : Storage.t = Storage.update_sessions(store, sessionId, new_current_session);
    return [list([Tezos.emit("%gameStatus","win") ]) as list<operation>, new_storage];
};

//declare a draw if game is blocked because people don't reveal
const declare_a_draw = (sessionId : nat, current_session : Session.t, store: Storage.t) : return_ => { 
    let new_current_session : Session.t = {...current_session, result:Draw() };
    let new_storage : Storage.t = Storage.update_sessions(store, sessionId, new_current_session);
    return [list([Tezos.emit("%gameStatus","draw")]) as list<operation>, new_storage];
};

const is_none : <T>((x : option<T>) => bool) = (x : option<T>) : bool =>
   match(x, {
     Some: _ => false,
     None: () => true}
     );

// allow players to claim victory if opponent is a troller (refuse to play)
const stopSession = ([param, store] : [Parameter.stopsession_param, Storage.t]) : return_ => {
    let current_session : Session.t = Storage.getSession(param.sessionId, store);
    let _check_players : unit = Conditions.check_player_authorized((Tezos.get_sender ()), current_session.players, Errors.user_not_allowed_to_stop_session);
    let _check_session_end : unit = Conditions.check_session_end(current_session.result, Inplay());
    let _check_asleep : unit = Conditions.check_asleep(current_session);
    let current_round = match (Map.find_opt(current_session.current_round, current_session.rounds), {
        None: () => (list([]) as Session.player_actions),
        Some: (rnd: Session.player_actions) => rnd 
    });
    let missing_players = Session.find_missing(current_round, current_session.players);
    if (Set.cardinal(missing_players) > (0 as nat)) {
        return find_me_a_name (param.sessionId, missing_players, current_session, store);
    } else {
        
        let current_decoded_round_opt = Map.find_opt(current_session.current_round, current_session.decoded_rounds);
        
        if( is_none(current_decoded_round_opt)) { 
            return declare_a_draw (param.sessionId, current_session, store);
            }
        else { 
            let current_decoded_round = Option.unopt(current_decoded_round_opt);
            let missing_players_for_reveal = Session.find_missing(current_decoded_round, current_session.players);
            if (Set.cardinal(missing_players_for_reveal) > (0 as nat)) {
                return find_me_a_name (param.sessionId, missing_players_for_reveal, current_session, store);
            } else {
                return [list([]) as list<operation>, store]
            }
        }
    }
};

// the player create a bytes with the chosen action (Stone | Paper | Cisor) in backend
// once the bytes is created, the player send its bytes to the smart contract
const play = ([param, store] : [Parameter.play_param, Storage.t]) : return_ => {
    let current_session : Session.t = Storage.getSession(param.sessionId, store);
    let _check_players : unit = Conditions.check_player_authorized((Tezos.get_sender ()), current_session.players, Errors.user_not_allowed_to_play_in_session);
    let _check_session_end : unit = Conditions.check_session_end(current_session.result, Inplay());
    let _check_round : unit = assert_with_error( (current_session.current_round == param.roundId), Errors.wrong_current_round);
    // register action
    let new_rounds = Session.add_in_rounds(current_session.current_round, current_session, (Tezos.get_sender ()), param.action);
    let new_session : Session.t = Session.update_rounds(current_session, new_rounds);
    let new_storage : Storage.t = Storage.update_sessions(store, param.sessionId, new_session);
    return match (Map.find_opt(new_session.current_round,new_session.rounds), {
        None : () => [list([]) as list<operation>, new_storage],
        Some : (current_round : Session.rounds) => {
            if( List.size( current_round  ) != (2 as nat) ){ return [list([]) as list<operation>, new_storage]}
            else { return  [list([ Tezos.emit("%reveal","")  ]) as list<operation>, new_storage]}
        }
    });
};

// Once all players have committed their bytes, they must reveal the content of their bytes
const reveal = ([param, store] : [Parameter.reveal_param, Storage.t]) : return_ => {
    // players can reveal only if all players have sent their bytes
    let current_session : Session.t = Storage.getSession(param.sessionId, store);
    let _check_players : unit = Conditions.check_player_authorized((Tezos.get_sender ()), current_session.players, Errors.user_not_allowed_to_reveal_in_session);
    let _check_session_end : unit = Conditions.check_session_end(current_session.result, Inplay());
    let _check_round : unit = assert_with_error( (current_session.current_round == param.roundId), Errors.wrong_current_round);
    let current_round_actions : Session.player_actions = Session.get_round_actions(current_session.current_round, current_session);
    let numberOfPlayers : nat = Set.cardinal(current_session.players);
    let listsize = ([acc, _elt]: [nat, Session.player_action]) : nat => acc + (1 as nat);
    let numberOfActions : nat = List.fold(listsize, current_round_actions, (0 as nat));
    let _check_all_players_have_played : unit = assert_with_error( (numberOfPlayers == numberOfActions), Errors.missing_player_bytes);
    // retrieve user bytes (fails if not found)
    let user_bytes : bytes = Session.get_bytes_exn((Tezos.get_sender ()), (Some(current_round_actions)));
    // decode action
    let decoded_action : Session.action = Session.decode_bytes_exn(param.player_key, user_bytes, param.player_secret);
    let new_decoded_rounds = Session.add_in_decoded_rounds(current_session.current_round, current_session, (Tezos.get_sender ()), decoded_action);
    let new_current_session : Session.t = Session.update_decoded_rounds(current_session, new_decoded_rounds);

    // compute board if all players have revealed
    let modified_new_current_session : Session.t = Session.finalize_current_round(new_current_session);

    // if session is finished, we can compute the result winner
    let final_current_session = Session.finalize_session(modified_new_current_session);
    
    let new_storage : Storage.t = Storage.update_sessions(store, param.sessionId, final_current_session);
    return match(final_current_session.result, {
        Inplay : () => [list([]) as list<operation>, new_storage],
        Draw : () => [list([ Tezos.emit("%gameStatus","draw")  ]) as list<operation>, new_storage],
        Winner : (_winner : address) => [list([ Tezos.emit("%gameStatus","win")  ]) as list<operation>, new_storage]
    });
};

export const main = ([ep, store] : [parameter, storage]) : return_ => {
    return match (ep, { 
        CreateSession: (p: Parameter.createsession_param) => createSession(p, store),
        Play: (p: Parameter.play_param) => play(p, store),
        RevealPlay: (r: Parameter.reveal_param) => reveal(r, store),
        StopSession: (c: Parameter.stopsession_param) => stopSession(c, store)
        //Play: (p: Parameter.play_param) => [list([]) as list<operation>, new_storage],
        //RevealPlay: (r: Parameter.reveal_param) => [list([]) as list<operation>, new_storage],
        //StopSession: (c: Parameter.stopsession_param) => [list([]) as list<operation>, new_storage]
    });
};

//@view 
const board = ([sessionId, store]: [nat, storage]): Views.sessionBoard => { 
    match (Map.find_opt(sessionId, store.sessions), {
        Some: (sess: Session.t) => Views.retrieve_board(sess),
        None: () => (failwith("Unknown session") as Views.sessionBoard)
    });
};
