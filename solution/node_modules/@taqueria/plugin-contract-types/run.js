import {
  generateContractTypesProcessContractFiles
} from "./chunk-QKG633XF.js";
import "./chunk-563ZZCFE.js";

// src/cli.ts
var run = async () => {
  const argv = process.argv;
  const argsGenerateFile = argv.some((a) => a.startsWith(`--g`)) ? argv.slice(argv.findIndex((a) => a.startsWith(`--g`)) + 1) : void 0;
  const argsUseJson = argv.some((a) => a.startsWith(`--json`)) ? true : false;
  const argsTypeAliasMode = argv.some((a) => a.startsWith(`--types`)) ? argv.slice(argv.findIndex((a) => a.startsWith(`--types`)) + 1) : void 0;
  console.log(`contract-type-generator
	${argv.join(`
	`)}`);
  if (argsGenerateFile) {
    const [inputTzContractDirectory, outputTypescriptDirectory] = argsGenerateFile;
    const format = argsUseJson ? "json" : "tz";
    const [typeAliasModeArg] = argsTypeAliasMode ?? [];
    const typeAliasMode = typeAliasModeArg === "local" ? "local" : typeAliasModeArg === "file" ? "file" : typeAliasModeArg === "simple" ? "simple" : "library";
    await generateContractTypesProcessContractFiles({
      inputTzContractDirectory,
      outputTypescriptDirectory,
      format,
      typeAliasMode
    });
    return;
  }
  console.log(`
contract-type-generator

Example usages:

contract-type-generator --g ./contracts ./contractOutput
contract-type-generator --json --g ./contractsJson ./contractOutput
    `);
};

// run.ts
run();
//# sourceMappingURL=run.js.map