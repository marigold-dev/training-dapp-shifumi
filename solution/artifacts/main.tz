{ parameter
    (or (or (pair %createSession (list %players address) (nat %total_rounds))
            (pair %play (pair (bytes %action) (nat %roundId)) (nat %sessionId)))
        (or (pair %revealPlay
               (pair (bytes %player_key) (nat %player_secret))
               (nat %roundId)
               (nat %sessionId))
            (nat %stopSession))) ;
  storage
    (pair (pair (big_map %metadata string bytes) (nat %next_session))
          (map %sessions
             nat
             (pair (pair (pair (pair (timestamp %asleep) (map %board nat (option address)))
                               (nat %current_round)
                               (map %decoded_rounds
                                  nat
                                  (list (pair (or %action (or (unit %cisor) (unit %paper)) (unit %stone)) (address %player)))))
                         (pair (list %players address) (mutez %pool))
                         (or %result (or (unit %draw) (unit %inplay)) (address %winner))
                         (map %rounds nat (list (pair (bytes %action) (address %player)))))
                   (nat %total_rounds)))) ;
  code { UNIT ;
         PUSH string "Wrong current round parameter" ;
         PUSH string "Cannot find the contract from player address" ;
         LAMBDA
           (pair (pair address (list address)) string)
           unit
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             NONE address ;
             DIG 3 ;
             LAMBDA (pair address address) bool { UNPAIR ; SWAP ; COMPARE ; EQ } ;
             DUP 5 ;
             APPLY ;
             DIG 4 ;
             DROP ;
             PAIR ;
             LEFT (option address) ;
             LOOP_LEFT
               { UNPAIR ;
                 SWAP ;
                 IF_CONS
                   { DUP ;
                     DUP 4 ;
                     SWAP ;
                     EXEC ;
                     IF { SWAP ;
                          DIG 2 ;
                          DROP 2 ;
                          SOME ;
                          RIGHT (pair (lambda address bool) (list address)) }
                        { DROP ; SWAP ; PAIR ; LEFT (option address) } }
                   { DROP ; NONE address ; RIGHT (pair (lambda address bool) (list address)) } } ;
             COMPARE ;
             NEQ ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair (or (or unit unit) address) (or (or unit unit) address))
           unit
           { UNPAIR ;
             COMPARE ;
             EQ ;
             IF { UNIT } { PUSH string "this session is finished" ; FAILWITH } } ;
         LAMBDA
           (pair (pair (pair (pair (big_map string bytes) nat)
                             (map nat
                                  (pair (pair (pair (pair timestamp (map nat (option address)))
                                                    nat
                                                    (map nat (list (pair (or (or unit unit) unit) address))))
                                              (pair (list address) mutez)
                                              (or (or unit unit) address)
                                              (map nat (list (pair bytes address))))
                                        nat)))
                       nat)
                 (pair (pair (pair timestamp (map nat (option address)))
                             nat
                             (map nat (list (pair (or (or unit unit) unit) address))))
                       (pair (list address) mutez)
                       (or (or unit unit) address)
                       (map nat (list (pair bytes address))))
                 nat)
           (pair (pair (big_map string bytes) nat)
                 (map nat
                      (pair (pair (pair (pair timestamp (map nat (option address)))
                                        nat
                                        (map nat (list (pair (or (or unit unit) unit) address))))
                                  (pair (list address) mutez)
                                  (or (or unit unit) address)
                                  (map nat (list (pair bytes address))))
                            nat)))
           { UNPAIR ;
             UNPAIR ;
             DUP ;
             CDR ;
             DIG 3 ;
             SOME ;
             DIG 3 ;
             UPDATE ;
             SWAP ;
             CAR ;
             PAIR } ;
         LAMBDA
           (pair nat
                 (pair (big_map string bytes) nat)
                 (map nat
                      (pair (pair (pair (pair timestamp (map nat (option address)))
                                        nat
                                        (map nat (list (pair (or (or unit unit) unit) address))))
                                  (pair (list address) mutez)
                                  (or (or unit unit) address)
                                  (map nat (list (pair bytes address))))
                            nat)))
           (pair (pair (pair (pair timestamp (map nat (option address)))
                             nat
                             (map nat (list (pair (or (or unit unit) unit) address))))
                       (pair (list address) mutez)
                       (or (or unit unit) address)
                       (map nat (list (pair bytes address))))
                 nat)
           { UNPAIR ;
             SWAP ;
             CDR ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "Unknown session" ; FAILWITH } {} } ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (pair (big_map string bytes) nat)
                                            (map nat
                                                 (pair (pair (pair (pair timestamp (map nat (option address)))
                                                                   nat
                                                                   (map nat (list (pair (or (or unit unit) unit) address))))
                                                             (pair (list address) mutez)
                                                             (or (or unit unit) address)
                                                             (map nat (list (pair bytes address))))
                                                       nat)))
                                      nat)
                                (pair (pair (pair timestamp (map nat (option address)))
                                            nat
                                            (map nat (list (pair (or (or unit unit) unit) address))))
                                      (pair (list address) mutez)
                                      (or (or unit unit) address)
                                      (map nat (list (pair bytes address))))
                                nat)
                          (pair (pair (big_map string bytes) nat)
                                (map nat
                                     (pair (pair (pair (pair timestamp (map nat (option address)))
                                                       nat
                                                       (map nat (list (pair (or (or unit unit) unit) address))))
                                                 (pair (list address) mutez)
                                                 (or (or unit unit) address)
                                                 (map nat (list (pair bytes address))))
                                           nat))))
                       string
                       unit)
                 (pair (pair nat (list address))
                       (pair (pair (pair (pair timestamp (map nat (option address)))
                                         nat
                                         (map nat (list (pair (or (or unit unit) unit) address))))
                                   (pair (list address) mutez)
                                   (or (or unit unit) address)
                                   (map nat (list (pair bytes address))))
                             nat)
                       (pair (big_map string bytes) nat)
                       (map nat
                            (pair (pair (pair (pair timestamp (map nat (option address)))
                                              nat
                                              (map nat (list (pair (or (or unit unit) unit) address))))
                                        (pair (list address) mutez)
                                        (or (or unit unit) address)
                                        (map nat (list (pair bytes address))))
                                  nat))))
           (pair (list operation)
                 (pair (big_map string bytes) nat)
                 (map nat
                      (pair (pair (pair (pair timestamp (map nat (option address)))
                                        nat
                                        (map nat (list (pair (or (or unit unit) unit) address))))
                                  (pair (list address) mutez)
                                  (or (or unit unit) address)
                                  (map nat (list (pair bytes address))))
                            nat)))
           { UNPAIR ;
             UNPAIR 3 ;
             DIG 3 ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             PUSH nat 1 ;
             DUP 5 ;
             SIZE ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string
                       "No players have played in the current round, thus cannot deduce troller" ;
                  FAILWITH } ;
             DIG 3 ;
             IF_CONS { SWAP ; DROP ; SOME } { NONE address } ;
             IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
             NIL address ;
             DUP 3 ;
             CAR ;
             CDR ;
             CAR ;
             CAR ;
             LAMBDA (pair address address) bool { UNPAIR ; SWAP ; COMPARE ; EQ } ;
             DUP 4 ;
             APPLY ;
             DIG 3 ;
             DROP ;
             PAIR ;
             PAIR ;
             LEFT (list address) ;
             LOOP_LEFT
               { UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 IF_CONS
                   { DUP ;
                     DUP 4 ;
                     SWAP ;
                     EXEC ;
                     IF { DIG 2 ;
                          DROP 2 ;
                          NIL address ;
                          DIG 2 ;
                          ITER { CONS } ;
                          NIL address ;
                          SWAP ;
                          ITER { CONS } ;
                          ITER { CONS } ;
                          RIGHT (pair (pair (lambda address bool) (list address)) (list address)) }
                        { DIG 3 ; SWAP ; CONS ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT (list address) } }
                   { DROP ;
                     NIL address ;
                     SWAP ;
                     ITER { CONS } ;
                     RIGHT (pair (pair (lambda address bool) (list address)) (list address)) } } ;
             IF_CONS { SWAP ; DROP ; SOME } { NONE address } ;
             IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
             DUP 2 ;
             CDR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CDR ;
             CDR ;
             DUP 3 ;
             RIGHT (or unit unit) ;
             PAIR ;
             DUP 4 ;
             CAR ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 3 ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             DUP ;
             DIG 4 ;
             DIG 4 ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DIG 3 ;
             DIG 3 ;
             CONTRACT unit ;
             IF_NONE { FAILWITH } { SWAP ; DROP } ;
             DIG 2 ;
             CAR ;
             CDR ;
             CAR ;
             CDR ;
             DIG 3 ;
             TRANSFER_TOKENS ;
             SWAP ;
             NIL operation ;
             PUSH string "win" ;
             EMIT %gameStatus string ;
             CONS ;
             DIG 2 ;
             CONS ;
             PAIR } ;
         DUP 8 ;
         DUP 7 ;
         DUP 5 ;
         PAIR 3 ;
         APPLY ;
         DIG 8 ;
         UNPAIR ;
         IF_LEFT
           { DIG 2 ;
             DIG 7 ;
             DIG 9 ;
             DROP 3 ;
             IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DIG 6 ;
                 DROP 5 ;
                 DUP ;
                 CDR ;
                 EMPTY_MAP nat (list (pair bytes address)) ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 PAIR ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 EMPTY_MAP nat (list (pair (or (or unit unit) unit) address)) ;
                 PUSH nat 1 ;
                 PAIR ;
                 EMPTY_MAP nat (option address) ;
                 PUSH int 600 ;
                 NOW ;
                 ADD ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUP 2 ;
                 CDR ;
                 PUSH nat 1 ;
                 DUP 4 ;
                 CAR ;
                 CDR ;
                 ADD ;
                 DUP 4 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DUP 3 ;
                 CDR ;
                 DIG 2 ;
                 DIG 3 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 NIL operation ;
                 PAIR }
               { DUP 2 ;
                 DUP 2 ;
                 CDR ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 PUSH string "Not allowed to play this session" ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DIG 4 ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF { DROP } { FAILWITH } ;
                 PUSH mutez 1000000 ;
                 AMOUNT ;
                 COMPARE ;
                 LT ;
                 IF { DROP 4 ;
                      PUSH string "Player needs to pay 1 Tez to play a round" ;
                      FAILWITH }
                    { DUP 2 ;
                      CAR ;
                      CAR ;
                      SENDER ;
                      PAIR ;
                      DUP 2 ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      DIG 2 ;
                      UNPAIR ;
                      DUP 4 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      DUP 4 ;
                      GET ;
                      IF_NONE
                        { DIG 3 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          CDR ;
                          NIL (pair bytes address) ;
                          DIG 2 ;
                          DIG 3 ;
                          PAIR ;
                          CONS ;
                          DIG 2 ;
                          SWAP ;
                          SOME ;
                          SWAP ;
                          UPDATE }
                        { PUSH string "You already have played for this round" ;
                          PUSH bool False ;
                          DUP 7 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          CDR ;
                          DUP 7 ;
                          GET ;
                          IF_NONE
                            { PUSH bool False }
                            { PUSH bool False ;
                              SWAP ;
                              ITER { SWAP ;
                                     DUP ;
                                     IF { SWAP ; DROP } { DROP ; DUP 5 ; SWAP ; CDR ; COMPARE ; EQ } } } ;
                          COMPARE ;
                          EQ ;
                          IF { DROP } { FAILWITH } ;
                          DIG 4 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          CDR ;
                          SWAP ;
                          DIG 2 ;
                          DIG 3 ;
                          PAIR ;
                          CONS ;
                          SOME ;
                          DIG 2 ;
                          UPDATE } ;
                      DUP 2 ;
                      DUP ;
                      CDR ;
                      DUP 2 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      PUSH mutez 1000000 ;
                      DIG 5 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      CDR ;
                      ADD ;
                      DUP 4 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      DIG 2 ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      DUP 2 ;
                      CAR ;
                      CDR ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      DIG 3 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CDR ;
                      PUSH int 600 ;
                      NOW ;
                      ADD ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      DIG 2 ;
                      DUP 3 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      CAR ;
                      PAIR ;
                      DUP 3 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      PAIR ;
                      DIG 2 ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      DIG 2 ;
                      CDR ;
                      DIG 3 ;
                      PAIR ;
                      PAIR ;
                      DIG 2 ;
                      SWAP ;
                      EXEC ;
                      DUP 2 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      DIG 2 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      GET ;
                      IF_NONE
                        { NIL operation }
                        { PUSH nat 2 ;
                          SWAP ;
                          SIZE ;
                          COMPARE ;
                          NEQ ;
                          IF { NIL operation }
                             { NIL operation ; PUSH string "" ; EMIT %reveal string ; CONS } } ;
                      PAIR } } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 DUP 2 ;
                 DUP 2 ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 PUSH string "Not allowed to reveal this session" ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DIG 5 ;
                 DUP 3 ;
                 CDR ;
                 CAR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF { DROP } { FAILWITH } ;
                 DUP ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 CAR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 GET ;
                 IF_NONE { PUSH string "no actions registered" ; FAILWITH } {} ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SIZE ;
                 PUSH nat 0 ;
                 DUP 3 ;
                 LAMBDA (pair nat bytes address) nat { CAR ; PUSH nat 1 ; ADD } ;
                 DUG 2 ;
                 ITER { SWAP ; PAIR ; DUP 2 ; SWAP ; EXEC } ;
                 SWAP ;
                 DROP ;
                 PUSH string "a player has not played" ;
                 SWAP ;
                 DIG 2 ;
                 COMPARE ;
                 EQ ;
                 IF { DROP } { FAILWITH } ;
                 SOME ;
                 SENDER ;
                 PAIR ;
                 LEFT (option bytes) ;
                 LOOP_LEFT
                   { UNPAIR ;
                     SWAP ;
                     IF_NONE
                       { DROP ; NONE bytes ; RIGHT (pair address (option (list (pair bytes address)))) }
                       { DUP ;
                         IF_CONS { SWAP ; DROP ; SOME } { NONE (pair bytes address) } ;
                         IF_NONE
                           { DROP 2 ; NONE bytes ; RIGHT (pair address (option (list (pair bytes address)))) }
                           { DUP 3 ;
                             DUP 2 ;
                             CDR ;
                             COMPARE ;
                             EQ ;
                             IF { SWAP ;
                                  DIG 2 ;
                                  DROP 2 ;
                                  CAR ;
                                  SOME ;
                                  RIGHT (pair address (option (list (pair bytes address)))) }
                                { DROP ;
                                  IF_CONS { DROP ; SOME } { NONE (list (pair bytes address)) } ;
                                  SWAP ;
                                  PAIR ;
                                  LEFT (option bytes) } } } } ;
                 IF_NONE { PUSH string "user has not played" ; FAILWITH } {} ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP 4 ;
                 CAR ;
                 CAR ;
                 DIG 2 ;
                 DUP 2 ;
                 PAIR ;
                 PACK ;
                 SHA512 ;
                 DIG 2 ;
                 SWAP ;
                 COMPARE ;
                 EQ ;
                 IF { UNPACK (or (or (unit %cisor) (unit %paper)) (unit %stone)) ;
                      IF_NONE { PUSH string "Failed to unpack the payload" ; FAILWITH } {} }
                    { DROP ; PUSH string "Failed to check bytes" ; FAILWITH } ;
                 SENDER ;
                 PAIR ;
                 DUP 2 ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 UNPAIR ;
                 DUP 4 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CDR ;
                 DUP 4 ;
                 GET ;
                 IF_NONE
                   { DIG 3 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     NIL (pair (or (or unit unit) unit) address) ;
                     DIG 2 ;
                     DIG 3 ;
                     PAIR ;
                     CONS ;
                     DIG 2 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE }
                   { PUSH string "You already have revealed your play for this round" ;
                     PUSH bool False ;
                     DUP 7 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DUP 7 ;
                     GET ;
                     IF_NONE
                       { PUSH bool False }
                       { PUSH bool False ;
                         SWAP ;
                         ITER { SWAP ;
                                DUP ;
                                IF { SWAP ; DROP } { DROP ; DUP 5 ; SWAP ; CDR ; COMPARE ; EQ } } } ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DIG 2 ;
                     DIG 3 ;
                     PAIR ;
                     CONS ;
                     SOME ;
                     DIG 2 ;
                     UPDATE } ;
                 DUP 2 ;
                 DUP ;
                 CDR ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 PUSH int 600 ;
                 NOW ;
                 ADD ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 DIG 3 ;
                 DUP 4 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CDR ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 GET ;
                 IF_NONE { NIL (pair (or (or unit unit) unit) address) } {} ;
                 PUSH bool True ;
                 PAIR ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 ITER { SWAP ;
                        UNPAIR ;
                        DUP 2 ;
                        PUSH bool False ;
                        DIG 3 ;
                        ITER { SWAP ;
                               DUP ;
                               IF { SWAP ; DROP } { DROP ; DUP 4 ; SWAP ; CDR ; COMPARE ; EQ } } ;
                        DIG 3 ;
                        DROP ;
                        DIG 2 ;
                        AND ;
                        PAIR } ;
                 CAR ;
                 PUSH bool True ;
                 SWAP ;
                 COMPARE ;
                 EQ ;
                 IF { DUP ;
                      CDR ;
                      DUP 2 ;
                      CAR ;
                      CDR ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CDR ;
                      PUSH nat 1 ;
                      DUP 5 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      ADD ;
                      PAIR ;
                      DUP 4 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      DUP 2 ;
                      CAR ;
                      CDR ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      DUP 5 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      DUP 6 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CDR ;
                      DUP 2 ;
                      GET ;
                      IF_NONE { PUSH string "Missing actions for current_round" ; FAILWITH } {} ;
                      DUP ;
                      IF_CONS { SWAP ; DROP ; SOME } { NONE (pair (or (or unit unit) unit) address) } ;
                      IF_NONE { PUSH string "Missing actions for first player" ; FAILWITH } {} ;
                      SWAP ;
                      IF_CONS { DROP ; SOME } { NONE (list (pair (or (or unit unit) unit) address)) } ;
                      IF_NONE { PUSH string "Missing actions for second player" ; FAILWITH } {} ;
                      IF_CONS { SWAP ; DROP ; SOME } { NONE (pair (or (or unit unit) unit) address) } ;
                      IF_NONE { PUSH string "Missing actions for second player" ; FAILWITH } {} ;
                      SWAP ;
                      DUP ;
                      CAR ;
                      IF_LEFT
                        { IF_LEFT
                            { DROP ;
                              DUP 2 ;
                              CAR ;
                              IF_LEFT
                                { DIG 2 ;
                                  DROP ;
                                  IF_LEFT { DROP 2 ; NONE address } { DROP ; CDR ; SOME } }
                                { DROP 2 ; CDR ; SOME } }
                            { DROP ;
                              DUP 2 ;
                              CAR ;
                              IF_LEFT
                                { SWAP ;
                                  DROP ;
                                  IF_LEFT { DROP ; CDR ; SOME } { DROP 2 ; NONE address } }
                                { DIG 2 ; DROP 2 ; CDR ; SOME } } }
                        { DROP ;
                          DUP 2 ;
                          CAR ;
                          IF_LEFT
                            { IF_LEFT { DIG 2 ; DROP 2 ; CDR } { DROP 2 ; CDR } ; SOME }
                            { DROP 3 ; NONE address } } ;
                      IF_NONE
                        { DIG 5 ; CAR ; CAR ; CAR ; CDR ; NONE (option address) ; DIG 2 ; UPDATE }
                        { DIG 6 ; CAR ; CAR ; CAR ; CDR ; SWAP ; SOME ; SOME ; DIG 2 ; UPDATE } ;
                      DIG 4 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      PAIR }
                    {} ;
                 DUP ;
                 CDR ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 GT ;
                 IF { DUP ;
                      CDR ;
                      DUP 2 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      EMPTY_MAP address nat ;
                      DUP 4 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CDR ;
                      ITER { CDR ;
                             IF_NONE
                               {}
                               { DUP 2 ;
                                 DUP 2 ;
                                 GET ;
                                 IF_NONE
                                   { SWAP ; PUSH nat 1 ; DIG 2 ; SWAP ; SOME ; SWAP ; UPDATE }
                                   { DIG 2 ; PUSH nat 1 ; DIG 2 ; ADD ; SOME ; DIG 2 ; UPDATE } } } ;
                      PUSH bool False ;
                      PUSH nat 0 ;
                      NONE address ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      LAMBDA
                        (pair (pair (pair (option address) nat) bool) address nat)
                        (pair (pair (option address) nat) bool)
                        { UNPAIR ;
                          UNPAIR ;
                          UNPAIR ;
                          DUP ;
                          IF_NONE
                            { DROP 3 ; PUSH bool False ; DUP 2 ; CDR ; DIG 2 ; CAR ; SOME }
                            { DROP ;
                              DUP 2 ;
                              DUP 5 ;
                              CDR ;
                              COMPARE ;
                              GT ;
                              IF { DROP 3 ; PUSH bool False ; DUP 2 ; CDR ; DIG 2 ; CAR ; SOME }
                                 { DUP 2 ;
                                   DIG 4 ;
                                   CDR ;
                                   COMPARE ;
                                   EQ ;
                                   IF { DIG 2 ; DROP ; PUSH bool True } { DIG 2 } ;
                                   DUG 2 } } ;
                          PAIR ;
                          PAIR } ;
                      DUG 2 ;
                      ITER { SWAP ; PAIR ; DUP 2 ; SWAP ; EXEC } ;
                      SWAP ;
                      DROP ;
                      UNPAIR ;
                      CAR ;
                      SWAP ;
                      IF { DROP ; UNIT ; LEFT unit ; LEFT address }
                         { IF_NONE { UNIT ; LEFT unit ; LEFT address } { RIGHT (or unit unit) } } ;
                      PAIR ;
                      DUP 3 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      PAIR ;
                      DIG 2 ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR }
                    {} ;
                 DUP ;
                 DIG 4 ;
                 CDR ;
                 CDR ;
                 DIG 5 ;
                 PAIR ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 2 ;
                         DIG 4 ;
                         DROP 3 ;
                         DUP 3 ;
                         DUP 3 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CAR ;
                         IF_CONS { SWAP ; DROP ; SOME } { NONE address } ;
                         IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                         CONTRACT unit ;
                         IF_NONE { FAILWITH } { SWAP ; DROP } ;
                         PUSH mutez 1000000 ;
                         PUSH mutez 2000000 ;
                         DUP 5 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CDR ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         MUL ;
                         DUP 6 ;
                         TRANSFER_TOKENS ;
                         DIG 3 ;
                         DUP 4 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CAR ;
                         IF_CONS { DROP ; SOME } { NONE (list address) } ;
                         IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                         IF_CONS { SWAP ; DROP ; SOME } { NONE address } ;
                         IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                         CONTRACT unit ;
                         IF_NONE { FAILWITH } { SWAP ; DROP } ;
                         PUSH mutez 1000000 ;
                         PUSH mutez 2000000 ;
                         DIG 5 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CDR ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         MUL ;
                         DIG 4 ;
                         TRANSFER_TOKENS ;
                         DIG 2 ;
                         NIL operation ;
                         PUSH string "draw" ;
                         EMIT %gameStatus string ;
                         CONS ;
                         DIG 2 ;
                         CONS ;
                         DIG 2 ;
                         CONS }
                       { DIG 3 ;
                         DIG 5 ;
                         DIG 6 ;
                         DROP 4 ;
                         DIG 2 ;
                         CAR ;
                         CAR ;
                         CDR ;
                         CAR ;
                         DIG 2 ;
                         CAR ;
                         CAR ;
                         CDR ;
                         CAR ;
                         COMPARE ;
                         EQ ;
                         IF { NIL operation }
                            { NIL operation ; PUSH string "" ; EMIT %newRound string ; CONS } } }
                   { DIG 2 ;
                     DIG 4 ;
                     DROP 2 ;
                     CONTRACT unit ;
                     IF_NONE { DIG 2 ; FAILWITH } { DIG 3 ; DROP } ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DIG 3 ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     PUSH string "win" ;
                     EMIT %gameStatus string ;
                     CONS ;
                     DIG 2 ;
                     CONS } ;
                 PAIR }
               { DIG 8 ;
                 DROP ;
                 DUP 2 ;
                 DUP 2 ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 PUSH string "Not allowed to stop this session" ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 7 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DUP ;
                 PUSH string
                      "Must wait at least 600 seconds before claiming Victory (in case opponent is not playing)" ;
                 SWAP ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 IF { DROP } { FAILWITH } ;
                 DUP ;
                 CAR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 GET ;
                 IF_NONE { NIL (pair bytes address) } {} ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 NIL address ;
                 DIG 2 ;
                 ITER { SWAP ;
                        DUP 3 ;
                        LAMBDA
                          (pair address (pair bytes address))
                          bool
                          { UNPAIR ; SWAP ; CDR ; COMPARE ; EQ } ;
                        DUP 4 ;
                        APPLY ;
                        PAIR ;
                        LEFT (option (pair bytes address)) ;
                        LOOP_LEFT
                          { UNPAIR ;
                            SWAP ;
                            IF_CONS
                              { DUP ;
                                DUP 4 ;
                                SWAP ;
                                EXEC ;
                                IF { SWAP ;
                                     DIG 2 ;
                                     DROP 2 ;
                                     SOME ;
                                     RIGHT (pair (lambda (pair bytes address) bool) (list (pair bytes address))) }
                                   { DROP ; SWAP ; PAIR ; LEFT (option (pair bytes address)) } }
                              { DROP ;
                                NONE (pair bytes address) ;
                                RIGHT (pair (lambda (pair bytes address) bool) (list (pair bytes address))) } } ;
                        IF_NONE { SWAP ; CONS } { DIG 2 ; DROP 2 } } ;
                 SWAP ;
                 DROP ;
                 PUSH nat 0 ;
                 DUP 2 ;
                 SIZE ;
                 COMPARE ;
                 GT ;
                 IF { DIG 5 ;
                      DIG 6 ;
                      DIG 7 ;
                      DROP 3 ;
                      DIG 3 ;
                      DIG 2 ;
                      PAIR ;
                      SWAP ;
                      DIG 2 ;
                      PAIR ;
                      PAIR ;
                      EXEC }
                    { DROP ;
                      DUP ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CDR ;
                      DUP 2 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      GET ;
                      DUP ;
                      IF_NONE { PUSH bool True } { DROP ; PUSH bool False } ;
                      IF { DIG 4 ;
                           DROP 2 ;
                           DIG 2 ;
                           SWAP ;
                           DIG 2 ;
                           DUP 2 ;
                           CDR ;
                           DUP 3 ;
                           CAR ;
                           CDR ;
                           CDR ;
                           CDR ;
                           UNIT ;
                           LEFT unit ;
                           LEFT address ;
                           PAIR ;
                           DUP 4 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           PAIR ;
                           DUP 4 ;
                           CAR ;
                           CAR ;
                           PAIR ;
                           PAIR ;
                           SWAP ;
                           DIG 3 ;
                           PAIR ;
                           PAIR ;
                           DIG 2 ;
                           SWAP ;
                           EXEC ;
                           DUP 3 ;
                           DUP 3 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CAR ;
                           IF_CONS { SWAP ; DROP ; SOME } { NONE address } ;
                           IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                           CONTRACT unit ;
                           IF_NONE { FAILWITH } { SWAP ; DROP } ;
                           PUSH mutez 1000000 ;
                           PUSH mutez 2000000 ;
                           DUP 5 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CDR ;
                           EDIV ;
                           IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                           CAR ;
                           MUL ;
                           DUP 6 ;
                           TRANSFER_TOKENS ;
                           DIG 3 ;
                           DUP 4 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CAR ;
                           IF_CONS { DROP ; SOME } { NONE (list address) } ;
                           IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                           IF_CONS { SWAP ; DROP ; SOME } { NONE address } ;
                           IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                           CONTRACT unit ;
                           IF_NONE { FAILWITH } { SWAP ; DROP } ;
                           PUSH mutez 1000000 ;
                           PUSH mutez 2000000 ;
                           DIG 5 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CDR ;
                           EDIV ;
                           IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                           CAR ;
                           MUL ;
                           DIG 4 ;
                           TRANSFER_TOKENS ;
                           DIG 2 ;
                           NIL operation ;
                           PUSH string "draw" ;
                           EMIT %gameStatus string ;
                           CONS ;
                           DIG 2 ;
                           CONS ;
                           DIG 2 ;
                           CONS ;
                           PAIR }
                         { DIG 5 ;
                           DIG 6 ;
                           DIG 7 ;
                           DROP 3 ;
                           IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                           DUP 2 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CAR ;
                           SWAP ;
                           NIL address ;
                           DIG 2 ;
                           ITER { SWAP ;
                                  DUP 3 ;
                                  LAMBDA
                                    (pair address (pair (or (or unit unit) unit) address))
                                    bool
                                    { UNPAIR ; SWAP ; CDR ; COMPARE ; EQ } ;
                                  DUP 4 ;
                                  APPLY ;
                                  PAIR ;
                                  LEFT (option (pair (or (or unit unit) unit) address)) ;
                                  LOOP_LEFT
                                    { UNPAIR ;
                                      SWAP ;
                                      IF_CONS
                                        { DUP ;
                                          DUP 4 ;
                                          SWAP ;
                                          EXEC ;
                                          IF { SWAP ;
                                               DIG 2 ;
                                               DROP 2 ;
                                               SOME ;
                                               RIGHT
                                                 (pair (lambda (pair (or (or unit unit) unit) address) bool)
                                                       (list (pair (or (or unit unit) unit) address))) }
                                             { DROP ; SWAP ; PAIR ; LEFT (option (pair (or (or unit unit) unit) address)) } }
                                        { DROP ;
                                          NONE (pair (or (or unit unit) unit) address) ;
                                          RIGHT
                                            (pair (lambda (pair (or (or unit unit) unit) address) bool)
                                                  (list (pair (or (or unit unit) unit) address))) } } ;
                                  IF_NONE { SWAP ; CONS } { DIG 2 ; DROP 2 } } ;
                           SWAP ;
                           DROP ;
                           PUSH nat 0 ;
                           DUP 2 ;
                           SIZE ;
                           COMPARE ;
                           GT ;
                           IF { DIG 3 ; DIG 2 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; EXEC }
                              { SWAP ; DIG 2 ; DIG 4 ; DROP 4 ; NIL operation ; PAIR } } } } } } ;
  view "board"
       nat
       (map address nat)
       { UNPAIR ;
         SWAP ;
         CDR ;
         SWAP ;
         GET ;
         IF_NONE
           { PUSH string "Unknown session" ; FAILWITH }
           { EMPTY_MAP address nat ;
             SWAP ;
             CAR ;
             CAR ;
             CAR ;
             CDR ;
             ITER { CDR ;
                    IF_NONE
                      {}
                      { DUP 2 ;
                        DUP 2 ;
                        GET ;
                        IF_NONE
                          { SWAP ; PUSH nat 1 ; DIG 2 ; SWAP ; SOME ; SWAP ; UPDATE }
                          { DIG 2 ; PUSH nat 1 ; DIG 2 ; ADD ; SOME ; DIG 2 ; UPDATE } } } } } }

