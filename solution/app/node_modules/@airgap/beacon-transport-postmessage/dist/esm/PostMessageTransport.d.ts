import { Transport } from '@airgap/beacon-core';
import { PostMessageClient } from '@airgap/beacon-transport-postmessage/dist/esm/PostMessageClient';
import { ExtendedPostMessagePairingResponse, Extension, PostMessagePairingRequest, Storage, StorageKey, TransportType } from '@airgap/beacon-types';
import { KeyPair } from '@stablelib/ed25519';
/**
 * @internalapi
 *
 *
 */
export declare class PostMessageTransport<T extends PostMessagePairingRequest | ExtendedPostMessagePairingResponse, K extends StorageKey.TRANSPORT_POSTMESSAGE_PEERS_DAPP | StorageKey.TRANSPORT_POSTMESSAGE_PEERS_WALLET> extends Transport<T, K, PostMessageClient> {
    readonly type: TransportType;
    constructor(name: string, keyPair: KeyPair, storage: Storage, storageKey: K);
    static isAvailable(): Promise<boolean>;
    static getAvailableExtensions(): Promise<Extension[]>;
    private static listenForExtensions;
    connect(): Promise<void>;
    startOpenChannelListener(): Promise<void>;
    getPairingRequestInfo(): Promise<PostMessagePairingRequest>;
    listen(publicKey: string): Promise<void>;
}
