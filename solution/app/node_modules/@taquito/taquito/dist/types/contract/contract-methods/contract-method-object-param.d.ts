import { ParameterSchema } from "@taquito/michelson-encoder";
import { ContractMethodInterface, SendParams } from '@taquito/taquito/dist/types/contract/contract-methods/contract-method-interface';
import { ContractProvider } from '@taquito/taquito/dist/types/contract/interface';
import { TransactionOperation } from '@taquito/taquito/dist/types/operations/transaction-operation';
import { TransferParams } from '@taquito/taquito/dist/types/operations/types';
import { TransactionWalletOperation, Wallet } from '@taquito/taquito/dist/types/wallet';
/**
 * @description Utility class to send smart contract operation
 * The format for the arguments is the object representation
 */
export declare class ContractMethodObject<T extends ContractProvider | Wallet> implements ContractMethodInterface {
    private provider;
    private address;
    private parameterSchema;
    private name;
    private args;
    private isMultipleEntrypoint;
    private isAnonymous;
    constructor(provider: T, address: string, parameterSchema: ParameterSchema, name: string, args?: any, isMultipleEntrypoint?: boolean, isAnonymous?: boolean);
    /**
     * @description Get the signature of the smart contract method
     */
    getSignature(): any;
    /**
     *
     * @description Send the smart contract operation
     *
     * @param Options generic operation parameter
     */
    send(params?: Partial<SendParams>): Promise<T extends Wallet ? TransactionWalletOperation : TransactionOperation>;
    /**
     *
     * @description Create transfer params to be used with TezosToolkit.contract.transfer methods
     *
     * @param Options generic transfer operation parameters
     */
    toTransferParams({ fee, gasLimit, storageLimit, source, amount, mutez, }?: Partial<SendParams>): TransferParams;
}
