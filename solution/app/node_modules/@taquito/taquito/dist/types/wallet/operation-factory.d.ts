import { BlockResponse } from '@taquito/rpc';
import { Context } from '@taquito/taquito/dist/types/context';
import { BatchWalletOperation } from '@taquito/taquito/dist/types/wallet/batch-operation';
import { DelegationWalletOperation } from '@taquito/taquito/dist/types/wallet/delegation-operation';
import { IncreasePaidStorageWalletOperation } from '@taquito/taquito/dist/types/wallet/increase-paid-storage-operation';
import { WalletOperation } from '@taquito/taquito/dist/types/wallet/operation';
import { OriginationWalletOperation } from '@taquito/taquito/dist/types/wallet/origination-operation';
import { TransactionWalletOperation } from '@taquito/taquito/dist/types/wallet/transaction-operation';
import { Observable, SchedulerLike } from 'rxjs';
export declare function timeoutAfter<T>(timeoutMillisec: number): (source: Observable<T>) => Observable<T>;
export declare const createNewPollingBasedHeadObservable: (sharedHeadOb: Observable<BlockResponse>, context: Context, _scheduler?: SchedulerLike) => Observable<BlockResponse>;
export interface OperationFactoryConfig {
    blockIdentifier?: string;
}
export declare class OperationFactory {
    private context;
    constructor(context: Context);
    private sharedHeadObs;
    private createNewHeadObservable;
    private createPastBlockWalker;
    private createHeadObservableFromConfig;
    createOperation(hash: string, config?: OperationFactoryConfig): Promise<WalletOperation>;
    createBatchOperation(hash: string, config?: OperationFactoryConfig): Promise<BatchWalletOperation>;
    createTransactionOperation(hash: string, config?: OperationFactoryConfig): Promise<TransactionWalletOperation>;
    createDelegationOperation(hash: string, config?: OperationFactoryConfig): Promise<DelegationWalletOperation>;
    createOriginationOperation(hash: string, config?: OperationFactoryConfig): Promise<OriginationWalletOperation>;
    createIncreasePaidStorageOperation(hash: string, config?: OperationFactoryConfig): Promise<IncreasePaidStorageWalletOperation>;
}
