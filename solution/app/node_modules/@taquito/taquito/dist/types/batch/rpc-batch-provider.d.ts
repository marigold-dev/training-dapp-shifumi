import { OpKind } from '@taquito/rpc';
import { Context } from '@taquito/taquito/dist/types/context';
import { ContractStorageType, DefaultContractType } from '@taquito/taquito/dist/types/contract/contract';
import { ContractMethod } from '@taquito/taquito/dist/types/contract/contract-methods/contract-method-flat-param';
import { SendParams } from '@taquito/taquito/dist/types/contract/contract-methods/contract-method-interface';
import { ContractMethodObject } from '@taquito/taquito/dist/types/contract/contract-methods/contract-method-object-param';
import { ContractProvider } from '@taquito/taquito/dist/types/contract/interface';
import { EstimationProvider } from '@taquito/taquito/dist/types/estimate/estimate-provider-interface';
import { BatchOperation } from '@taquito/taquito/dist/types/operations/batch-operation';
import { ActivationParams, DelegateParams, IncreasePaidStorageParams, OriginateParams, ParamsWithKind, RegisterGlobalConstantParams, SmartRollupAddMessagesParams, SmartRollupOriginateParamsWithProof, TransferParams, TransferTicketParams } from '@taquito/taquito/dist/types/operations/types';
import { Provider } from '@taquito/taquito/dist/types/provider';
export declare const BATCH_KINDS: OpKind[];
export type BatchKinds = OpKind.ACTIVATION | OpKind.ORIGINATION | OpKind.TRANSACTION | OpKind.DELEGATION;
export declare class OperationBatch extends Provider {
    private estimator;
    private operations;
    constructor(context: Context, estimator: EstimationProvider);
    private prepare;
    /**
     *
     * @description Add a transaction operation to the batch
     *
     * @param params Transfer operation parameter
     */
    withTransfer(params: TransferParams): this;
    /**
     *
     * @description Transfer tickets from a Tezos address (tz1,tz2 or tz3) to a smart contract address( KT1)
     *
     * @param params Transfer operation parameter
     */
    withTransferTicket(params: TransferTicketParams): this;
    /**
     *
     * @description Add a contract call to the batch
     *
     * @param params Call a contract method
     * @param options Generic operation parameters
     */
    withContractCall(params: ContractMethod<ContractProvider> | ContractMethodObject<ContractProvider>, options?: Partial<SendParams>): this;
    /**
     *
     * @description Add a delegation operation to the batch
     *
     * @param params Delegation operation parameter
     */
    withDelegation(params: DelegateParams): this;
    /**
     *
     * @description Add an activation operation to the batch
     *
     * @param params Activation operation parameter
     * @throws {@link InvalidKeyHashError}
     */
    withActivation({ pkh, secret }: ActivationParams): this;
    /**
     *
     * @description Add an origination operation to the batch
     *
     * @param params Origination operation parameter
     */
    withOrigination<TContract extends DefaultContractType = DefaultContractType>(params: OriginateParams<ContractStorageType<TContract>>): this;
    /**
     *
     * @description Add a register a global constant operation to the batch
     *
     * @param params RegisterGlobalConstant operation parameter
     */
    withRegisterGlobalConstant(params: RegisterGlobalConstantParams): this;
    /**
     *
     * @description Add an increase paid storage operation to the batch
     *
     * @param params IncreasePaidStorage operation parameter
     */
    withIncreasePaidStorage(params: IncreasePaidStorageParams): this;
    /**
     *
     * @description Add a smart rollup add messages operation to the batch
     *
     * @param params Rollup origination operation parameter
     */
    withSmartRollupAddMessages(params: SmartRollupAddMessagesParams): this;
    /**
     *
     * @description Add a smart rollup originate operation to the batch
     *
     * @param params Smart Rollup Originate operation parameter
     */
    withSmartRollupOriginate(params: SmartRollupOriginateParamsWithProof): this;
    getRPCOp(param: ParamsWithKind): Promise<import("@taquito/taquito/dist/types/operations/types").RPCTransferOperation | import("@taquito/taquito/dist/types/operations/types").RPCOriginationOperation | import("@taquito/taquito/dist/types/operations/types").RPCDelegateOperation | import("@taquito/taquito/dist/types/operations/types").RPCRegisterGlobalConstantOperation | import("@taquito/taquito/dist/types/operations/types").RPCIncreasePaidStorageOperation | import("@taquito/taquito/dist/types/operations/types").RPCTransferTicketOperation | import("@taquito/taquito/dist/types/operations/types").RPCSmartRollupAddMessagesOperation | import("@taquito/taquito/dist/types/operations/types").RPCSmartRollupOriginateOperation>;
    /**
     *
     * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array
     *
     * @param params Operations parameter
     * @throws {@link InvalidOperationKindError}
     */
    with(params: ParamsWithKind[]): this;
    /**
     *
     * @description Forge and Inject the operation batch
     *
     * @param params Optionally specify the source of the operation
     */
    send(params?: {
        source?: string;
    }): Promise<BatchOperation>;
}
export declare class RPCBatchProvider {
    private context;
    private estimator;
    constructor(context: Context, estimator: EstimationProvider);
    /***
     *
     * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch
     *
     * @param params List of operation to batch together
     */
    batch(params?: ParamsWithKind[]): OperationBatch;
}
