/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AccountParameter } from '../models/AccountParameter';
import type { BigMap } from '../models/BigMap';
import type { BigMapActionParameter } from '../models/BigMapActionParameter';
import type { BigMapKey } from '../models/BigMapKey';
import type { BigMapKeyHistorical } from '../models/BigMapKeyHistorical';
import type { BigMapKeyUpdate } from '../models/BigMapKeyUpdate';
import type { BigMapTagsParameter } from '../models/BigMapTagsParameter';
import type { BigMapUpdate } from '../models/BigMapUpdate';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { JsonParameter } from '../models/JsonParameter';
import type { MichelineFormat } from '../models/MichelineFormat';
import type { MichelinePrim } from '../models/MichelinePrim';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { StringParameter } from '../models/StringParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class BigMapsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get bigmaps count
     * Returns the total number of bigmaps.
     * @returns number
     * @throws ApiError
     */
    public async getBigMapsCount(): Promise<number> {
        const options = this.getBigMapsCountApiRequestOptions(        );
        const result = await __request(options);
        return result.body;
    }

    /**
     * **used to get the request options without making a http request**
     * Get bigmaps count
     * Returns the total number of bigmaps.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public getBigMapsCountApiRequestOptions(): ApiRequestOptions {
        return {
            ...this.config,
            method: 'GET',
            path: `/v1/bigmaps/count`,
        };
    }

    /**
     * Get bigmaps
     * Returns a list of bigmaps.
     * @returns BigMap
     * @throws ApiError
     */
    public async getBigMaps({
        micheline,
        contract,
        path,
        tags,
        active,
        lastLevel,
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline **/
        micheline: MichelineFormat,
        /** Filters bigmaps by smart contract address. **/
        contract?: AccountParameter | null,
        /** Filters bigmaps by path in the contract storage. **/
        path?: StringParameter | null,
        /** Filters bigmaps by tags: `token_metadata` - tzip-12, `metadata` - tzip-16. **/
        tags?: BigMapTagsParameter | null,
        /** Filters bigmaps by status: `true` - active, `false` - removed. **/
        active?: boolean | null,
        /** Filters bigmaps by the last update level. **/
        lastLevel?: Int32Parameter | null,
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts bigmaps by specified field. Supported fields: `id` (default), `ptr`, `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<BigMap>> {
        const options = this.getBigMapsApiRequestOptions({
            micheline: micheline,
            contract: contract,
            path: path,
            tags: tags,
            active: active,
            lastLevel: lastLevel,
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get bigmaps
 * Returns a list of bigmaps.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBigMapsApiRequestOptions({
    micheline,
    contract,
    path,
    tags,
    active,
    lastLevel,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline **/
    micheline: MichelineFormat,
    /** Filters bigmaps by smart contract address. **/
    contract?: AccountParameter | null,
    /** Filters bigmaps by path in the contract storage. **/
    path?: StringParameter | null,
    /** Filters bigmaps by tags: `token_metadata` - tzip-12, `metadata` - tzip-16. **/
    tags?: BigMapTagsParameter | null,
    /** Filters bigmaps by status: `true` - active, `false` - removed. **/
    active?: boolean | null,
    /** Filters bigmaps by the last update level. **/
    lastLevel?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts bigmaps by specified field. Supported fields: `id` (default), `ptr`, `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps`,
        query: {
            'micheline': micheline,
            'contract': contract,
            'path': path,
            'tags': tags,
            'active': active,
            'lastLevel': lastLevel,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get bigmap updates
 * Returns a list of all bigmap updates.
 * @returns BigMapUpdate
 * @throws ApiError
 */
public async getBigMapUpdates({
    micheline,
    bigmap,
    path,
    contract,
    tags,
    action,
    value,
    level,
    sort,
    offset,
    limit = 100,
}: {
    /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline **/
    micheline: MichelineFormat,
    /** Filters updates by bigmap ptr **/
    bigmap?: Int32Parameter | null,
    /** Filters updates by bigmap path **/
    path?: StringParameter | null,
    /** Filters updates by bigmap contract **/
    contract?: AccountParameter | null,
    /** Filters updates by bigmap tags: `token_metadata` - tzip-12, `metadata` - tzip-16 **/
    tags?: BigMapTagsParameter | null,
    /** Filters updates by action **/
    action?: BigMapActionParameter | null,
    /** Filters updates by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
    value?: JsonParameter | null,
    /** Filters updates by level **/
    level?: Int32Parameter | null,
    /** Sorts bigmaps by specified field. Supported fields: `id` (default), `ptr`, `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BigMapUpdate>> {
    const options = this.getBigMapUpdatesApiRequestOptions({
        micheline: micheline,
        bigmap: bigmap,
        path: path,
        contract: contract,
        tags: tags,
        action: action,
        value: value,
        level: level,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get bigmap updates
 * Returns a list of all bigmap updates.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBigMapUpdatesApiRequestOptions({
    micheline,
    bigmap,
    path,
    contract,
    tags,
    action,
    value,
    level,
    sort,
    offset,
    limit = 100,
}: {
    /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline **/
    micheline: MichelineFormat,
    /** Filters updates by bigmap ptr **/
    bigmap?: Int32Parameter | null,
    /** Filters updates by bigmap path **/
    path?: StringParameter | null,
    /** Filters updates by bigmap contract **/
    contract?: AccountParameter | null,
    /** Filters updates by bigmap tags: `token_metadata` - tzip-12, `metadata` - tzip-16 **/
    tags?: BigMapTagsParameter | null,
    /** Filters updates by action **/
    action?: BigMapActionParameter | null,
    /** Filters updates by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
    value?: JsonParameter | null,
    /** Filters updates by level **/
    level?: Int32Parameter | null,
    /** Sorts bigmaps by specified field. Supported fields: `id` (default), `ptr`, `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/updates`,
        query: {
            'micheline': micheline,
            'bigmap': bigmap,
            'path': path,
            'contract': contract,
            'tags': tags,
            'action': action,
            'value': value,
            'level': level,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get bigmap by Id
 * Returns a bigmap with the specified Id.
 * @returns BigMap
 * @throws ApiError
 */
public async getBigMapById({
    id,
    micheline,
}: {
    /** Bigmap Id **/
    id: number,
    /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline **/
    micheline: MichelineFormat,
}): Promise<BigMap> {
    const options = this.getBigMapByIdApiRequestOptions({
        id: id,
        micheline: micheline,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get bigmap by Id
 * Returns a bigmap with the specified Id.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBigMapByIdApiRequestOptions({
    id,
    micheline,
}: {
    /** Bigmap Id **/
    id: number,
    /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline **/
    micheline: MichelineFormat,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/${id}`,
        query: {
            'micheline': micheline,
        },
    };
}

/**
 * Get bigmap type
 * Returns a type of the bigmap with the specified Id in Micheline format (with annotations).
 * @returns MichelinePrim
 * @throws ApiError
 */
public async getBigMapType({
    id,
}: {
    /** Bigmap Id **/
    id: number,
}): Promise<MichelinePrim> {
    const options = this.getBigMapTypeApiRequestOptions({
        id: id,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get bigmap type
 * Returns a type of the bigmap with the specified Id in Micheline format (with annotations).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBigMapTypeApiRequestOptions({
    id,
}: {
    /** Bigmap Id **/
    id: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/${id}/type`,
    };
}

/**
 * Get bigmap keys
 * Returns a list of bigmap keys.
 * @returns BigMapKey
 * @throws ApiError
 */
public async getKeys({
    id,
    micheline,
    active,
    key,
    value,
    lastLevel,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Bigmap Id **/
    id: number,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
    /** Filters keys by status: `true` - active, `false` - removed. **/
    active?: boolean | null,
    /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
    key?: JsonParameter | null,
    /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
    value?: JsonParameter | null,
    /** Filters bigmap keys by the last update level. **/
    lastLevel?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts bigmap keys by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `updates`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BigMapKey>> {
    const options = this.getKeysApiRequestOptions({
        id: id,
        micheline: micheline,
        active: active,
        key: key,
        value: value,
        lastLevel: lastLevel,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get bigmap keys
 * Returns a list of bigmap keys.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getKeysApiRequestOptions({
    id,
    micheline,
    active,
    key,
    value,
    lastLevel,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Bigmap Id **/
    id: number,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
    /** Filters keys by status: `true` - active, `false` - removed. **/
    active?: boolean | null,
    /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
    key?: JsonParameter | null,
    /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
    value?: JsonParameter | null,
    /** Filters bigmap keys by the last update level. **/
    lastLevel?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts bigmap keys by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `updates`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/${id}/keys`,
        query: {
            'micheline': micheline,
            'active': active,
            'key': key,
            'value': value,
            'lastLevel': lastLevel,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get bigmap key
 * Returns the specified bigmap key.
 * @returns BigMapKey
 * @throws ApiError
 */
public async getKey({
    id,
    key,
    micheline,
}: {
    /** Bigmap Id **/
    id: number,
    /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
     * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
    key: string | null,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
}): Promise<BigMapKey> {
    const options = this.getKeyApiRequestOptions({
        id: id,
        key: key,
        micheline: micheline,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get bigmap key
 * Returns the specified bigmap key.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getKeyApiRequestOptions({
    id,
    key,
    micheline,
}: {
    /** Bigmap Id **/
    id: number,
    /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
     * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
    key: string | null,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/${id}/keys/${key}`,
        query: {
            'micheline': micheline,
        },
    };
}

/**
 * Get bigmap key updates
 * Returns updates history for the specified bigmap key.
 * @returns BigMapKeyUpdate
 * @throws ApiError
 */
public async getKeyUpdates({
    id,
    key,
    micheline,
    sort,
    offset,
    limit = 100,
}: {
    /** Bigmap Id **/
    id: number,
    /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
     * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
    key: string | null,
    /** Format of the key value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
    /** Sorts bigmap updates by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BigMapKeyUpdate>> {
    const options = this.getKeyUpdatesApiRequestOptions({
        id: id,
        key: key,
        micheline: micheline,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get bigmap key updates
 * Returns updates history for the specified bigmap key.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getKeyUpdatesApiRequestOptions({
    id,
    key,
    micheline,
    sort,
    offset,
    limit = 100,
}: {
    /** Bigmap Id **/
    id: number,
    /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
     * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
    key: string | null,
    /** Format of the key value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
    /** Sorts bigmap updates by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/${id}/keys/${key}/updates`,
        query: {
            'micheline': micheline,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get historical keys
 * Returns a list of bigmap keys at the specific block.
 * @returns BigMapKeyHistorical
 * @throws ApiError
 */
public async getHistoricalKeys({
    id,
    level,
    micheline,
    active,
    key,
    value,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Bigmap Id **/
    id: number,
    /** Level of the block at which you want to get bigmap keys **/
    level: number,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
    /** Filters keys by status: `true` - active, `false` - removed. **/
    active?: boolean | null,
    /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
    key?: JsonParameter | null,
    /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
    value?: JsonParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts bigmap keys by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BigMapKeyHistorical>> {
    const options = this.getHistoricalKeysApiRequestOptions({
        id: id,
        level: level,
        micheline: micheline,
        active: active,
        key: key,
        value: value,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get historical keys
 * Returns a list of bigmap keys at the specific block.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getHistoricalKeysApiRequestOptions({
    id,
    level,
    micheline,
    active,
    key,
    value,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Bigmap Id **/
    id: number,
    /** Level of the block at which you want to get bigmap keys **/
    level: number,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
    /** Filters keys by status: `true` - active, `false` - removed. **/
    active?: boolean | null,
    /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
    key?: JsonParameter | null,
    /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
    value?: JsonParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts bigmap keys by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/${id}/historical_keys/${level}`,
        query: {
            'micheline': micheline,
            'active': active,
            'key': key,
            'value': value,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get historical key
 * Returns the specified bigmap key at the specific block.
 * @returns BigMapKeyHistorical
 * @throws ApiError
 */
public async getKey2({
    id,
    level,
    key,
    micheline,
}: {
    /** Bigmap Id **/
    id: number,
    /** Level of the block at which you want to get bigmap key **/
    level: number,
    /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
     * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
    key: string | null,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
}): Promise<BigMapKeyHistorical> {
    const options = this.getKey2ApiRequestOptions({
        id: id,
        level: level,
        key: key,
        micheline: micheline,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get historical key
 * Returns the specified bigmap key at the specific block.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getKey2ApiRequestOptions({
    id,
    level,
    key,
    micheline,
}: {
    /** Bigmap Id **/
    id: number,
    /** Level of the block at which you want to get bigmap key **/
    level: number,
    /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
     * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
    key: string | null,
    /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
    micheline: MichelineFormat,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/bigmaps/${id}/historical_keys/${level}/${key}`,
        query: {
            'micheline': micheline,
        },
    };
}

}