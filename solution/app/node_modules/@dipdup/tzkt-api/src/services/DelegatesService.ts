/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BoolParameter } from '../models/BoolParameter';
import type { Delegate } from '../models/Delegate';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class DelegatesService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get delegates
     * Returns a list of delegate accounts.
     * @returns Delegate
     * @throws ApiError
     */
    public async get({
        active,
        lastActivity,
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
        active?: BoolParameter | null,
        /** Filters delegates by last activity level (where the delegate was updated) **/
        lastActivity?: Int32Parameter | null,
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts delegators by specified field. Supported fields: `id` (default), `activationLevel`, `deactivationLevel`, `stakingBalance`, `balance`, `numDelegators`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Delegate>> {
        const options = this.getApiRequestOptions({
            active: active,
            lastActivity: lastActivity,
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegates
 * Returns a list of delegate accounts.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    active,
    lastActivity,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
    active?: BoolParameter | null,
    /** Filters delegates by last activity level (where the delegate was updated) **/
    lastActivity?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `activationLevel`, `deactivationLevel`, `stakingBalance`, `balance`, `numDelegators`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/delegates`,
        query: {
            'active': active,
            'lastActivity': lastActivity,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get delegates count
 * Returns a number of delegate accounts.
 * @returns number
 * @throws ApiError
 */
public async getCount({
    active,
}: {
    /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
    active?: BoolParameter | null,
}): Promise<number> {
    const options = this.getCountApiRequestOptions({
        active: active,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegates count
 * Returns a number of delegate accounts.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCountApiRequestOptions({
    active,
}: {
    /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
    active?: BoolParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/delegates/count`,
        query: {
            'active': active,
        },
    };
}

/**
 * Get delegate by address
 * Returns a delegate with the specified address.
 * @returns Delegate
 * @throws ApiError
 */
public async getByAddress({
    address,
}: {
    /** Delegate address (starting with tz) **/
    address: string | null,
}): Promise<Delegate> {
    const options = this.getByAddressApiRequestOptions({
        address: address,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegate by address
 * Returns a delegate with the specified address.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByAddressApiRequestOptions({
    address,
}: {
    /** Delegate address (starting with tz) **/
    address: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/delegates/${address}`,
    };
}

}