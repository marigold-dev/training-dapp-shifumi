/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OffsetParameter } from '../models/OffsetParameter';
import type { Protocol } from '../models/Protocol';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class ProtocolsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get protocols count
     * Returns the total number of protocols.
     * @returns number
     * @throws ApiError
     */
    public async getCount(): Promise<number> {
        const options = this.getCountApiRequestOptions(        );
        const result = await __request(options);
        return result.body;
    }

    /**
     * **used to get the request options without making a http request**
     * Get protocols count
     * Returns the total number of protocols.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public getCountApiRequestOptions(): ApiRequestOptions {
        return {
            ...this.config,
            method: 'GET',
            path: `/v1/protocols/count`,
        };
    }

    /**
     * Get protocols
     * Returns a list of protocols.
     * @returns Protocol
     * @throws ApiError
     */
    public async get({
        sort,
        offset,
        limit = 100,
    }: {
        /** Sorts protocols by specified field. Supported fields: `id` (default), `code`, `firstLevel`, `lastLevel`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Protocol>> {
        const options = this.getApiRequestOptions({
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get protocols
 * Returns a list of protocols.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    sort,
    offset,
    limit = 100,
}: {
    /** Sorts protocols by specified field. Supported fields: `id` (default), `code`, `firstLevel`, `lastLevel`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/protocols`,
        query: {
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get current protocol
 * Returns current protocol.
 * @returns Protocol
 * @throws ApiError
 */
public async getCurrent(): Promise<Protocol> {
    const options = this.getCurrentApiRequestOptions(        );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get current protocol
 * Returns current protocol.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCurrentApiRequestOptions(): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/protocols/current`,
    };
}

/**
 * Get protocol by code
 * Returns a protocol with the specified proto code.
 * @returns Protocol
 * @throws ApiError
 */
public async getByCode({
    code,
}: {
    /** Protocol code (e.g. 4 for Athens, 5 for Babylon, etc) **/
    code: number,
}): Promise<Protocol> {
    const options = this.getByCodeApiRequestOptions({
        code: code,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get protocol by code
 * Returns a protocol with the specified proto code.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByCodeApiRequestOptions({
    code,
}: {
    /** Protocol code (e.g. 4 for Athens, 5 for Babylon, etc) **/
    code: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/protocols/${code}`,
    };
}

/**
 * Get protocol by hash
 * Returns a protocol with the specified hash.
 * @returns Protocol
 * @throws ApiError
 */
public async getByHash({
    hash,
}: {
    /** Protocol hash **/
    hash: string | null,
}): Promise<Protocol> {
    const options = this.getByHashApiRequestOptions({
        hash: hash,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get protocol by hash
 * Returns a protocol with the specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByHashApiRequestOptions({
    hash,
}: {
    /** Protocol hash **/
    hash: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/protocols/${hash}`,
    };
}

/**
 * Get protocol by cycle
 * Returns a protocol at the specified cycle.
 * @returns Protocol
 * @throws ApiError
 */
public async getByCycle({
    cycle,
}: {
    /** Cycle index **/
    cycle: number,
}): Promise<Protocol> {
    const options = this.getByCycleApiRequestOptions({
        cycle: cycle,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get protocol by cycle
 * Returns a protocol at the specified cycle.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByCycleApiRequestOptions({
    cycle,
}: {
    /** Cycle index **/
    cycle: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/protocols/cycles/${cycle}`,
    };
}

}