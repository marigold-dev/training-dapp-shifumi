/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { DateTimeParameter } from '../models/DateTimeParameter';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { Statistics } from '../models/Statistics';
import type { Symbols } from '../models/Symbols';
import type { TimestampParameter } from '../models/TimestampParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class StatisticsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get statistics
     * Returns a list of end-of-block statistics.
     * @returns Statistics
     * @throws ApiError
     */
    public async get({
        quote,
        level,
        timestamp,
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols,
        /** Filters statistics by level. **/
        level?: Int32Parameter | null,
        /** Filters statistics by timestamp. **/
        timestamp?: TimestampParameter | null,
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Statistics>> {
        const options = this.getApiRequestOptions({
            quote: quote,
            level: level,
            timestamp: timestamp,
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get statistics
 * Returns a list of end-of-block statistics.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    quote,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters statistics by level. **/
    level?: Int32Parameter | null,
    /** Filters statistics by timestamp. **/
    timestamp?: TimestampParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/statistics`,
        query: {
            'quote': quote,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get daily statistics
 * Returns a list of end-of-day statistics.
 * @returns Statistics
 * @throws ApiError
 */
public async getDaily({
    quote,
    date,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters statistics by date. **/
    date?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<Statistics>> {
    const options = this.getDailyApiRequestOptions({
        quote: quote,
        date: date,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get daily statistics
 * Returns a list of end-of-day statistics.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDailyApiRequestOptions({
    quote,
    date,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters statistics by date. **/
    date?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/statistics/daily`,
        query: {
            'quote': quote,
            'date': date,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get cyclic statistics
 * Returns a list of end-of-cycle statistics.
 * @returns Statistics
 * @throws ApiError
 */
public async getCyclesAll({
    quote,
    cycle,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters statistics by cycle. **/
    cycle?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<Statistics>> {
    const options = this.getCyclesAllApiRequestOptions({
        quote: quote,
        cycle: cycle,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get cyclic statistics
 * Returns a list of end-of-cycle statistics.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCyclesAllApiRequestOptions({
    quote,
    cycle,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters statistics by cycle. **/
    cycle?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/statistics/cyclic`,
        query: {
            'quote': quote,
            'cycle': cycle,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get current statistics
 * Returns statistics at the end of a head block.
 * @returns Statistics
 * @throws ApiError
 */
public async getCycles({
    quote,
    select,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
}): Promise<Statistics> {
    const options = this.getCyclesApiRequestOptions({
        quote: quote,
        select: select,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get current statistics
 * Returns statistics at the end of a head block.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCyclesApiRequestOptions({
    quote,
    select,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/statistics/current`,
        query: {
            'quote': quote,
            'select': select,
        },
    };
}

}