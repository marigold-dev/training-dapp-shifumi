/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BakerRewards } from '../models/BakerRewards';
import type { DelegatorRewards } from '../models/DelegatorRewards';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { RewardSplit } from '../models/RewardSplit';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { SplitDelegator } from '../models/SplitDelegator';
import type { Symbols } from '../models/Symbols';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class RewardsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get baker cycle rewards count
     * Returns total number of cycles where the baker was active
     * @returns number
     * @throws ApiError
     */
    public async getBakerRewardsCount({
        address,
    }: {
        /** Baker address **/
        address: string | null,
    }): Promise<number> {
        const options = this.getBakerRewardsCountApiRequestOptions({
            address: address,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get baker cycle rewards count
 * Returns total number of cycles where the baker was active
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBakerRewardsCountApiRequestOptions({
    address,
}: {
    /** Baker address **/
    address: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/bakers/${address}/count`,
    };
}

/**
 * Get baker cycle rewards
 * Returns a list of baker rewards for every cycle, including future cycles.
 * @returns BakerRewards
 * @throws ApiError
 */
public async getBakerRewards({
    address,
    quote,
    cycle,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Baker address. **/
    address: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters rewards by cycle. **/
    cycle?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BakerRewards>> {
    const options = this.getBakerRewardsApiRequestOptions({
        address: address,
        quote: quote,
        cycle: cycle,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get baker cycle rewards
 * Returns a list of baker rewards for every cycle, including future cycles.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBakerRewardsApiRequestOptions({
    address,
    quote,
    cycle,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Baker address. **/
    address: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters rewards by cycle. **/
    cycle?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/bakers/${address}`,
        query: {
            'quote': quote,
            'cycle': cycle,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get baker cycle rewards by cycle
 * Returns baker cycle rewards for the specified cycle.
 * @returns BakerRewards
 * @throws ApiError
 */
public async getBakerRewardsByCycle({
    address,
    cycle,
    quote,
}: {
    /** Baker address **/
    address: string | null,
    /** Rewards cycle **/
    cycle: number,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<BakerRewards> {
    const options = this.getBakerRewardsByCycleApiRequestOptions({
        address: address,
        cycle: cycle,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get baker cycle rewards by cycle
 * Returns baker cycle rewards for the specified cycle.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBakerRewardsByCycleApiRequestOptions({
    address,
    cycle,
    quote,
}: {
    /** Baker address **/
    address: string | null,
    /** Rewards cycle **/
    cycle: number,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/bakers/${address}/${cycle}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get delegator cycle rewards count
 * Returns total number of cycles where the delegator was delegated to an active baker
 * @returns number
 * @throws ApiError
 */
public async getDelegatorRewardsCount({
    address,
}: {
    /** Delegator address **/
    address: string | null,
}): Promise<number> {
    const options = this.getDelegatorRewardsCountApiRequestOptions({
        address: address,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegator cycle rewards count
 * Returns total number of cycles where the delegator was delegated to an active baker
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDelegatorRewardsCountApiRequestOptions({
    address,
}: {
    /** Delegator address **/
    address: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/delegators/${address}/count`,
    };
}

/**
 * Get delegator cycle rewards
 * Returns a list of delegator rewards for every cycle, including future cycles.
 * @returns DelegatorRewards
 * @throws ApiError
 */
public async getDelegatorRewards({
    address,
    quote,
    cycle,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Delegator address. **/
    address: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters rewards by cycle. **/
    cycle?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<DelegatorRewards>> {
    const options = this.getDelegatorRewardsApiRequestOptions({
        address: address,
        quote: quote,
        cycle: cycle,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegator cycle rewards
 * Returns a list of delegator rewards for every cycle, including future cycles.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDelegatorRewardsApiRequestOptions({
    address,
    quote,
    cycle,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Delegator address. **/
    address: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters rewards by cycle. **/
    cycle?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/delegators/${address}`,
        query: {
            'quote': quote,
            'cycle': cycle,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get delegator cycle rewards by cycle
 * Returns delegator cycle rewards for the specified cycle.
 * @returns DelegatorRewards
 * @throws ApiError
 */
public async getDelegatorRewardsByCycle({
    address,
    cycle,
    quote,
}: {
    /** Delegator address **/
    address: string | null,
    /** Rewards cycle **/
    cycle: number,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<DelegatorRewards> {
    const options = this.getDelegatorRewardsByCycleApiRequestOptions({
        address: address,
        cycle: cycle,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegator cycle rewards by cycle
 * Returns delegator cycle rewards for the specified cycle.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDelegatorRewardsByCycleApiRequestOptions({
    address,
    cycle,
    quote,
}: {
    /** Delegator address **/
    address: string | null,
    /** Rewards cycle **/
    cycle: number,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/delegators/${address}/${cycle}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get reward split
 * Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares.
 * @returns RewardSplit
 * @throws ApiError
 */
public async getRewardSplit({
    address,
    cycle,
    offset,
    limit = 100,
}: {
    /** Baker address **/
    address: string | null,
    /** Rewards cycle **/
    cycle: number,
    /** Specifies how many delegators in the reward split should be skipped **/
    offset: number,
    /** Maximum number of delegators to return **/
    limit?: number,
}): Promise<RewardSplit> {
    const options = this.getRewardSplitApiRequestOptions({
        address: address,
        cycle: cycle,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get reward split
 * Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getRewardSplitApiRequestOptions({
    address,
    cycle,
    offset,
    limit = 100,
}: {
    /** Baker address **/
    address: string | null,
    /** Rewards cycle **/
    cycle: number,
    /** Specifies how many delegators in the reward split should be skipped **/
    offset: number,
    /** Maximum number of delegators to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/split/${address}/${cycle}`,
        query: {
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get reward split delegator
 * Returns delegator from the reward split for the specified cycle.
 * @returns SplitDelegator
 * @throws ApiError
 */
public async getRewardSplitDelegator({
    baker,
    cycle,
    delegator,
}: {
    /** Baker address **/
    baker: string | null,
    /** Reward split cycle **/
    cycle: number,
    /** Delegator address **/
    delegator: string | null,
}): Promise<SplitDelegator> {
    const options = this.getRewardSplitDelegatorApiRequestOptions({
        baker: baker,
        cycle: cycle,
        delegator: delegator,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get reward split delegator
 * Returns delegator from the reward split for the specified cycle.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getRewardSplitDelegatorApiRequestOptions({
    baker,
    cycle,
    delegator,
}: {
    /** Baker address **/
    baker: string | null,
    /** Reward split cycle **/
    cycle: number,
    /** Delegator address **/
    delegator: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rewards/split/${baker}/${cycle}/${delegator}`,
    };
}

}