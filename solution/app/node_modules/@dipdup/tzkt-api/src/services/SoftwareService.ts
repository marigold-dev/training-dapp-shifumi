/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { Software } from '../models/Software';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class SoftwareService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get baker software
     * Returns a list of baker software.
     * @returns Software
     * @throws ApiError
     */
    public async get({
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts delegators by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `blocksCount`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Software>> {
        const options = this.getApiRequestOptions({
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get baker software
 * Returns a list of baker software.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `blocksCount`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/software`,
        query: {
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get software count
 * Returns a number of software.
 * @returns number
 * @throws ApiError
 */
public async getCount(): Promise<number> {
    const options = this.getCountApiRequestOptions(        );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get software count
 * Returns a number of software.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCountApiRequestOptions(): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/software/count`,
    };
}

}