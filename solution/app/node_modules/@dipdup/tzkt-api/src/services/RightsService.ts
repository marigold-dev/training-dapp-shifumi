/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AccountParameter } from '../models/AccountParameter';
import type { BakingRight } from '../models/BakingRight';
import type { BakingRightStatusParameter } from '../models/BakingRightStatusParameter';
import type { BakingRightTypeParameter } from '../models/BakingRightTypeParameter';
import type { Int32NullParameter } from '../models/Int32NullParameter';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class RightsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get rights count
     * Returns the total number of stored rights.
     * @returns number
     * @throws ApiError
     */
    public async getCount({
        type,
        baker,
        cycle,
        level,
        slots,
        priority,
        status,
    }: {
        /** Filters rights by type (`baking`, `endorsing`) **/
        type?: BakingRightTypeParameter | null,
        /** Filters rights by baker **/
        baker?: AccountParameter | null,
        /** Filters rights by cycle **/
        cycle?: Int32Parameter | null,
        /** Filters rights by level **/
        level?: Int32Parameter | null,
        /** Filters rights by slots **/
        slots?: Int32NullParameter | null,
        /** Filters rights by priority **/
        priority?: Int32NullParameter | null,
        /** Filters rights by status (`future`, `realized`, `uncovered`, `missed`) **/
        status?: BakingRightStatusParameter | null,
    }): Promise<number> {
        const options = this.getCountApiRequestOptions({
            type: type,
            baker: baker,
            cycle: cycle,
            level: level,
            slots: slots,
            priority: priority,
            status: status,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get rights count
 * Returns the total number of stored rights.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCountApiRequestOptions({
    type,
    baker,
    cycle,
    level,
    slots,
    priority,
    status,
}: {
    /** Filters rights by type (`baking`, `endorsing`) **/
    type?: BakingRightTypeParameter | null,
    /** Filters rights by baker **/
    baker?: AccountParameter | null,
    /** Filters rights by cycle **/
    cycle?: Int32Parameter | null,
    /** Filters rights by level **/
    level?: Int32Parameter | null,
    /** Filters rights by slots **/
    slots?: Int32NullParameter | null,
    /** Filters rights by priority **/
    priority?: Int32NullParameter | null,
    /** Filters rights by status (`future`, `realized`, `uncovered`, `missed`) **/
    status?: BakingRightStatusParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rights/count`,
        query: {
            'type': type,
            'baker': baker,
            'cycle': cycle,
            'level': level,
            'slots': slots,
            'priority': priority,
            'status': status,
        },
    };
}

/**
 * Get rights
 * Returns a list of rights.
 * @returns BakingRight
 * @throws ApiError
 */
public async get({
    type,
    baker,
    cycle,
    level,
    slots,
    priority,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters rights by type (`baking`, `endorsing`) **/
    type?: BakingRightTypeParameter | null,
    /** Filters rights by baker **/
    baker?: AccountParameter | null,
    /** Filters rights by cycle **/
    cycle?: Int32Parameter | null,
    /** Filters rights by level **/
    level?: Int32Parameter | null,
    /** Filters rights by slots **/
    slots?: Int32NullParameter | null,
    /** Filters rights by priority **/
    priority?: Int32NullParameter | null,
    /** Filters rights by status (`future`, `realized`, `uncovered`, `missed`) **/
    status?: BakingRightStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts rights by specified field. Supported fields: `level` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BakingRight>> {
    const options = this.getApiRequestOptions({
        type: type,
        baker: baker,
        cycle: cycle,
        level: level,
        slots: slots,
        priority: priority,
        status: status,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get rights
 * Returns a list of rights.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    type,
    baker,
    cycle,
    level,
    slots,
    priority,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters rights by type (`baking`, `endorsing`) **/
    type?: BakingRightTypeParameter | null,
    /** Filters rights by baker **/
    baker?: AccountParameter | null,
    /** Filters rights by cycle **/
    cycle?: Int32Parameter | null,
    /** Filters rights by level **/
    level?: Int32Parameter | null,
    /** Filters rights by slots **/
    slots?: Int32NullParameter | null,
    /** Filters rights by priority **/
    priority?: Int32NullParameter | null,
    /** Filters rights by status (`future`, `realized`, `uncovered`, `missed`) **/
    status?: BakingRightStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts rights by specified field. Supported fields: `level` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/rights`,
        query: {
            'type': type,
            'baker': baker,
            'cycle': cycle,
            'level': level,
            'slots': slots,
            'priority': priority,
            'status': status,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

}