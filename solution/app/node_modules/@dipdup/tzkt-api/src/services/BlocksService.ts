/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AccountParameter } from '../models/AccountParameter';
import type { Block } from '../models/Block';
import type { DateTimeParameter } from '../models/DateTimeParameter';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { MichelineFormat } from '../models/MichelineFormat';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { Symbols } from '../models/Symbols';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class BlocksService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get blocks count
     * Returns the total number of blocks.
     * @returns number
     * @throws ApiError
     */
    public async getCount(): Promise<number> {
        const options = this.getCountApiRequestOptions(        );
        const result = await __request(options);
        return result.body;
    }

    /**
     * **used to get the request options without making a http request**
     * Get blocks count
     * Returns the total number of blocks.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public getCountApiRequestOptions(): ApiRequestOptions {
        return {
            ...this.config,
            method: 'GET',
            path: `/v1/blocks/count`,
        };
    }

    /**
     * Get blocks
     * Returns a list of blocks.
     * @returns Block
     * @throws ApiError
     */
    public async get({
        quote,
        baker,
        level,
        timestamp,
        priority,
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols,
        /** Filters blocks by baker. Allowed fields for `.eqx` mode: none. **/
        baker?: AccountParameter | null,
        /** Filters blocks by level. **/
        level?: Int32Parameter | null,
        /** Filters blocks by timestamp. **/
        timestamp?: DateTimeParameter | null,
        /** Filters blocks by priority. **/
        priority?: Int32Parameter | null,
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts blocks by specified field. Supported fields: `id` (default), `level`, `priority`, `validations`, `reward`, `fees`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Block>> {
        const options = this.getApiRequestOptions({
            quote: quote,
            baker: baker,
            level: level,
            timestamp: timestamp,
            priority: priority,
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get blocks
 * Returns a list of blocks.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    quote,
    baker,
    level,
    timestamp,
    priority,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters blocks by baker. Allowed fields for `.eqx` mode: none. **/
    baker?: AccountParameter | null,
    /** Filters blocks by level. **/
    level?: Int32Parameter | null,
    /** Filters blocks by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters blocks by priority. **/
    priority?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts blocks by specified field. Supported fields: `id` (default), `level`, `priority`, `validations`, `reward`, `fees`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/blocks`,
        query: {
            'quote': quote,
            'baker': baker,
            'level': level,
            'timestamp': timestamp,
            'priority': priority,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get block by hash
 * Returns a block with the specified hash.
 * @returns Block
 * @throws ApiError
 */
public async getByHash({
    hash,
    micheline,
    quote,
    operations = false,
}: {
    /** Block hash **/
    hash: string | null,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Flag indicating whether to include block operations into returned object or not **/
    operations?: boolean,
}): Promise<Block> {
    const options = this.getByHashApiRequestOptions({
        hash: hash,
        micheline: micheline,
        quote: quote,
        operations: operations,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get block by hash
 * Returns a block with the specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByHashApiRequestOptions({
    hash,
    micheline,
    quote,
    operations = false,
}: {
    /** Block hash **/
    hash: string | null,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Flag indicating whether to include block operations into returned object or not **/
    operations?: boolean,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/blocks/${hash}`,
        query: {
            'micheline': micheline,
            'quote': quote,
            'operations': operations,
        },
    };
}

/**
 * Get block by level
 * Returns a block at the specified level.
 * @returns Block
 * @throws ApiError
 */
public async getByLevel({
    level,
    micheline,
    quote,
    operations = false,
}: {
    /** Block level **/
    level: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Flag indicating whether to include block operations into returned object or not **/
    operations?: boolean,
}): Promise<Block> {
    const options = this.getByLevelApiRequestOptions({
        level: level,
        micheline: micheline,
        quote: quote,
        operations: operations,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get block by level
 * Returns a block at the specified level.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByLevelApiRequestOptions({
    level,
    micheline,
    quote,
    operations = false,
}: {
    /** Block level **/
    level: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Flag indicating whether to include block operations into returned object or not **/
    operations?: boolean,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/blocks/${level}`,
        query: {
            'micheline': micheline,
            'quote': quote,
            'operations': operations,
        },
    };
}

}