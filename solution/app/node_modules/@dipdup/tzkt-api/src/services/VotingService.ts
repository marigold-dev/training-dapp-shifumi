/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { Proposal } from '../models/Proposal';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { VoterSnapshot } from '../models/VoterSnapshot';
import type { VoterStatusParameter } from '../models/VoterStatusParameter';
import type { VotingEpoch } from '../models/VotingEpoch';
import type { VotingPeriod } from '../models/VotingPeriod';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class VotingService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get proposals count
     * Returns the total number of protocol proposals.
     * @returns number
     * @throws ApiError
     */
    public async getProposalsCount(): Promise<number> {
        const options = this.getProposalsCountApiRequestOptions(        );
        const result = await __request(options);
        return result.body;
    }

    /**
     * **used to get the request options without making a http request**
     * Get proposals count
     * Returns the total number of protocol proposals.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public getProposalsCountApiRequestOptions(): ApiRequestOptions {
        return {
            ...this.config,
            method: 'GET',
            path: `/v1/voting/proposals/count`,
        };
    }

    /**
     * Get proposals
     * Returns a list of protocol proposals.
     * @returns Proposal
     * @throws ApiError
     */
    public async getProposals({
        epoch,
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Filters proposals by voting epoch **/
        epoch?: Int32Parameter | null,
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts proposals by specified field. Supported fields: `id` (default), `upvotes`, `rolls`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Proposal>> {
        const options = this.getProposalsApiRequestOptions({
            epoch: epoch,
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get proposals
 * Returns a list of protocol proposals.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getProposalsApiRequestOptions({
    epoch,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters proposals by voting epoch **/
    epoch?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts proposals by specified field. Supported fields: `id` (default), `upvotes`, `rolls`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/proposals`,
        query: {
            'epoch': epoch,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get proposal by hash
 * Returns a protocol proposal with the specified hash.
 * @returns Proposal
 * @throws ApiError
 */
public async getProposalByHash({
    hash,
}: {
    /** Proposal hash **/
    hash: string | null,
}): Promise<Proposal> {
    const options = this.getProposalByHashApiRequestOptions({
        hash: hash,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get proposal by hash
 * Returns a protocol proposal with the specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getProposalByHashApiRequestOptions({
    hash,
}: {
    /** Proposal hash **/
    hash: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/proposals/${hash}`,
    };
}

/**
 * Get voting periods
 * Returns a list of voting periods.
 * @returns VotingPeriod
 * @throws ApiError
 */
public async getPeriods({
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts voting periods by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<VotingPeriod>> {
    const options = this.getPeriodsApiRequestOptions({
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get voting periods
 * Returns a list of voting periods.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getPeriodsApiRequestOptions({
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts voting periods by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/periods`,
        query: {
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get voting period by index
 * Returns a voting period at the specified index.
 * @returns VotingPeriod
 * @throws ApiError
 */
public async getPeriod({
    index,
}: {
    /** Voting period index starting from zero **/
    index: number,
}): Promise<VotingPeriod> {
    const options = this.getPeriodApiRequestOptions({
        index: index,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get voting period by index
 * Returns a voting period at the specified index.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getPeriodApiRequestOptions({
    index,
}: {
    /** Voting period index starting from zero **/
    index: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/periods/${index}`,
    };
}

/**
 * Get current voting period
 * Returns current voting period.
 * @returns VotingPeriod
 * @throws ApiError
 */
public async getCurrentPeriod(): Promise<VotingPeriod> {
    const options = this.getCurrentPeriodApiRequestOptions(        );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get current voting period
 * Returns current voting period.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCurrentPeriodApiRequestOptions(): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/periods/current`,
    };
}

/**
 * Get period voters
 * Returns voters from the voting period at the specified index.
 * @returns VoterSnapshot
 * @throws ApiError
 */
public async getPeriodVotersAll({
    index,
    status,
    sort,
    offset,
    limit = 100,
}: {
    /** Voting period index starting from zero **/
    index: number,
    /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
    status?: VoterStatusParameter | null,
    /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<VoterSnapshot>> {
    const options = this.getPeriodVotersAllApiRequestOptions({
        index: index,
        status: status,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get period voters
 * Returns voters from the voting period at the specified index.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getPeriodVotersAllApiRequestOptions({
    index,
    status,
    sort,
    offset,
    limit = 100,
}: {
    /** Voting period index starting from zero **/
    index: number,
    /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
    status?: VoterStatusParameter | null,
    /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/periods/${index}/voters`,
        query: {
            'status': status,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get period voter
 * Returns a voter with the specified address from the voting period at the specified index.
 * @returns VoterSnapshot
 * @throws ApiError
 */
public async getPeriodVoter({
    index,
    address,
}: {
    /** Voting period index starting from zero **/
    index: number,
    /** Voter address **/
    address: string | null,
}): Promise<VoterSnapshot> {
    const options = this.getPeriodVoterApiRequestOptions({
        index: index,
        address: address,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get period voter
 * Returns a voter with the specified address from the voting period at the specified index.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getPeriodVoterApiRequestOptions({
    index,
    address,
}: {
    /** Voting period index starting from zero **/
    index: number,
    /** Voter address **/
    address: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/periods/${index}/voters/${address}`,
    };
}

/**
 * Get current period voters
 * Returns voters from the current period.
 * @returns VoterSnapshot
 * @throws ApiError
 */
public async getPeriodVoters({
    status,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
    status?: VoterStatusParameter | null,
    /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<VoterSnapshot>> {
    const options = this.getPeriodVotersApiRequestOptions({
        status: status,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get current period voters
 * Returns voters from the current period.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getPeriodVotersApiRequestOptions({
    status,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
    status?: VoterStatusParameter | null,
    /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/periods/current/voters`,
        query: {
            'status': status,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get current period voter
 * Returns a voter with the specified address from the current period.
 * @returns VoterSnapshot
 * @throws ApiError
 */
public async getPeriodVoter2({
    address,
}: {
    /** Voter address **/
    address: string | null,
}): Promise<VoterSnapshot> {
    const options = this.getPeriodVoter2ApiRequestOptions({
        address: address,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get current period voter
 * Returns a voter with the specified address from the current period.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getPeriodVoter2ApiRequestOptions({
    address,
}: {
    /** Voter address **/
    address: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/periods/current/voters/${address}`,
    };
}

/**
 * Get voting epochs
 * Returns a list of voting epochs.
 * @returns VotingEpoch
 * @throws ApiError
 */
public async getEpochs({
    sort,
    offset,
    limit = 100,
}: {
    /** Sorts voting epochs by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<VotingEpoch>> {
    const options = this.getEpochsApiRequestOptions({
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get voting epochs
 * Returns a list of voting epochs.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getEpochsApiRequestOptions({
    sort,
    offset,
    limit = 100,
}: {
    /** Sorts voting epochs by specified field. Supported fields: `id` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/epochs`,
        query: {
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get voting epoch by index
 * Returns a voting epoch at the specified index.
 * @returns VotingEpoch
 * @throws ApiError
 */
public async getEpoch({
    index,
}: {
    /** Voting epoch index starting from zero **/
    index: number,
}): Promise<VotingEpoch> {
    const options = this.getEpochApiRequestOptions({
        index: index,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get voting epoch by index
 * Returns a voting epoch at the specified index.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getEpochApiRequestOptions({
    index,
}: {
    /** Voting epoch index starting from zero **/
    index: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/epochs/${index}`,
    };
}

/**
 * Get current voting epoch
 * Returns the current voting epoch
 * @returns VotingEpoch
 * @throws ApiError
 */
public async getCurrentEpoch(): Promise<VotingEpoch> {
    const options = this.getCurrentEpochApiRequestOptions(        );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get current voting epoch
 * Returns the current voting epoch
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCurrentEpochApiRequestOptions(): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/epochs/current`,
    };
}

/**
 * Get latest voting
 * Returns the latest epoch with at least one proposal
 * @returns VotingEpoch
 * @throws ApiError
 */
public async getLatestVoting(): Promise<VotingEpoch> {
    const options = this.getLatestVotingApiRequestOptions(        );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get latest voting
 * Returns the latest epoch with at least one proposal
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getLatestVotingApiRequestOptions(): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/voting/epochs/latest_voting`,
    };
}

}