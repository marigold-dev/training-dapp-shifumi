/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Account } from '../models/Account';
import type { AccountMetadata } from '../models/AccountMetadata';
import type { AccountParameter } from '../models/AccountParameter';
import type { AccountTypeParameter } from '../models/AccountTypeParameter';
import type { BoolParameter } from '../models/BoolParameter';
import type { ContractKindParameter } from '../models/ContractKindParameter';
import type { DateTimeParameter } from '../models/DateTimeParameter';
import type { Delegator } from '../models/Delegator';
import type { HistoricalBalance } from '../models/HistoricalBalance';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { Int64Parameter } from '../models/Int64Parameter';
import type { JsonParameter } from '../models/JsonParameter';
import type { MichelineFormat } from '../models/MichelineFormat';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { Operation } from '../models/Operation';
import type { OperationStatusParameter } from '../models/OperationStatusParameter';
import type { RelatedContract } from '../models/RelatedContract';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortMode } from '../models/SortMode';
import type { SortParameter } from '../models/SortParameter';
import type { StringParameter } from '../models/StringParameter';
import type { Symbols } from '../models/Symbols';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class AccountsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get accounts
     * Returns a list of accounts.
     * @returns Account
     * @throws ApiError
     */
    public async get({
        type,
        kind,
        delegate,
        balance,
        staked,
        lastActivity,
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Filters accounts by type (`user`, `delegate`, `contract`). **/
        type?: AccountTypeParameter | null,
        /** Filters accounts by contract kind (`delegator_contract` or `smart_contract`) **/
        kind?: ContractKindParameter | null,
        /** Filters accounts by delegate. Allowed fields for `.eqx` mode: none. **/
        delegate?: AccountParameter | null,
        /** Filters accounts by balance **/
        balance?: Int64Parameter | null,
        /** Filters accounts by participation in staking **/
        staked?: BoolParameter | null,
        /** Filters accounts by last activity level (where the account was updated) **/
        lastActivity?: Int32Parameter | null,
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts delegators by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`, `numContracts`. **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Account>> {
        const options = this.getApiRequestOptions({
            type: type,
            kind: kind,
            delegate: delegate,
            balance: balance,
            staked: staked,
            lastActivity: lastActivity,
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get accounts
 * Returns a list of accounts.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    type,
    kind,
    delegate,
    balance,
    staked,
    lastActivity,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters accounts by type (`user`, `delegate`, `contract`). **/
    type?: AccountTypeParameter | null,
    /** Filters accounts by contract kind (`delegator_contract` or `smart_contract`) **/
    kind?: ContractKindParameter | null,
    /** Filters accounts by delegate. Allowed fields for `.eqx` mode: none. **/
    delegate?: AccountParameter | null,
    /** Filters accounts by balance **/
    balance?: Int64Parameter | null,
    /** Filters accounts by participation in staking **/
    staked?: BoolParameter | null,
    /** Filters accounts by last activity level (where the account was updated) **/
    lastActivity?: Int32Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`, `numContracts`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts`,
        query: {
            'type': type,
            'kind': kind,
            'delegate': delegate,
            'balance': balance,
            'staked': staked,
            'lastActivity': lastActivity,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get accounts count
 * Returns a number of accounts.
 * @returns number
 * @throws ApiError
 */
public async getCount({
    type,
    kind,
    balance,
    staked,
}: {
    /** Filters accounts by type (`user`, `delegate`, `contract`). **/
    type?: AccountTypeParameter | null,
    /** Filters accounts by contract kind (`delegator_contract` or `smart_contract`) **/
    kind?: ContractKindParameter | null,
    /** Filters accounts by balance **/
    balance?: Int64Parameter | null,
    /** Filters accounts by participation in staking **/
    staked?: BoolParameter | null,
}): Promise<number> {
    const options = this.getCountApiRequestOptions({
        type: type,
        kind: kind,
        balance: balance,
        staked: staked,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get accounts count
 * Returns a number of accounts.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCountApiRequestOptions({
    type,
    kind,
    balance,
    staked,
}: {
    /** Filters accounts by type (`user`, `delegate`, `contract`). **/
    type?: AccountTypeParameter | null,
    /** Filters accounts by contract kind (`delegator_contract` or `smart_contract`) **/
    kind?: ContractKindParameter | null,
    /** Filters accounts by balance **/
    balance?: Int64Parameter | null,
    /** Filters accounts by participation in staking **/
    staked?: BoolParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/count`,
        query: {
            'type': type,
            'kind': kind,
            'balance': balance,
            'staked': staked,
        },
    };
}

/**
 * Get account by address
 * Returns an account with the specified address.
 * @returns Account
 * @throws ApiError
 */
public async getByAddress({
    address,
    metadata = false,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Include or not account metadata **/
    metadata?: boolean,
}): Promise<Account> {
    const options = this.getByAddressApiRequestOptions({
        address: address,
        metadata: metadata,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get account by address
 * Returns an account with the specified address.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByAddressApiRequestOptions({
    address,
    metadata = false,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Include or not account metadata **/
    metadata?: boolean,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}`,
        query: {
            'metadata': metadata,
        },
    };
}

/**
 * Get account contracts
 * Returns a list of contracts created by (or related to) the specified account.
 * @returns RelatedContract
 * @throws ApiError
 */
public async getContracts({
    address,
    sort,
    offset,
    limit = 100,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Sorts contracts by specified field. Supported fields: `id` (default, desc), `balance`, `creationLevel`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<RelatedContract>> {
    const options = this.getContractsApiRequestOptions({
        address: address,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get account contracts
 * Returns a list of contracts created by (or related to) the specified account.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getContractsApiRequestOptions({
    address,
    sort,
    offset,
    limit = 100,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Sorts contracts by specified field. Supported fields: `id` (default, desc), `balance`, `creationLevel`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/contracts`,
        query: {
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get account delegators
 * Returns a list of accounts delegated to the specified account.
 * @returns Delegator
 * @throws ApiError
 */
public async getDelegators({
    address,
    type,
    balance,
    delegationLevel,
    sort,
    offset,
    limit = 100,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Filters delegators by type (`user`, `delegate`, `contract`). **/
    type?: AccountTypeParameter | null,
    /** Filters delegators by balance. **/
    balance?: Int64Parameter | null,
    /** Number of items to skip **/
    delegationLevel?: Int32Parameter | null,
    /** Sorts delegators by specified field. Supported fields: `delegationLevel` (default, desc), `balance`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<Delegator>> {
    const options = this.getDelegatorsApiRequestOptions({
        address: address,
        type: type,
        balance: balance,
        delegationLevel: delegationLevel,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get account delegators
 * Returns a list of accounts delegated to the specified account.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDelegatorsApiRequestOptions({
    address,
    type,
    balance,
    delegationLevel,
    sort,
    offset,
    limit = 100,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Filters delegators by type (`user`, `delegate`, `contract`). **/
    type?: AccountTypeParameter | null,
    /** Filters delegators by balance. **/
    balance?: Int64Parameter | null,
    /** Number of items to skip **/
    delegationLevel?: Int32Parameter | null,
    /** Sorts delegators by specified field. Supported fields: `delegationLevel` (default, desc), `balance`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/delegators`,
        query: {
            'type': type,
            'balance': balance,
            'delegationLevel': delegationLevel,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get account operations
 * Returns a list of operations related to the specified account.
 * Note: for better flexibility this endpoint accumulates query parameters (filters) of each `/operations/{type}` endpoint,
 * so a particular filter may affect several operation types containing this filter.
 * For example, if you specify an `initiator` it will affect all transactions, delegations and originations,
 * because all these types have an `initiator` field.
 * @returns Operation
 * @throws ApiError
 */
public async getOperations({
    address,
    sort,
    micheline,
    quote,
    type,
    initiator,
    sender,
    target,
    prevDelegate,
    newDelegate,
    contractManager,
    contractDelegate,
    originatedContract,
    accuser,
    offender,
    baker,
    level,
    timestamp,
    entrypoint,
    parameter,
    parameters,
    hasInternals,
    status,
    lastId,
    limit = 100,
    from,
    to,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Sort mode (0 - ascending, 1 - descending), operations of different types can only be sorted by ID. **/
    sort: SortMode,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Comma separated list of operation types to return (`endorsement`, `ballot`, `proposal`, `activation`, `double_baking`, `double_endorsing`, `nonce_revelation`, `delegation`, `origination`, `transaction`, `reveal`, `migration`, `revelation_penalty`, `baking`). If not specified then all operation types except `endorsement` and `baking` will be returned. **/
    type?: string | null,
    /** Filters transactions, delegations and originations by initiator. Allowed fields for `.eqx` mode: none. **/
    initiator?: AccountParameter | null,
    /** Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for `.eqx` mode: none. **/
    sender?: AccountParameter | null,
    /** Filters transactions by target. Allowed fields for `.eqx` mode: none. **/
    target?: AccountParameter | null,
    /** Filters delegations by prev delegate. Allowed fields for `.eqx` mode: none. **/
    prevDelegate?: AccountParameter | null,
    /** Filters delegations by new delegate. Allowed fields for `.eqx` mode: none. **/
    newDelegate?: AccountParameter | null,
    /** Filters origination operations by manager. Allowed fields for `.eqx` mode: none. **/
    contractManager?: AccountParameter | null,
    /** Filters origination operations by delegate. Allowed fields for `.eqx` mode: none. **/
    contractDelegate?: AccountParameter | null,
    /** Filters origination operations by originated contract. Allowed fields for `.eqx` mode: none. **/
    originatedContract?: AccountParameter | null,
    /** Filters double baking and double endorsing by accuser. Allowed fields for `.eqx` mode: none. **/
    accuser?: AccountParameter | null,
    /** Filters double baking and double endorsing by offender. Allowed fields for `.eqx` mode: none. **/
    offender?: AccountParameter | null,
    /** Filters seed nonce revelation operations by baker. Allowed fields for `.eqx` mode: none. **/
    baker?: AccountParameter | null,
    /** Filters operations by level. **/
    level?: Int32Parameter | null,
    /** Filters operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters transactions by entrypoint called on the target contract. **/
    entrypoint?: StringParameter | null,
    /** Filters transactions by parameter value. Note, this query parameter supports the following format: `?parameter{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?parameter.token_id=...` or `?parameter.sigs.0.ne=...`. **/
    parameter?: JsonParameter | null,
    /** **DEPRECATED**. Use `entrypoint` and `parameter` instead. **/
    parameters?: StringParameter | null,
    /** Filters transactions by presence of internal operations. **/
    hasInternals?: BoolParameter | null,
    /** Filters transactions, delegations, originations and reveals by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Id of the last operation received, which is used as an offset for pagination **/
    lastId?: number | null,
    /** Number of items to return **/
    limit?: number,
    /** **DEPRECATED**. Use `timestamp.ge=` intead. **/
    from?: string | null,
    /** **DEPRECATED**. Use `timestamp.lt=` intead. **/
    to?: string | null,
}): Promise<Array<Operation>> {
    const options = this.getOperationsApiRequestOptions({
        address: address,
        sort: sort,
        micheline: micheline,
        quote: quote,
        type: type,
        initiator: initiator,
        sender: sender,
        target: target,
        prevDelegate: prevDelegate,
        newDelegate: newDelegate,
        contractManager: contractManager,
        contractDelegate: contractDelegate,
        originatedContract: originatedContract,
        accuser: accuser,
        offender: offender,
        baker: baker,
        level: level,
        timestamp: timestamp,
        entrypoint: entrypoint,
        parameter: parameter,
        parameters: parameters,
        hasInternals: hasInternals,
        status: status,
        lastId: lastId,
        limit: limit,
        from: from,
        to: to,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get account operations
 * Returns a list of operations related to the specified account.
 * Note: for better flexibility this endpoint accumulates query parameters (filters) of each `/operations/{type}` endpoint,
 * so a particular filter may affect several operation types containing this filter.
 * For example, if you specify an `initiator` it will affect all transactions, delegations and originations,
 * because all these types have an `initiator` field.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getOperationsApiRequestOptions({
    address,
    sort,
    micheline,
    quote,
    type,
    initiator,
    sender,
    target,
    prevDelegate,
    newDelegate,
    contractManager,
    contractDelegate,
    originatedContract,
    accuser,
    offender,
    baker,
    level,
    timestamp,
    entrypoint,
    parameter,
    parameters,
    hasInternals,
    status,
    lastId,
    limit = 100,
    from,
    to,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Sort mode (0 - ascending, 1 - descending), operations of different types can only be sorted by ID. **/
    sort: SortMode,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Comma separated list of operation types to return (`endorsement`, `ballot`, `proposal`, `activation`, `double_baking`, `double_endorsing`, `nonce_revelation`, `delegation`, `origination`, `transaction`, `reveal`, `migration`, `revelation_penalty`, `baking`). If not specified then all operation types except `endorsement` and `baking` will be returned. **/
    type?: string | null,
    /** Filters transactions, delegations and originations by initiator. Allowed fields for `.eqx` mode: none. **/
    initiator?: AccountParameter | null,
    /** Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for `.eqx` mode: none. **/
    sender?: AccountParameter | null,
    /** Filters transactions by target. Allowed fields for `.eqx` mode: none. **/
    target?: AccountParameter | null,
    /** Filters delegations by prev delegate. Allowed fields for `.eqx` mode: none. **/
    prevDelegate?: AccountParameter | null,
    /** Filters delegations by new delegate. Allowed fields for `.eqx` mode: none. **/
    newDelegate?: AccountParameter | null,
    /** Filters origination operations by manager. Allowed fields for `.eqx` mode: none. **/
    contractManager?: AccountParameter | null,
    /** Filters origination operations by delegate. Allowed fields for `.eqx` mode: none. **/
    contractDelegate?: AccountParameter | null,
    /** Filters origination operations by originated contract. Allowed fields for `.eqx` mode: none. **/
    originatedContract?: AccountParameter | null,
    /** Filters double baking and double endorsing by accuser. Allowed fields for `.eqx` mode: none. **/
    accuser?: AccountParameter | null,
    /** Filters double baking and double endorsing by offender. Allowed fields for `.eqx` mode: none. **/
    offender?: AccountParameter | null,
    /** Filters seed nonce revelation operations by baker. Allowed fields for `.eqx` mode: none. **/
    baker?: AccountParameter | null,
    /** Filters operations by level. **/
    level?: Int32Parameter | null,
    /** Filters operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters transactions by entrypoint called on the target contract. **/
    entrypoint?: StringParameter | null,
    /** Filters transactions by parameter value. Note, this query parameter supports the following format: `?parameter{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?parameter.token_id=...` or `?parameter.sigs.0.ne=...`. **/
    parameter?: JsonParameter | null,
    /** **DEPRECATED**. Use `entrypoint` and `parameter` instead. **/
    parameters?: StringParameter | null,
    /** Filters transactions by presence of internal operations. **/
    hasInternals?: BoolParameter | null,
    /** Filters transactions, delegations, originations and reveals by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Id of the last operation received, which is used as an offset for pagination **/
    lastId?: number | null,
    /** Number of items to return **/
    limit?: number,
    /** **DEPRECATED**. Use `timestamp.ge=` intead. **/
    from?: string | null,
    /** **DEPRECATED**. Use `timestamp.lt=` intead. **/
    to?: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/operations`,
        query: {
            'sort': sort,
            'micheline': micheline,
            'quote': quote,
            'type': type,
            'initiator': initiator,
            'sender': sender,
            'target': target,
            'prevDelegate': prevDelegate,
            'newDelegate': newDelegate,
            'contractManager': contractManager,
            'contractDelegate': contractDelegate,
            'originatedContract': originatedContract,
            'accuser': accuser,
            'offender': offender,
            'baker': baker,
            'level': level,
            'timestamp': timestamp,
            'entrypoint': entrypoint,
            'parameter': parameter,
            'parameters': parameters,
            'hasInternals': hasInternals,
            'status': status,
            'lastId': lastId,
            'limit': limit,
            'from': from,
            'to': to,
        },
    };
}

/**
 * Get account metadata
 * Returns metadata of the specified account (alias, logo, website, contacts, etc).
 * @returns AccountMetadata
 * @throws ApiError
 */
public async getMetadata({
    address,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
}): Promise<AccountMetadata> {
    const options = this.getMetadataApiRequestOptions({
        address: address,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get account metadata
 * Returns metadata of the specified account (alias, logo, website, contacts, etc).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getMetadataApiRequestOptions({
    address,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/metadata`,
    };
}

/**
 * Get account report
 * Exports account balance report in .csv format
 * @returns any
 * @throws ApiError
 */
public async getBalanceReport({
    address,
    from,
    to,
    currency,
    historical = false,
    delimiter = 'comma',
    separator = 'point',
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) **/
    from?: string | null,
    /** End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) **/
    to?: string | null,
    /** Currency to convert amounts to (`btc`, `eur`, `usd`, `cny`, `jpy`, `krw`, `eth`) **/
    currency?: string | null,
    /** `true` if you want to use historical prices, `false` to use current price **/
    historical?: boolean,
    /** Column delimiter (`comma`, `semicolon`) **/
    delimiter?: string | null,
    /** Decimal separator (`comma`, `point`) **/
    separator?: string | null,
}): Promise<any> {
    const options = this.getBalanceReportApiRequestOptions({
        address: address,
        from: from,
        to: to,
        currency: currency,
        historical: historical,
        delimiter: delimiter,
        separator: separator,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get account report
 * Exports account balance report in .csv format
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBalanceReportApiRequestOptions({
    address,
    from,
    to,
    currency,
    historical = false,
    delimiter = 'comma',
    separator = 'point',
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) **/
    from?: string | null,
    /** End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) **/
    to?: string | null,
    /** Currency to convert amounts to (`btc`, `eur`, `usd`, `cny`, `jpy`, `krw`, `eth`) **/
    currency?: string | null,
    /** `true` if you want to use historical prices, `false` to use current price **/
    historical?: boolean,
    /** Column delimiter (`comma`, `semicolon`) **/
    delimiter?: string | null,
    /** Decimal separator (`comma`, `point`) **/
    separator?: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/report`,
        query: {
            'from': from,
            'to': to,
            'currency': currency,
            'historical': historical,
            'delimiter': delimiter,
            'separator': separator,
        },
    };
}

/**
 * Get balance history
 * Returns time series with historical balances (only changes, without duplicates).
 * @returns HistoricalBalance
 * @throws ApiError
 */
public async getBalanceHistory({
    address,
    quote,
    step,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Step of the time series, for example if `step = 1000` you will get balances at blocks `1000, 2000, 3000, ...`. **/
    step?: number | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts historical balances by specified field. Supported fields: `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset: number,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<HistoricalBalance>> {
    const options = this.getBalanceHistoryApiRequestOptions({
        address: address,
        quote: quote,
        step: step,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get balance history
 * Returns time series with historical balances (only changes, without duplicates).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBalanceHistoryApiRequestOptions({
    address,
    quote,
    step,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Step of the time series, for example if `step = 1000` you will get balances at blocks `1000, 2000, 3000, ...`. **/
    step?: number | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts historical balances by specified field. Supported fields: `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset: number,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/balance_history`,
        query: {
            'quote': quote,
            'step': step,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get balance at level
 * Returns account balance at the specified block
 * @returns number
 * @throws ApiError
 */
public async getBalanceAtLevel({
    address,
    level,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Block height at which you want to know account balance **/
    level: number,
}): Promise<number> {
    const options = this.getBalanceAtLevelApiRequestOptions({
        address: address,
        level: level,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get balance at level
 * Returns account balance at the specified block
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBalanceAtLevelApiRequestOptions({
    address,
    level,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Block height at which you want to know account balance **/
    level: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/balance_history/${level}`,
    };
}

/**
 * Get balance at date
 * Returns account balance at the specified datetime
 * @returns number
 * @throws ApiError
 */
public async getBalanceAtDate({
    address,
    datetime,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Datetime at which you want to know account balance (e.g. `2020-01-01`, or `2019-12-30T23:42:59Z`) **/
    datetime: string,
}): Promise<number> {
    const options = this.getBalanceAtDateApiRequestOptions({
        address: address,
        datetime: datetime,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get balance at date
 * Returns account balance at the specified datetime
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBalanceAtDateApiRequestOptions({
    address,
    datetime,
}: {
    /** Account address (starting with tz or KT) **/
    address: string | null,
    /** Datetime at which you want to know account balance (e.g. `2020-01-01`, or `2019-12-30T23:42:59Z`) **/
    datetime: string,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/accounts/${address}/balance_history/${datetime}`,
    };
}

}