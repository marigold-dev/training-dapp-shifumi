/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { DateTimeParameter } from '../models/DateTimeParameter';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { Quote } from '../models/Quote';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class QuotesService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get quotes count
     * Returns the total number of quotes aligned with blocks.
     * @returns number
     * @throws ApiError
     */
    public async getCount(): Promise<number> {
        const options = this.getCountApiRequestOptions(        );
        const result = await __request(options);
        return result.body;
    }

    /**
     * **used to get the request options without making a http request**
     * Get quotes count
     * Returns the total number of quotes aligned with blocks.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public getCountApiRequestOptions(): ApiRequestOptions {
        return {
            ...this.config,
            method: 'GET',
            path: `/v1/quotes/count`,
        };
    }

    /**
     * Get last quote
     * Returns last known quote.
     * @returns Quote
     * @throws ApiError
     */
    public async getLast(): Promise<Quote> {
        const options = this.getLastApiRequestOptions(        );
        const result = await __request(options);
        return result.body;
    }

    /**
     * **used to get the request options without making a http request**
     * Get last quote
     * Returns last known quote.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public getLastApiRequestOptions(): ApiRequestOptions {
        return {
            ...this.config,
            method: 'GET',
            path: `/v1/quotes/last`,
        };
    }

    /**
     * Get quotes
     * Returns a list of quotes aligned with blocks.
     * @returns Quote
     * @throws ApiError
     */
    public async get({
        level,
        timestamp,
        select,
        sort,
        offset,
        limit = 100,
    }: {
        /** Filters quotes by level. **/
        level?: Int32Parameter | null,
        /** Filters quotes by timestamp. **/
        timestamp?: DateTimeParameter | null,
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null,
        /** Sorts quotes by specified field. Supported fields: `level` (default). **/
        sort?: SortParameter | null,
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null,
        /** Maximum number of items to return **/
        limit?: number,
    }): Promise<Array<Quote>> {
        const options = this.getApiRequestOptions({
            level: level,
            timestamp: timestamp,
            select: select,
            sort: sort,
            offset: offset,
            limit: limit,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get quotes
 * Returns a list of quotes aligned with blocks.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters quotes by level. **/
    level?: Int32Parameter | null,
    /** Filters quotes by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts quotes by specified field. Supported fields: `level` (default). **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/quotes`,
        query: {
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

}