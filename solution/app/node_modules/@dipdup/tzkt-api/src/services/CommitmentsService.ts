/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Commitment } from '../models/Commitment';
import type { Int32NullParameter } from '../models/Int32NullParameter';
import type { Int64Parameter } from '../models/Int64Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class CommitmentsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get commitment by blinded address
     * Returns a commitment with the specified blinded address.
     * @returns Commitment
     * @throws ApiError
     */
    public async get({
        address,
    }: {
        /** Blinded address (starting with btz) **/
        address: string | null,
    }): Promise<Commitment> {
        const options = this.getApiRequestOptions({
            address: address,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get commitment by blinded address
 * Returns a commitment with the specified blinded address.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getApiRequestOptions({
    address,
}: {
    /** Blinded address (starting with btz) **/
    address: string | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/commitments/${address}`,
    };
}

/**
 * Get commitments
 * Returns a list of commitments.
 * @returns Commitment
 * @throws ApiError
 */
public async getAll({
    activated,
    activationLevel,
    balance,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters commitments by activation status **/
    activated?: boolean | null,
    /** Filters commitments by activation level **/
    activationLevel?: Int32NullParameter | null,
    /** Filters commitments by activated balance **/
    balance?: Int64Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `balance`, `activationLevel`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<Commitment>> {
    const options = this.getAllApiRequestOptions({
        activated: activated,
        activationLevel: activationLevel,
        balance: balance,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get commitments
 * Returns a list of commitments.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getAllApiRequestOptions({
    activated,
    activationLevel,
    balance,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Filters commitments by activation status **/
    activated?: boolean | null,
    /** Filters commitments by activation level **/
    activationLevel?: Int32NullParameter | null,
    /** Filters commitments by activated balance **/
    balance?: Int64Parameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegators by specified field. Supported fields: `id` (default), `balance`, `activationLevel`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/commitments`,
        query: {
            'activated': activated,
            'activationLevel': activationLevel,
            'balance': balance,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get commitments count
 * Returns a number of commitments.
 * @returns number
 * @throws ApiError
 */
public async getCount({
    activated,
    balance,
}: {
    /** Filters commitments by activation status **/
    activated?: boolean | null,
    /** Filters commitments by activated balance **/
    balance?: Int64Parameter | null,
}): Promise<number> {
    const options = this.getCountApiRequestOptions({
        activated: activated,
        balance: balance,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get commitments count
 * Returns a number of commitments.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getCountApiRequestOptions({
    activated,
    balance,
}: {
    /** Filters commitments by activation status **/
    activated?: boolean | null,
    /** Filters commitments by activated balance **/
    balance?: Int64Parameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/commitments/count`,
        query: {
            'activated': activated,
            'balance': balance,
        },
    };
}

}