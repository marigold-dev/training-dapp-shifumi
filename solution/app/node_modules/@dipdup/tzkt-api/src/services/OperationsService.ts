/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AccountParameter } from '../models/AccountParameter';
import type { ActivationOperation } from '../models/ActivationOperation';
import type { BakingOperation } from '../models/BakingOperation';
import type { BallotOperation } from '../models/BallotOperation';
import type { BoolParameter } from '../models/BoolParameter';
import type { DateTimeParameter } from '../models/DateTimeParameter';
import type { DelegationOperation } from '../models/DelegationOperation';
import type { DoubleBakingOperation } from '../models/DoubleBakingOperation';
import type { DoubleEndorsingOperation } from '../models/DoubleEndorsingOperation';
import type { EndorsementOperation } from '../models/EndorsementOperation';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { Int64Parameter } from '../models/Int64Parameter';
import type { JsonParameter } from '../models/JsonParameter';
import type { MichelineFormat } from '../models/MichelineFormat';
import type { MigrationKindParameter } from '../models/MigrationKindParameter';
import type { MigrationOperation } from '../models/MigrationOperation';
import type { NonceRevelationOperation } from '../models/NonceRevelationOperation';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { Operation } from '../models/Operation';
import type { OperationStatusParameter } from '../models/OperationStatusParameter';
import type { OriginationOperation } from '../models/OriginationOperation';
import type { ProposalOperation } from '../models/ProposalOperation';
import type { ProtocolParameter } from '../models/ProtocolParameter';
import type { RevealOperation } from '../models/RevealOperation';
import type { RevelationPenaltyOperation } from '../models/RevelationPenaltyOperation';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { StringParameter } from '../models/StringParameter';
import type { Symbols } from '../models/Symbols';
import type { TransactionOperation } from '../models/TransactionOperation';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class OperationsService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get operations by hash
     * Returns a list of operations with the specified hash.
     * @returns Operation
     * @throws ApiError
     */
    public async getByHash({
        hash,
        micheline,
        quote,
    }: {
        /** Operation hash **/
        hash: string | null,
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
        micheline: MichelineFormat,
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols,
    }): Promise<Array<Operation>> {
        const options = this.getByHashApiRequestOptions({
            hash: hash,
            micheline: micheline,
            quote: quote,
        }
    );
    const result = await __request(options);
    return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get operations by hash
 * Returns a list of operations with the specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByHashApiRequestOptions({
    hash,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/${hash}`,
        query: {
            'micheline': micheline,
            'quote': quote,
        },
    };
}

/**
 * Get operations by hash and counter
 * Returns a list of operations with the specified hash and counter.
 * @returns Operation
 * @throws ApiError
 */
public async getByHashCounter({
    hash,
    counter,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<Operation>> {
    const options = this.getByHashCounterApiRequestOptions({
        hash: hash,
        counter: counter,
        micheline: micheline,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get operations by hash and counter
 * Returns a list of operations with the specified hash and counter.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByHashCounterApiRequestOptions({
    hash,
    counter,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/${hash}/${counter}`,
        query: {
            'micheline': micheline,
            'quote': quote,
        },
    };
}

/**
 * Get operations by hash, counter and nonce
 * Returns an internal operations with the specified hash, counter and nonce.
 * @returns Operation
 * @throws ApiError
 */
public async getByHashCounterNonce({
    hash,
    counter,
    nonce,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Operation nonce (internal) **/
    nonce: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<Operation>> {
    const options = this.getByHashCounterNonceApiRequestOptions({
        hash: hash,
        counter: counter,
        nonce: nonce,
        micheline: micheline,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get operations by hash, counter and nonce
 * Returns an internal operations with the specified hash, counter and nonce.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getByHashCounterNonceApiRequestOptions({
    hash,
    counter,
    nonce,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Operation nonce (internal) **/
    nonce: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/${hash}/${counter}/${nonce}`,
        query: {
            'micheline': micheline,
            'quote': quote,
        },
    };
}

/**
 * Get endorsements
 * Returns a list of endorsement operations.
 * @returns EndorsementOperation
 * @throws ApiError
 */
public async getEndorsements({
    quote,
    delegate,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters endorsements by delegate. Allowed fields for `.eqx` mode: none. **/
    delegate?: AccountParameter | null,
    /** Filters endorsements by level. **/
    level?: Int32Parameter | null,
    /** Filters endorsements by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts endorsements by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<EndorsementOperation>> {
    const options = this.getEndorsementsApiRequestOptions({
        quote: quote,
        delegate: delegate,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get endorsements
 * Returns a list of endorsement operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getEndorsementsApiRequestOptions({
    quote,
    delegate,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters endorsements by delegate. Allowed fields for `.eqx` mode: none. **/
    delegate?: AccountParameter | null,
    /** Filters endorsements by level. **/
    level?: Int32Parameter | null,
    /** Filters endorsements by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts endorsements by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/endorsements`,
        query: {
            'quote': quote,
            'delegate': delegate,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get endorsement by hash
 * Returns an endorsement operation with specified hash.
 * @returns EndorsementOperation
 * @throws ApiError
 */
public async getEndorsementByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<EndorsementOperation>> {
    const options = this.getEndorsementByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get endorsement by hash
 * Returns an endorsement operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getEndorsementByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/endorsements/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get endorsements count
 * Returns the total number of endorsement operations.
 * @returns number
 * @throws ApiError
 */
public async getEndorsementsCount({
    level,
    timestamp,
}: {
    /** Filters endorsements by level. **/
    level?: Int32Parameter | null,
    /** Filters endorsements by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getEndorsementsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get endorsements count
 * Returns the total number of endorsement operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getEndorsementsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters endorsements by level. **/
    level?: Int32Parameter | null,
    /** Filters endorsements by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/endorsements/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get ballots
 * Returns a list of ballot operations.
 * @returns BallotOperation
 * @throws ApiError
 */
public async getBallots({
    quote,
    delegate,
    level,
    timestamp,
    epoch,
    period,
    proposal,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters ballots by delegate. Allowed fields for `.eqx` mode: none. **/
    delegate?: AccountParameter | null,
    /** Filters ballots by level. **/
    level?: Int32Parameter | null,
    /** Filters ballots by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters ballots by voting epoch. **/
    epoch?: Int32Parameter | null,
    /** Filters ballots by voting period. **/
    period?: Int32Parameter | null,
    /** Filters ballots by proposal hash. **/
    proposal?: ProtocolParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts ballots by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BallotOperation>> {
    const options = this.getBallotsApiRequestOptions({
        quote: quote,
        delegate: delegate,
        level: level,
        timestamp: timestamp,
        epoch: epoch,
        period: period,
        proposal: proposal,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get ballots
 * Returns a list of ballot operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBallotsApiRequestOptions({
    quote,
    delegate,
    level,
    timestamp,
    epoch,
    period,
    proposal,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters ballots by delegate. Allowed fields for `.eqx` mode: none. **/
    delegate?: AccountParameter | null,
    /** Filters ballots by level. **/
    level?: Int32Parameter | null,
    /** Filters ballots by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters ballots by voting epoch. **/
    epoch?: Int32Parameter | null,
    /** Filters ballots by voting period. **/
    period?: Int32Parameter | null,
    /** Filters ballots by proposal hash. **/
    proposal?: ProtocolParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts ballots by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/ballots`,
        query: {
            'quote': quote,
            'delegate': delegate,
            'level': level,
            'timestamp': timestamp,
            'epoch': epoch,
            'period': period,
            'proposal': proposal,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get ballot by hash
 * Returns a ballot operation with specified hash.
 * @returns BallotOperation
 * @throws ApiError
 */
public async getBallotByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<BallotOperation>> {
    const options = this.getBallotByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get ballot by hash
 * Returns a ballot operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBallotByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/ballots/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get ballots count
 * Returns the total number of ballot operations.
 * @returns number
 * @throws ApiError
 */
public async getBallotsCount({
    level,
    timestamp,
}: {
    /** Filters ballot operations by level. **/
    level?: Int32Parameter | null,
    /** Filters ballot operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getBallotsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get ballots count
 * Returns the total number of ballot operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBallotsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters ballot operations by level. **/
    level?: Int32Parameter | null,
    /** Filters ballot operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/ballots/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get proposals
 * Returns a list of proposal operations.
 * @returns ProposalOperation
 * @throws ApiError
 */
public async getProposals({
    quote,
    delegate,
    level,
    timestamp,
    epoch,
    period,
    proposal,
    duplicated,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters proposal operations by delegate. Allowed fields for `.eqx` mode: none. **/
    delegate?: AccountParameter | null,
    /** Filters proposal operations by level. **/
    level?: Int32Parameter | null,
    /** Filters proposal operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters proposal operations by voting epoch. **/
    epoch?: Int32Parameter | null,
    /** Filters proposal operations by voting period. **/
    period?: Int32Parameter | null,
    /** Filters proposal operations by proposal hash. **/
    proposal?: ProtocolParameter | null,
    /** Specify whether to include or exclude duplicates, which didn't actually upvote a proposal. **/
    duplicated?: BoolParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts proposal operations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<ProposalOperation>> {
    const options = this.getProposalsApiRequestOptions({
        quote: quote,
        delegate: delegate,
        level: level,
        timestamp: timestamp,
        epoch: epoch,
        period: period,
        proposal: proposal,
        duplicated: duplicated,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get proposals
 * Returns a list of proposal operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getProposalsApiRequestOptions({
    quote,
    delegate,
    level,
    timestamp,
    epoch,
    period,
    proposal,
    duplicated,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters proposal operations by delegate. Allowed fields for `.eqx` mode: none. **/
    delegate?: AccountParameter | null,
    /** Filters proposal operations by level. **/
    level?: Int32Parameter | null,
    /** Filters proposal operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters proposal operations by voting epoch. **/
    epoch?: Int32Parameter | null,
    /** Filters proposal operations by voting period. **/
    period?: Int32Parameter | null,
    /** Filters proposal operations by proposal hash. **/
    proposal?: ProtocolParameter | null,
    /** Specify whether to include or exclude duplicates, which didn't actually upvote a proposal. **/
    duplicated?: BoolParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts proposal operations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/proposals`,
        query: {
            'quote': quote,
            'delegate': delegate,
            'level': level,
            'timestamp': timestamp,
            'epoch': epoch,
            'period': period,
            'proposal': proposal,
            'duplicated': duplicated,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get proposal by hash
 * Returns a proposal operation with specified hash.
 * @returns ProposalOperation
 * @throws ApiError
 */
public async getProposalByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<ProposalOperation>> {
    const options = this.getProposalByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get proposal by hash
 * Returns a proposal operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getProposalByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/proposals/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get proposals count
 * Returns the total number of proposal operations.
 * @returns number
 * @throws ApiError
 */
public async getProposalsCount({
    level,
    timestamp,
}: {
    /** Filters proposal operations by level. **/
    level?: Int32Parameter | null,
    /** Filters proposal operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getProposalsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get proposals count
 * Returns the total number of proposal operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getProposalsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters proposal operations by level. **/
    level?: Int32Parameter | null,
    /** Filters proposal operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/proposals/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get activations
 * Returns a list of activation operations.
 * @returns ActivationOperation
 * @throws ApiError
 */
public async getActivations({
    quote,
    account,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters activations by account. Allowed fields for `.eqx` mode: none. **/
    account?: AccountParameter | null,
    /** Filters activations by level. **/
    level?: Int32Parameter | null,
    /** Filters activations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts activations by specified field. Supported fields: `id` (default), `level`, `balance`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<ActivationOperation>> {
    const options = this.getActivationsApiRequestOptions({
        quote: quote,
        account: account,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get activations
 * Returns a list of activation operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getActivationsApiRequestOptions({
    quote,
    account,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters activations by account. Allowed fields for `.eqx` mode: none. **/
    account?: AccountParameter | null,
    /** Filters activations by level. **/
    level?: Int32Parameter | null,
    /** Filters activations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts activations by specified field. Supported fields: `id` (default), `level`, `balance`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/activations`,
        query: {
            'quote': quote,
            'account': account,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get activation by hash
 * Returns an activation operation with specified hash.
 * @returns ActivationOperation
 * @throws ApiError
 */
public async getActivationByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<ActivationOperation>> {
    const options = this.getActivationByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get activation by hash
 * Returns an activation operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getActivationByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/activations/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get activations count
 * Returns the total number of activation operations.
 * @returns number
 * @throws ApiError
 */
public async getActivationsCount({
    level,
    timestamp,
}: {
    /** Filters activations by level. **/
    level?: Int32Parameter | null,
    /** Filters activations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getActivationsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get activations count
 * Returns the total number of activation operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getActivationsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters activations by level. **/
    level?: Int32Parameter | null,
    /** Filters activations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/activations/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get double baking
 * Returns a list of double baking operations.
 * @returns DoubleBakingOperation
 * @throws ApiError
 */
public async getDoubleBaking({
    quote,
    anyof,
    accuser,
    offender,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters double baking operations by any of the specified fields. Example: `anyof.accuser.offender=tz1...` will return operations where `accuser` OR `offender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters double baking operations by accuser. Allowed fields for `.eqx` mode: `offender`. **/
    accuser?: AccountParameter | null,
    /** Filters double baking operations by offender. Allowed fields for `.eqx` mode: `accuser`. **/
    offender?: AccountParameter | null,
    /** Filters double baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts double baking operations by specified field. Supported fields: `id` (default), `level`, `accusedLevel`, `accuserRewards`, `offenderLostDeposits`, `offenderLostRewards`, `offenderLostFees`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<DoubleBakingOperation>> {
    const options = this.getDoubleBakingApiRequestOptions({
        quote: quote,
        anyof: anyof,
        accuser: accuser,
        offender: offender,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get double baking
 * Returns a list of double baking operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDoubleBakingApiRequestOptions({
    quote,
    anyof,
    accuser,
    offender,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters double baking operations by any of the specified fields. Example: `anyof.accuser.offender=tz1...` will return operations where `accuser` OR `offender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters double baking operations by accuser. Allowed fields for `.eqx` mode: `offender`. **/
    accuser?: AccountParameter | null,
    /** Filters double baking operations by offender. Allowed fields for `.eqx` mode: `accuser`. **/
    offender?: AccountParameter | null,
    /** Filters double baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts double baking operations by specified field. Supported fields: `id` (default), `level`, `accusedLevel`, `accuserRewards`, `offenderLostDeposits`, `offenderLostRewards`, `offenderLostFees`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/double_baking`,
        query: {
            'quote': quote,
            'anyof': anyof,
            'accuser': accuser,
            'offender': offender,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get double baking by hash
 * Returns a double baking operation with specified hash.
 * @returns DoubleBakingOperation
 * @throws ApiError
 */
public async getDoubleBakingByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<DoubleBakingOperation>> {
    const options = this.getDoubleBakingByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get double baking by hash
 * Returns a double baking operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDoubleBakingByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/double_baking/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get double baking count
 * Returns the total number of double baking operations.
 * @returns number
 * @throws ApiError
 */
public async getDoubleBakingCount({
    level,
    timestamp,
}: {
    /** Filters double baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getDoubleBakingCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get double baking count
 * Returns the total number of double baking operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDoubleBakingCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters double baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/double_baking/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get double endorsing
 * Returns a list of double endorsing operations.
 * @returns DoubleEndorsingOperation
 * @throws ApiError
 */
public async getDoubleEndorsing({
    quote,
    anyof,
    accuser,
    offender,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters double endorsing operations by any of the specified fields. Example: `anyof.accuser.offender=tz1...` will return operations where `accuser` OR `offender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters double endorsing operations by accuser. Allowed fields for `.eqx` mode: `offender`. **/
    accuser?: AccountParameter | null,
    /** Filters double endorsing operations by offender. Allowed fields for `.eqx` mode: `accuser`. **/
    offender?: AccountParameter | null,
    /** Filters double endorsing operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double endorsing operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts double endorsing operations by specified field. Supported fields: `id` (default), `level`, `accusedLevel`, `accuserRewards`, `offenderLostDeposits`, `offenderLostRewards`, `offenderLostFees`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<DoubleEndorsingOperation>> {
    const options = this.getDoubleEndorsingApiRequestOptions({
        quote: quote,
        anyof: anyof,
        accuser: accuser,
        offender: offender,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get double endorsing
 * Returns a list of double endorsing operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDoubleEndorsingApiRequestOptions({
    quote,
    anyof,
    accuser,
    offender,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters double endorsing operations by any of the specified fields. Example: `anyof.accuser.offender=tz1...` will return operations where `accuser` OR `offender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters double endorsing operations by accuser. Allowed fields for `.eqx` mode: `offender`. **/
    accuser?: AccountParameter | null,
    /** Filters double endorsing operations by offender. Allowed fields for `.eqx` mode: `accuser`. **/
    offender?: AccountParameter | null,
    /** Filters double endorsing operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double endorsing operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts double endorsing operations by specified field. Supported fields: `id` (default), `level`, `accusedLevel`, `accuserRewards`, `offenderLostDeposits`, `offenderLostRewards`, `offenderLostFees`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/double_endorsing`,
        query: {
            'quote': quote,
            'anyof': anyof,
            'accuser': accuser,
            'offender': offender,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get double endorsing by hash
 * Returns a double endorsing operation with specified hash.
 * @returns DoubleEndorsingOperation
 * @throws ApiError
 */
public async getDoubleEndorsingByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<DoubleEndorsingOperation>> {
    const options = this.getDoubleEndorsingByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get double endorsing by hash
 * Returns a double endorsing operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDoubleEndorsingByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/double_endorsing/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get double endorsing count
 * Returns the total number of double endorsing operations.
 * @returns number
 * @throws ApiError
 */
public async getDoubleEndorsingCount({
    level,
    timestamp,
}: {
    /** Filters double endorsing operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double endorsing operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getDoubleEndorsingCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get double endorsing count
 * Returns the total number of double endorsing operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDoubleEndorsingCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters double endorsing operations by level. **/
    level?: Int32Parameter | null,
    /** Filters double endorsing operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/double_endorsing/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get nonce revelations
 * Returns a list of seed nonce revelation operations.
 * @returns NonceRevelationOperation
 * @throws ApiError
 */
public async getNonceRevelations({
    quote,
    anyof,
    baker,
    sender,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters nonce revelation operations by any of the specified fields. Example: `anyof.baker.sender=tz1...` will return operations where `baker` OR `sender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters nonce revelation operations by baker. Allowed fields for `.eqx` mode: `sender`. **/
    baker?: AccountParameter | null,
    /** Filters nonce revelation operations by sender. Allowed fields for `.eqx` mode: `baker`. **/
    sender?: AccountParameter | null,
    /** Filters nonce revelation operations by level. **/
    level?: Int32Parameter | null,
    /** Filters nonce revelation operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts nonce revelation operations by specified field. Supported fields: `id` (default), `level`, `revealedLevel`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<NonceRevelationOperation>> {
    const options = this.getNonceRevelationsApiRequestOptions({
        quote: quote,
        anyof: anyof,
        baker: baker,
        sender: sender,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get nonce revelations
 * Returns a list of seed nonce revelation operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getNonceRevelationsApiRequestOptions({
    quote,
    anyof,
    baker,
    sender,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters nonce revelation operations by any of the specified fields. Example: `anyof.baker.sender=tz1...` will return operations where `baker` OR `sender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters nonce revelation operations by baker. Allowed fields for `.eqx` mode: `sender`. **/
    baker?: AccountParameter | null,
    /** Filters nonce revelation operations by sender. Allowed fields for `.eqx` mode: `baker`. **/
    sender?: AccountParameter | null,
    /** Filters nonce revelation operations by level. **/
    level?: Int32Parameter | null,
    /** Filters nonce revelation operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts nonce revelation operations by specified field. Supported fields: `id` (default), `level`, `revealedLevel`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/nonce_revelations`,
        query: {
            'quote': quote,
            'anyof': anyof,
            'baker': baker,
            'sender': sender,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get nonce revelation by hash
 * Returns a seed nonce revelation operation with specified hash.
 * @returns NonceRevelationOperation
 * @throws ApiError
 */
public async getNonceRevelationByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<NonceRevelationOperation>> {
    const options = this.getNonceRevelationByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get nonce revelation by hash
 * Returns a seed nonce revelation operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getNonceRevelationByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/nonce_revelations/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get nonce revelations count
 * Returns the total number of seed nonce revelation operations.
 * @returns number
 * @throws ApiError
 */
public async getNonceRevelationsCount({
    level,
    timestamp,
}: {
    /** Filters seed nonce revelation operations by level. **/
    level?: Int32Parameter | null,
    /** Filters seed nonce revelation operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getNonceRevelationsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get nonce revelations count
 * Returns the total number of seed nonce revelation operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getNonceRevelationsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters seed nonce revelation operations by level. **/
    level?: Int32Parameter | null,
    /** Filters seed nonce revelation operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/nonce_revelations/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get delegations
 * Returns a list of delegation operations.
 * @returns DelegationOperation
 * @throws ApiError
 */
public async getDelegations({
    quote,
    anyof,
    initiator,
    sender,
    prevDelegate,
    newDelegate,
    level,
    timestamp,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters delegations by any of the specified fields. Example: `anyof.prevDelegate.newDelegate=tz1...` will return operations where `prevDelegate` OR `newDelegate` is equal to the specified value. This parameter is useful when you need to retrieve all delegations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters delegations by initiator. Allowed fields for `.eqx` mode: `prevDelegate`, `newDelegate`. **/
    initiator?: AccountParameter | null,
    /** Filters delegations by sender. Allowed fields for `.eqx` mode: `prevDelegate`, `newDelegate`. **/
    sender?: AccountParameter | null,
    /** Filters delegations by prev delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `newDelegate`. **/
    prevDelegate?: AccountParameter | null,
    /** Filters delegations by new delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `prevDelegate`. **/
    newDelegate?: AccountParameter | null,
    /** Filters delegations by level. **/
    level?: Int32Parameter | null,
    /** Filters delegations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters delegations by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegations by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `bakerFee`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<DelegationOperation>> {
    const options = this.getDelegationsApiRequestOptions({
        quote: quote,
        anyof: anyof,
        initiator: initiator,
        sender: sender,
        prevDelegate: prevDelegate,
        newDelegate: newDelegate,
        level: level,
        timestamp: timestamp,
        status: status,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegations
 * Returns a list of delegation operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDelegationsApiRequestOptions({
    quote,
    anyof,
    initiator,
    sender,
    prevDelegate,
    newDelegate,
    level,
    timestamp,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters delegations by any of the specified fields. Example: `anyof.prevDelegate.newDelegate=tz1...` will return operations where `prevDelegate` OR `newDelegate` is equal to the specified value. This parameter is useful when you need to retrieve all delegations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters delegations by initiator. Allowed fields for `.eqx` mode: `prevDelegate`, `newDelegate`. **/
    initiator?: AccountParameter | null,
    /** Filters delegations by sender. Allowed fields for `.eqx` mode: `prevDelegate`, `newDelegate`. **/
    sender?: AccountParameter | null,
    /** Filters delegations by prev delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `newDelegate`. **/
    prevDelegate?: AccountParameter | null,
    /** Filters delegations by new delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `prevDelegate`. **/
    newDelegate?: AccountParameter | null,
    /** Filters delegations by level. **/
    level?: Int32Parameter | null,
    /** Filters delegations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters delegations by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts delegations by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `bakerFee`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/delegations`,
        query: {
            'quote': quote,
            'anyof': anyof,
            'initiator': initiator,
            'sender': sender,
            'prevDelegate': prevDelegate,
            'newDelegate': newDelegate,
            'level': level,
            'timestamp': timestamp,
            'status': status,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get delegation by hash
 * Returns a delegation operation with specified hash.
 * @returns DelegationOperation
 * @throws ApiError
 */
public async getDelegationByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<DelegationOperation>> {
    const options = this.getDelegationByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegation by hash
 * Returns a delegation operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDelegationByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/delegations/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get delegations count
 * Returns the total number of delegation operations.
 * @returns number
 * @throws ApiError
 */
public async getDelegationsCount({
    level,
    timestamp,
}: {
    /** Filters delegations by level. **/
    level?: Int32Parameter | null,
    /** Filters delegations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getDelegationsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get delegations count
 * Returns the total number of delegation operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getDelegationsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters delegations by level. **/
    level?: Int32Parameter | null,
    /** Filters delegations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/delegations/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get originations
 * Returns a list of origination operations.
 * @returns OriginationOperation
 * @throws ApiError
 */
public async getOriginations({
    micheline,
    quote,
    anyof,
    initiator,
    sender,
    contractManager,
    contractDelegate,
    originatedContract,
    typeHash,
    codeHash,
    level,
    timestamp,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters originations by any of the specified fields. Example: `anyof.sender.initiator=tz1...` will return operations where `sender` OR `initiator` is equal to the specified value. This parameter is useful when you need to retrieve all originations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters origination operations by initiator. Allowed fields for `.eqx` mode: `contractManager`, `contractDelegate`. **/
    initiator?: AccountParameter | null,
    /** Filters origination operations by sender. Allowed fields for `.eqx` mode: `contractManager`, `contractDelegate`. **/
    sender?: AccountParameter | null,
    /** Filters origination operations by manager. Allowed fields for `.eqx` mode: `initiator`, `sender`, `contractDelegate`. **/
    contractManager?: AccountParameter | null,
    /** Filters origination operations by delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `contractManager`. **/
    contractDelegate?: AccountParameter | null,
    /** Filters origination operations by originated contract. Allowed fields for `.eqx` mode: none. **/
    originatedContract?: AccountParameter | null,
    /** Filters origination operations by 32-bit hash of originated contract parameter and storage types (helpful for searching originations of similar contracts) **/
    typeHash?: Int32Parameter | null,
    /** Filters origination operations by 32-bit hash of originated contract code (helpful for searching originations of same contracts) **/
    codeHash?: Int32Parameter | null,
    /** Filters origination operations by level. **/
    level?: Int32Parameter | null,
    /** Filters origination operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters origination operations by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts originations by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `storageUsed`, `bakerFee`, `storageFee`, `allocationFee`, `contractBalance`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<OriginationOperation>> {
    const options = this.getOriginationsApiRequestOptions({
        micheline: micheline,
        quote: quote,
        anyof: anyof,
        initiator: initiator,
        sender: sender,
        contractManager: contractManager,
        contractDelegate: contractDelegate,
        originatedContract: originatedContract,
        typeHash: typeHash,
        codeHash: codeHash,
        level: level,
        timestamp: timestamp,
        status: status,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get originations
 * Returns a list of origination operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getOriginationsApiRequestOptions({
    micheline,
    quote,
    anyof,
    initiator,
    sender,
    contractManager,
    contractDelegate,
    originatedContract,
    typeHash,
    codeHash,
    level,
    timestamp,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters originations by any of the specified fields. Example: `anyof.sender.initiator=tz1...` will return operations where `sender` OR `initiator` is equal to the specified value. This parameter is useful when you need to retrieve all originations associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters origination operations by initiator. Allowed fields for `.eqx` mode: `contractManager`, `contractDelegate`. **/
    initiator?: AccountParameter | null,
    /** Filters origination operations by sender. Allowed fields for `.eqx` mode: `contractManager`, `contractDelegate`. **/
    sender?: AccountParameter | null,
    /** Filters origination operations by manager. Allowed fields for `.eqx` mode: `initiator`, `sender`, `contractDelegate`. **/
    contractManager?: AccountParameter | null,
    /** Filters origination operations by delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `contractManager`. **/
    contractDelegate?: AccountParameter | null,
    /** Filters origination operations by originated contract. Allowed fields for `.eqx` mode: none. **/
    originatedContract?: AccountParameter | null,
    /** Filters origination operations by 32-bit hash of originated contract parameter and storage types (helpful for searching originations of similar contracts) **/
    typeHash?: Int32Parameter | null,
    /** Filters origination operations by 32-bit hash of originated contract code (helpful for searching originations of same contracts) **/
    codeHash?: Int32Parameter | null,
    /** Filters origination operations by level. **/
    level?: Int32Parameter | null,
    /** Filters origination operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters origination operations by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts originations by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `storageUsed`, `bakerFee`, `storageFee`, `allocationFee`, `contractBalance`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/originations`,
        query: {
            'micheline': micheline,
            'quote': quote,
            'anyof': anyof,
            'initiator': initiator,
            'sender': sender,
            'contractManager': contractManager,
            'contractDelegate': contractDelegate,
            'originatedContract': originatedContract,
            'typeHash': typeHash,
            'codeHash': codeHash,
            'level': level,
            'timestamp': timestamp,
            'status': status,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get origination by hash
 * Returns origination operations with specified hash.
 * @returns OriginationOperation
 * @throws ApiError
 */
public async getOriginationByHash({
    hash,
    quote,
    micheline,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline?: MichelineFormat,
}): Promise<Array<OriginationOperation>> {
    const options = this.getOriginationByHashApiRequestOptions({
        hash: hash,
        quote: quote,
        micheline: micheline,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get origination by hash
 * Returns origination operations with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getOriginationByHashApiRequestOptions({
    hash,
    quote,
    micheline,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline?: MichelineFormat,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/originations/${hash}`,
        query: {
            'quote': quote,
            'micheline': micheline,
        },
    };
}

/**
 * Get originations count
 * Returns the total number of origination operations.
 * @returns number
 * @throws ApiError
 */
public async getOriginationsCount({
    level,
    timestamp,
}: {
    /** Filters originations by level. **/
    level?: Int32Parameter | null,
    /** Filters originations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getOriginationsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get originations count
 * Returns the total number of origination operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getOriginationsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters originations by level. **/
    level?: Int32Parameter | null,
    /** Filters originations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/originations/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get transactions
 * Returns a list of transaction operations.
 * @returns TransactionOperation
 * @throws ApiError
 */
public async getTransactions({
    micheline,
    quote,
    anyof,
    initiator,
    sender,
    target,
    amount,
    level,
    timestamp,
    entrypoint,
    parameter,
    parameters,
    hasInternals,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters transactions by any of the specified fields. Example: `anyof.sender.target=tz1...` will return operations where `sender` OR `target` is equal to the specified value. This parameter is useful when you need to retrieve all transactions associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters transactions by initiator. Allowed fields for `.eqx` mode: `target`. **/
    initiator?: AccountParameter | null,
    /** Filters transactions by sender. Allowed fields for `.eqx` mode: `target`. **/
    sender?: AccountParameter | null,
    /** Filters transactions by target. Allowed fields for `.eqx` mode: `sender`, `initiator`. **/
    target?: AccountParameter | null,
    /** Filters transactions by amount (microtez). **/
    amount?: Int64Parameter | null,
    /** Filters transactions by level. **/
    level?: Int32Parameter | null,
    /** Filters transactions by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters transactions by entrypoint called on the target contract. **/
    entrypoint?: StringParameter | null,
    /** Filters transactions by parameter value. Note, this query parameter supports the following format: `?parameter{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?parameter.token_id=...` or `?parameter.sigs.0.ne=...`. **/
    parameter?: JsonParameter | null,
    /** **DEPRECATED**. Use `entrypoint` and `parameter` instead. **/
    parameters?: StringParameter | null,
    /** Filters transactions by presence of internal operations. **/
    hasInternals?: BoolParameter | null,
    /** Filters transactions by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts transactions by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `storageUsed`, `bakerFee`, `storageFee`, `allocationFee`, `amount`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<TransactionOperation>> {
    const options = this.getTransactionsApiRequestOptions({
        micheline: micheline,
        quote: quote,
        anyof: anyof,
        initiator: initiator,
        sender: sender,
        target: target,
        amount: amount,
        level: level,
        timestamp: timestamp,
        entrypoint: entrypoint,
        parameter: parameter,
        parameters: parameters,
        hasInternals: hasInternals,
        status: status,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get transactions
 * Returns a list of transaction operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getTransactionsApiRequestOptions({
    micheline,
    quote,
    anyof,
    initiator,
    sender,
    target,
    amount,
    level,
    timestamp,
    entrypoint,
    parameter,
    parameters,
    hasInternals,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters transactions by any of the specified fields. Example: `anyof.sender.target=tz1...` will return operations where `sender` OR `target` is equal to the specified value. This parameter is useful when you need to retrieve all transactions associated with a specified account. **/
    anyof?: {
        /**
         * List of referenced field names, e.g. ["initiator", "sender"]
         */
        fields: Array<string>,
        /**
         * Value
         */
        value: string,
    },
    /** Filters transactions by initiator. Allowed fields for `.eqx` mode: `target`. **/
    initiator?: AccountParameter | null,
    /** Filters transactions by sender. Allowed fields for `.eqx` mode: `target`. **/
    sender?: AccountParameter | null,
    /** Filters transactions by target. Allowed fields for `.eqx` mode: `sender`, `initiator`. **/
    target?: AccountParameter | null,
    /** Filters transactions by amount (microtez). **/
    amount?: Int64Parameter | null,
    /** Filters transactions by level. **/
    level?: Int32Parameter | null,
    /** Filters transactions by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters transactions by entrypoint called on the target contract. **/
    entrypoint?: StringParameter | null,
    /** Filters transactions by parameter value. Note, this query parameter supports the following format: `?parameter{.path?}{.mode?}=...`,
     * so you can specify a path to a particular field to filter by, for example: `?parameter.token_id=...` or `?parameter.sigs.0.ne=...`. **/
    parameter?: JsonParameter | null,
    /** **DEPRECATED**. Use `entrypoint` and `parameter` instead. **/
    parameters?: StringParameter | null,
    /** Filters transactions by presence of internal operations. **/
    hasInternals?: BoolParameter | null,
    /** Filters transactions by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts transactions by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `storageUsed`, `bakerFee`, `storageFee`, `allocationFee`, `amount`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/transactions`,
        query: {
            'micheline': micheline,
            'quote': quote,
            'anyof': anyof,
            'initiator': initiator,
            'sender': sender,
            'target': target,
            'amount': amount,
            'level': level,
            'timestamp': timestamp,
            'entrypoint': entrypoint,
            'parameter': parameter,
            'parameters': parameters,
            'hasInternals': hasInternals,
            'status': status,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get transaction by hash
 * Returns transaction operations with specified hash.
 * @returns TransactionOperation
 * @throws ApiError
 */
public async getTransactionByHash({
    hash,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<TransactionOperation>> {
    const options = this.getTransactionByHashApiRequestOptions({
        hash: hash,
        micheline: micheline,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get transaction by hash
 * Returns transaction operations with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getTransactionByHashApiRequestOptions({
    hash,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/transactions/${hash}`,
        query: {
            'micheline': micheline,
            'quote': quote,
        },
    };
}

/**
 * Get transaction by hash and counter
 * Returns transaction operations with specified hash and counter.
 * @returns TransactionOperation
 * @throws ApiError
 */
public async getTransactionByHashCounter({
    hash,
    counter,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<TransactionOperation>> {
    const options = this.getTransactionByHashCounterApiRequestOptions({
        hash: hash,
        counter: counter,
        micheline: micheline,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get transaction by hash and counter
 * Returns transaction operations with specified hash and counter.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getTransactionByHashCounterApiRequestOptions({
    hash,
    counter,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/transactions/${hash}/${counter}`,
        query: {
            'micheline': micheline,
            'quote': quote,
        },
    };
}

/**
 * Get transaction by hash, counter and nonce
 * Returns an internal transaction operation with specified hash, counter and nonce.
 * @returns TransactionOperation
 * @throws ApiError
 */
public async getTransactionByHashCounterNonce({
    hash,
    counter,
    nonce,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Operation nonce (internal) **/
    nonce: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<TransactionOperation>> {
    const options = this.getTransactionByHashCounterNonceApiRequestOptions({
        hash: hash,
        counter: counter,
        nonce: nonce,
        micheline: micheline,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get transaction by hash, counter and nonce
 * Returns an internal transaction operation with specified hash, counter and nonce.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getTransactionByHashCounterNonceApiRequestOptions({
    hash,
    counter,
    nonce,
    micheline,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Operation counter **/
    counter: number,
    /** Operation nonce (internal) **/
    nonce: number,
    /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
    micheline: MichelineFormat,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/transactions/${hash}/${counter}/${nonce}`,
        query: {
            'micheline': micheline,
            'quote': quote,
        },
    };
}

/**
 * Get transactions count
 * Returns the total number of transaction operations.
 * @returns number
 * @throws ApiError
 */
public async getTransactionsCount({
    level,
    timestamp,
    status,
}: {
    /** Filters transactions by level. **/
    level?: Int32Parameter | null,
    /** Filters transactions by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters transactions by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
}): Promise<number> {
    const options = this.getTransactionsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
        status: status,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get transactions count
 * Returns the total number of transaction operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getTransactionsCountApiRequestOptions({
    level,
    timestamp,
    status,
}: {
    /** Filters transactions by level. **/
    level?: Int32Parameter | null,
    /** Filters transactions by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters transactions by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/transactions/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
            'status': status,
        },
    };
}

/**
 * Get reveals
 * Returns a list of reveal operations.
 * @returns RevealOperation
 * @throws ApiError
 */
public async getReveals({
    quote,
    sender,
    level,
    timestamp,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters reveal operations by sender. Allowed fields for `.eqx` mode: none. **/
    sender?: AccountParameter | null,
    /** Filters reveal operations by level. **/
    level?: Int32Parameter | null,
    /** Filters reveal operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters reveal operations by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts reveals by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `bakerFee`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<RevealOperation>> {
    const options = this.getRevealsApiRequestOptions({
        quote: quote,
        sender: sender,
        level: level,
        timestamp: timestamp,
        status: status,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get reveals
 * Returns a list of reveal operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getRevealsApiRequestOptions({
    quote,
    sender,
    level,
    timestamp,
    status,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters reveal operations by sender. Allowed fields for `.eqx` mode: none. **/
    sender?: AccountParameter | null,
    /** Filters reveal operations by level. **/
    level?: Int32Parameter | null,
    /** Filters reveal operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Filters reveal operations by operation status (`applied`, `failed`, `backtracked`, `skipped`). **/
    status?: OperationStatusParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts reveals by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `bakerFee`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/reveals`,
        query: {
            'quote': quote,
            'sender': sender,
            'level': level,
            'timestamp': timestamp,
            'status': status,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get reveal by hash
 * Returns reveal operation with specified hash.
 * @returns RevealOperation
 * @throws ApiError
 */
public async getRevealByHash({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): Promise<Array<RevealOperation>> {
    const options = this.getRevealByHashApiRequestOptions({
        hash: hash,
        quote: quote,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get reveal by hash
 * Returns reveal operation with specified hash.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getRevealByHashApiRequestOptions({
    hash,
    quote,
}: {
    /** Operation hash **/
    hash: string | null,
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/reveals/${hash}`,
        query: {
            'quote': quote,
        },
    };
}

/**
 * Get reveals count
 * Returns the total number of reveal operations.
 * @returns number
 * @throws ApiError
 */
public async getRevealsCount({
    level,
    timestamp,
}: {
    /** Filters reveals by level. **/
    level?: Int32Parameter | null,
    /** Filters reveals by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getRevealsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get reveals count
 * Returns the total number of reveal operations.
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getRevealsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters reveals by level. **/
    level?: Int32Parameter | null,
    /** Filters reveals by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/reveals/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get migrations
 * Returns a list of migration operations (synthetic type).
 * @returns MigrationOperation
 * @throws ApiError
 */
public async getMigrations({
    quote,
    account,
    kind,
    balanceChange,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters migration operations by account. Allowed fields for `.eqx` mode: none. **/
    account?: AccountParameter | null,
    /** Filters migration operations by kind (`bootstrap`, `activate_delegate`, `airdrop`, `proposal_invoice`). **/
    kind?: MigrationKindParameter | null,
    /** Filters migration operations by amount. **/
    balanceChange?: Int64Parameter | null,
    /** Filters migration operations by level. **/
    level?: Int32Parameter | null,
    /** Filters migration operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts migrations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<MigrationOperation>> {
    const options = this.getMigrationsApiRequestOptions({
        quote: quote,
        account: account,
        kind: kind,
        balanceChange: balanceChange,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get migrations
 * Returns a list of migration operations (synthetic type).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getMigrationsApiRequestOptions({
    quote,
    account,
    kind,
    balanceChange,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters migration operations by account. Allowed fields for `.eqx` mode: none. **/
    account?: AccountParameter | null,
    /** Filters migration operations by kind (`bootstrap`, `activate_delegate`, `airdrop`, `proposal_invoice`). **/
    kind?: MigrationKindParameter | null,
    /** Filters migration operations by amount. **/
    balanceChange?: Int64Parameter | null,
    /** Filters migration operations by level. **/
    level?: Int32Parameter | null,
    /** Filters migration operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts migrations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/migrations`,
        query: {
            'quote': quote,
            'account': account,
            'kind': kind,
            'balanceChange': balanceChange,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get migrations count
 * Returns the total number of migration operations (synthetic type).
 * @returns number
 * @throws ApiError
 */
public async getMigrationsCount({
    level,
    timestamp,
}: {
    /** Filters migrations by level. **/
    level?: Int32Parameter | null,
    /** Filters migrations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getMigrationsCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get migrations count
 * Returns the total number of migration operations (synthetic type).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getMigrationsCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters migrations by level. **/
    level?: Int32Parameter | null,
    /** Filters migrations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/migrations/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get revelation penalties
 * Returns a list of revelation penalty operations (synthetic type).
 * @returns RevelationPenaltyOperation
 * @throws ApiError
 */
public async getRevelationPenalties({
    quote,
    baker,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters revelation penalty operations by baker. Allowed fields for `.eqx` mode: none. **/
    baker?: AccountParameter | null,
    /** Filters revelation penalty operations by level. **/
    level?: Int32Parameter | null,
    /** Filters revelation penalty operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts revelation penalty operations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<RevelationPenaltyOperation>> {
    const options = this.getRevelationPenaltiesApiRequestOptions({
        quote: quote,
        baker: baker,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get revelation penalties
 * Returns a list of revelation penalty operations (synthetic type).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getRevelationPenaltiesApiRequestOptions({
    quote,
    baker,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters revelation penalty operations by baker. Allowed fields for `.eqx` mode: none. **/
    baker?: AccountParameter | null,
    /** Filters revelation penalty operations by level. **/
    level?: Int32Parameter | null,
    /** Filters revelation penalty operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts revelation penalty operations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/revelation_penalties`,
        query: {
            'quote': quote,
            'baker': baker,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get revelation penalties count
 * Returns the total number of revelation penalty operations (synthetic type).
 * @returns number
 * @throws ApiError
 */
public async getRevelationPenaltiesCount({
    level,
    timestamp,
}: {
    /** Filters revelation penalty operations by level. **/
    level?: Int32Parameter | null,
    /** Filters revelation penalty operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getRevelationPenaltiesCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get revelation penalties count
 * Returns the total number of revelation penalty operations (synthetic type).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getRevelationPenaltiesCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters revelation penalty operations by level. **/
    level?: Int32Parameter | null,
    /** Filters revelation penalty operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/revelation_penalties/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

/**
 * Get baking
 * Returns a list of baking operations (synthetic type).
 * @returns BakingOperation
 * @throws ApiError
 */
public async getBaking({
    quote,
    baker,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters baking operations by baker. Allowed fields for `.eqx` mode: none. **/
    baker?: AccountParameter | null,
    /** Filters baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts baking operations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): Promise<Array<BakingOperation>> {
    const options = this.getBakingApiRequestOptions({
        quote: quote,
        baker: baker,
        level: level,
        timestamp: timestamp,
        select: select,
        sort: sort,
        offset: offset,
        limit: limit,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get baking
 * Returns a list of baking operations (synthetic type).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBakingApiRequestOptions({
    quote,
    baker,
    level,
    timestamp,
    select,
    sort,
    offset,
    limit = 100,
}: {
    /** Comma-separated list of ticker symbols to inject historical prices into response **/
    quote: Symbols,
    /** Filters baking operations by baker. Allowed fields for `.eqx` mode: none. **/
    baker?: AccountParameter | null,
    /** Filters baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
    /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
    select?: SelectParameter | null,
    /** Sorts baking operations by specified field. Supported fields: `id` (default), `level`. **/
    sort?: SortParameter | null,
    /** Specifies which or how many items should be skipped **/
    offset?: OffsetParameter | null,
    /** Maximum number of items to return **/
    limit?: number,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/baking`,
        query: {
            'quote': quote,
            'baker': baker,
            'level': level,
            'timestamp': timestamp,
            'select': select,
            'sort': sort,
            'offset': offset,
            'limit': limit,
        },
    };
}

/**
 * Get baking count
 * Returns the total number of baking operations (synthetic type).
 * @returns number
 * @throws ApiError
 */
public async getBakingCount({
    level,
    timestamp,
}: {
    /** Filters baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): Promise<number> {
    const options = this.getBakingCountApiRequestOptions({
        level: level,
        timestamp: timestamp,
    }
);
const result = await __request(options);
return result.body;
}

/**
 * **used to get the request options without making a http request**
 * Get baking count
 * Returns the total number of baking operations (synthetic type).
 * @returns ApiRequestOptions the request options to fulfill a http request
 * @throws ApiError
 */
public getBakingCountApiRequestOptions({
    level,
    timestamp,
}: {
    /** Filters baking operations by level. **/
    level?: Int32Parameter | null,
    /** Filters baking operations by timestamp. **/
    timestamp?: DateTimeParameter | null,
}): ApiRequestOptions {
    return {
        ...this.config,
        method: 'GET',
        path: `/v1/operations/baking/count`,
        query: {
            'level': level,
            'timestamp': timestamp,
        },
    };
}

}