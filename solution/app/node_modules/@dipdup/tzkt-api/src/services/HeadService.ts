/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { State } from '../models/State';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class HeadService {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    /**
     * Get indexer head
     * Returns indexer head and synchronization status.
     * @returns State
     * @throws ApiError
     */
    public async get(): Promise<State> {
        const options = this.getApiRequestOptions(        );
        const result = await __request(options);
        return result.body;
    }

    /**
     * **used to get the request options without making a http request**
     * Get indexer head
     * Returns indexer head and synchronization status.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public getApiRequestOptions(): ApiRequestOptions {
        return {
            ...this.config,
            method: 'GET',
            path: `/v1/head`,
        };
    }

}