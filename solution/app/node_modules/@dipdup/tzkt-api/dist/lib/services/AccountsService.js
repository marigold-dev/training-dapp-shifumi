var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { request as __request } from '../core/request';
var AccountsService = /** @class */ (function () {
    /**
     * creates a new service
     * @param config the configuration to use
     */
    function AccountsService(config) {
        this.config = config;
    }
    /**
     * Get accounts
     * Returns a list of accounts.
     * @returns Account
     * @throws ApiError
     */
    AccountsService.prototype.get = function (_a) {
        var type = _a.type, kind = _a.kind, delegate = _a.delegate, balance = _a.balance, staked = _a.staked, lastActivity = _a.lastActivity, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getApiRequestOptions({
                            type: type,
                            kind: kind,
                            delegate: delegate,
                            balance: balance,
                            staked: staked,
                            lastActivity: lastActivity,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get accounts
     * Returns a list of accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getApiRequestOptions = function (_a) {
        var type = _a.type, kind = _a.kind, delegate = _a.delegate, balance = _a.balance, staked = _a.staked, lastActivity = _a.lastActivity, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts", query: {
                'type': type,
                'kind': kind,
                'delegate': delegate,
                'balance': balance,
                'staked': staked,
                'lastActivity': lastActivity,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get accounts count
     * Returns a number of accounts.
     * @returns number
     * @throws ApiError
     */
    AccountsService.prototype.getCount = function (_a) {
        var type = _a.type, kind = _a.kind, balance = _a.balance, staked = _a.staked;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getCountApiRequestOptions({
                            type: type,
                            kind: kind,
                            balance: balance,
                            staked: staked,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get accounts count
     * Returns a number of accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getCountApiRequestOptions = function (_a) {
        var type = _a.type, kind = _a.kind, balance = _a.balance, staked = _a.staked;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/count", query: {
                'type': type,
                'kind': kind,
                'balance': balance,
                'staked': staked,
            } });
    };
    /**
     * Get account by address
     * Returns an account with the specified address.
     * @returns Account
     * @throws ApiError
     */
    AccountsService.prototype.getByAddress = function (_a) {
        var address = _a.address, _b = _a.metadata, metadata = _b === void 0 ? false : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getByAddressApiRequestOptions({
                            address: address,
                            metadata: metadata,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get account by address
     * Returns an account with the specified address.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getByAddressApiRequestOptions = function (_a) {
        var address = _a.address, _b = _a.metadata, metadata = _b === void 0 ? false : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address, query: {
                'metadata': metadata,
            } });
    };
    /**
     * Get account contracts
     * Returns a list of contracts created by (or related to) the specified account.
     * @returns RelatedContract
     * @throws ApiError
     */
    AccountsService.prototype.getContracts = function (_a) {
        var address = _a.address, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getContractsApiRequestOptions({
                            address: address,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get account contracts
     * Returns a list of contracts created by (or related to) the specified account.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getContractsApiRequestOptions = function (_a) {
        var address = _a.address, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/contracts", query: {
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get account delegators
     * Returns a list of accounts delegated to the specified account.
     * @returns Delegator
     * @throws ApiError
     */
    AccountsService.prototype.getDelegators = function (_a) {
        var address = _a.address, type = _a.type, balance = _a.balance, delegationLevel = _a.delegationLevel, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getDelegatorsApiRequestOptions({
                            address: address,
                            type: type,
                            balance: balance,
                            delegationLevel: delegationLevel,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get account delegators
     * Returns a list of accounts delegated to the specified account.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getDelegatorsApiRequestOptions = function (_a) {
        var address = _a.address, type = _a.type, balance = _a.balance, delegationLevel = _a.delegationLevel, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/delegators", query: {
                'type': type,
                'balance': balance,
                'delegationLevel': delegationLevel,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get account operations
     * Returns a list of operations related to the specified account.
     * Note: for better flexibility this endpoint accumulates query parameters (filters) of each `/operations/{type}` endpoint,
     * so a particular filter may affect several operation types containing this filter.
     * For example, if you specify an `initiator` it will affect all transactions, delegations and originations,
     * because all these types have an `initiator` field.
     * @returns Operation
     * @throws ApiError
     */
    AccountsService.prototype.getOperations = function (_a) {
        var address = _a.address, sort = _a.sort, micheline = _a.micheline, quote = _a.quote, type = _a.type, initiator = _a.initiator, sender = _a.sender, target = _a.target, prevDelegate = _a.prevDelegate, newDelegate = _a.newDelegate, contractManager = _a.contractManager, contractDelegate = _a.contractDelegate, originatedContract = _a.originatedContract, accuser = _a.accuser, offender = _a.offender, baker = _a.baker, level = _a.level, timestamp = _a.timestamp, entrypoint = _a.entrypoint, parameter = _a.parameter, parameters = _a.parameters, hasInternals = _a.hasInternals, status = _a.status, lastId = _a.lastId, _b = _a.limit, limit = _b === void 0 ? 100 : _b, from = _a.from, to = _a.to;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getOperationsApiRequestOptions({
                            address: address,
                            sort: sort,
                            micheline: micheline,
                            quote: quote,
                            type: type,
                            initiator: initiator,
                            sender: sender,
                            target: target,
                            prevDelegate: prevDelegate,
                            newDelegate: newDelegate,
                            contractManager: contractManager,
                            contractDelegate: contractDelegate,
                            originatedContract: originatedContract,
                            accuser: accuser,
                            offender: offender,
                            baker: baker,
                            level: level,
                            timestamp: timestamp,
                            entrypoint: entrypoint,
                            parameter: parameter,
                            parameters: parameters,
                            hasInternals: hasInternals,
                            status: status,
                            lastId: lastId,
                            limit: limit,
                            from: from,
                            to: to,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get account operations
     * Returns a list of operations related to the specified account.
     * Note: for better flexibility this endpoint accumulates query parameters (filters) of each `/operations/{type}` endpoint,
     * so a particular filter may affect several operation types containing this filter.
     * For example, if you specify an `initiator` it will affect all transactions, delegations and originations,
     * because all these types have an `initiator` field.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getOperationsApiRequestOptions = function (_a) {
        var address = _a.address, sort = _a.sort, micheline = _a.micheline, quote = _a.quote, type = _a.type, initiator = _a.initiator, sender = _a.sender, target = _a.target, prevDelegate = _a.prevDelegate, newDelegate = _a.newDelegate, contractManager = _a.contractManager, contractDelegate = _a.contractDelegate, originatedContract = _a.originatedContract, accuser = _a.accuser, offender = _a.offender, baker = _a.baker, level = _a.level, timestamp = _a.timestamp, entrypoint = _a.entrypoint, parameter = _a.parameter, parameters = _a.parameters, hasInternals = _a.hasInternals, status = _a.status, lastId = _a.lastId, _b = _a.limit, limit = _b === void 0 ? 100 : _b, from = _a.from, to = _a.to;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/operations", query: {
                'sort': sort,
                'micheline': micheline,
                'quote': quote,
                'type': type,
                'initiator': initiator,
                'sender': sender,
                'target': target,
                'prevDelegate': prevDelegate,
                'newDelegate': newDelegate,
                'contractManager': contractManager,
                'contractDelegate': contractDelegate,
                'originatedContract': originatedContract,
                'accuser': accuser,
                'offender': offender,
                'baker': baker,
                'level': level,
                'timestamp': timestamp,
                'entrypoint': entrypoint,
                'parameter': parameter,
                'parameters': parameters,
                'hasInternals': hasInternals,
                'status': status,
                'lastId': lastId,
                'limit': limit,
                'from': from,
                'to': to,
            } });
    };
    /**
     * Get account metadata
     * Returns metadata of the specified account (alias, logo, website, contacts, etc).
     * @returns AccountMetadata
     * @throws ApiError
     */
    AccountsService.prototype.getMetadata = function (_a) {
        var address = _a.address;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getMetadataApiRequestOptions({
                            address: address,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get account metadata
     * Returns metadata of the specified account (alias, logo, website, contacts, etc).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getMetadataApiRequestOptions = function (_a) {
        var address = _a.address;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/metadata" });
    };
    /**
     * Get account report
     * Exports account balance report in .csv format
     * @returns any
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceReport = function (_a) {
        var address = _a.address, from = _a.from, to = _a.to, currency = _a.currency, _b = _a.historical, historical = _b === void 0 ? false : _b, _c = _a.delimiter, delimiter = _c === void 0 ? 'comma' : _c, _d = _a.separator, separator = _d === void 0 ? 'point' : _d;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        options = this.getBalanceReportApiRequestOptions({
                            address: address,
                            from: from,
                            to: to,
                            currency: currency,
                            historical: historical,
                            delimiter: delimiter,
                            separator: separator,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _e.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get account report
     * Exports account balance report in .csv format
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceReportApiRequestOptions = function (_a) {
        var address = _a.address, from = _a.from, to = _a.to, currency = _a.currency, _b = _a.historical, historical = _b === void 0 ? false : _b, _c = _a.delimiter, delimiter = _c === void 0 ? 'comma' : _c, _d = _a.separator, separator = _d === void 0 ? 'point' : _d;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/report", query: {
                'from': from,
                'to': to,
                'currency': currency,
                'historical': historical,
                'delimiter': delimiter,
                'separator': separator,
            } });
    };
    /**
     * Get balance history
     * Returns time series with historical balances (only changes, without duplicates).
     * @returns HistoricalBalance
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceHistory = function (_a) {
        var address = _a.address, quote = _a.quote, step = _a.step, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getBalanceHistoryApiRequestOptions({
                            address: address,
                            quote: quote,
                            step: step,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get balance history
     * Returns time series with historical balances (only changes, without duplicates).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceHistoryApiRequestOptions = function (_a) {
        var address = _a.address, quote = _a.quote, step = _a.step, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/balance_history", query: {
                'quote': quote,
                'step': step,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get balance at level
     * Returns account balance at the specified block
     * @returns number
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceAtLevel = function (_a) {
        var address = _a.address, level = _a.level;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getBalanceAtLevelApiRequestOptions({
                            address: address,
                            level: level,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get balance at level
     * Returns account balance at the specified block
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceAtLevelApiRequestOptions = function (_a) {
        var address = _a.address, level = _a.level;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/balance_history/" + level });
    };
    /**
     * Get balance at date
     * Returns account balance at the specified datetime
     * @returns number
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceAtDate = function (_a) {
        var address = _a.address, datetime = _a.datetime;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getBalanceAtDateApiRequestOptions({
                            address: address,
                            datetime: datetime,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get balance at date
     * Returns account balance at the specified datetime
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    AccountsService.prototype.getBalanceAtDateApiRequestOptions = function (_a) {
        var address = _a.address, datetime = _a.datetime;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/accounts/" + address + "/balance_history/" + datetime });
    };
    return AccountsService;
}());
export { AccountsService };
