var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { request as __request } from '../core/request';
var OperationsService = /** @class */ (function () {
    /**
     * creates a new service
     * @param config the configuration to use
     */
    function OperationsService(config) {
        this.config = config;
    }
    /**
     * Get operations by hash
     * Returns a list of operations with the specified hash.
     * @returns Operation
     * @throws ApiError
     */
    OperationsService.prototype.getByHash = function (_a) {
        var hash = _a.hash, micheline = _a.micheline, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getByHashApiRequestOptions({
                            hash: hash,
                            micheline: micheline,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get operations by hash
     * Returns a list of operations with the specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, micheline = _a.micheline, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/" + hash, query: {
                'micheline': micheline,
                'quote': quote,
            } });
    };
    /**
     * Get operations by hash and counter
     * Returns a list of operations with the specified hash and counter.
     * @returns Operation
     * @throws ApiError
     */
    OperationsService.prototype.getByHashCounter = function (_a) {
        var hash = _a.hash, counter = _a.counter, micheline = _a.micheline, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getByHashCounterApiRequestOptions({
                            hash: hash,
                            counter: counter,
                            micheline: micheline,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get operations by hash and counter
     * Returns a list of operations with the specified hash and counter.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getByHashCounterApiRequestOptions = function (_a) {
        var hash = _a.hash, counter = _a.counter, micheline = _a.micheline, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/" + hash + "/" + counter, query: {
                'micheline': micheline,
                'quote': quote,
            } });
    };
    /**
     * Get operations by hash, counter and nonce
     * Returns an internal operations with the specified hash, counter and nonce.
     * @returns Operation
     * @throws ApiError
     */
    OperationsService.prototype.getByHashCounterNonce = function (_a) {
        var hash = _a.hash, counter = _a.counter, nonce = _a.nonce, micheline = _a.micheline, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getByHashCounterNonceApiRequestOptions({
                            hash: hash,
                            counter: counter,
                            nonce: nonce,
                            micheline: micheline,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get operations by hash, counter and nonce
     * Returns an internal operations with the specified hash, counter and nonce.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getByHashCounterNonceApiRequestOptions = function (_a) {
        var hash = _a.hash, counter = _a.counter, nonce = _a.nonce, micheline = _a.micheline, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/" + hash + "/" + counter + "/" + nonce, query: {
                'micheline': micheline,
                'quote': quote,
            } });
    };
    /**
     * Get endorsements
     * Returns a list of endorsement operations.
     * @returns EndorsementOperation
     * @throws ApiError
     */
    OperationsService.prototype.getEndorsements = function (_a) {
        var quote = _a.quote, delegate = _a.delegate, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getEndorsementsApiRequestOptions({
                            quote: quote,
                            delegate: delegate,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get endorsements
     * Returns a list of endorsement operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getEndorsementsApiRequestOptions = function (_a) {
        var quote = _a.quote, delegate = _a.delegate, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/endorsements", query: {
                'quote': quote,
                'delegate': delegate,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get endorsement by hash
     * Returns an endorsement operation with specified hash.
     * @returns EndorsementOperation
     * @throws ApiError
     */
    OperationsService.prototype.getEndorsementByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getEndorsementByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get endorsement by hash
     * Returns an endorsement operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getEndorsementByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/endorsements/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get endorsements count
     * Returns the total number of endorsement operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getEndorsementsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getEndorsementsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get endorsements count
     * Returns the total number of endorsement operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getEndorsementsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/endorsements/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get ballots
     * Returns a list of ballot operations.
     * @returns BallotOperation
     * @throws ApiError
     */
    OperationsService.prototype.getBallots = function (_a) {
        var quote = _a.quote, delegate = _a.delegate, level = _a.level, timestamp = _a.timestamp, epoch = _a.epoch, period = _a.period, proposal = _a.proposal, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getBallotsApiRequestOptions({
                            quote: quote,
                            delegate: delegate,
                            level: level,
                            timestamp: timestamp,
                            epoch: epoch,
                            period: period,
                            proposal: proposal,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get ballots
     * Returns a list of ballot operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getBallotsApiRequestOptions = function (_a) {
        var quote = _a.quote, delegate = _a.delegate, level = _a.level, timestamp = _a.timestamp, epoch = _a.epoch, period = _a.period, proposal = _a.proposal, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/ballots", query: {
                'quote': quote,
                'delegate': delegate,
                'level': level,
                'timestamp': timestamp,
                'epoch': epoch,
                'period': period,
                'proposal': proposal,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get ballot by hash
     * Returns a ballot operation with specified hash.
     * @returns BallotOperation
     * @throws ApiError
     */
    OperationsService.prototype.getBallotByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getBallotByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get ballot by hash
     * Returns a ballot operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getBallotByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/ballots/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get ballots count
     * Returns the total number of ballot operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getBallotsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getBallotsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get ballots count
     * Returns the total number of ballot operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getBallotsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/ballots/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get proposals
     * Returns a list of proposal operations.
     * @returns ProposalOperation
     * @throws ApiError
     */
    OperationsService.prototype.getProposals = function (_a) {
        var quote = _a.quote, delegate = _a.delegate, level = _a.level, timestamp = _a.timestamp, epoch = _a.epoch, period = _a.period, proposal = _a.proposal, duplicated = _a.duplicated, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getProposalsApiRequestOptions({
                            quote: quote,
                            delegate: delegate,
                            level: level,
                            timestamp: timestamp,
                            epoch: epoch,
                            period: period,
                            proposal: proposal,
                            duplicated: duplicated,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get proposals
     * Returns a list of proposal operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getProposalsApiRequestOptions = function (_a) {
        var quote = _a.quote, delegate = _a.delegate, level = _a.level, timestamp = _a.timestamp, epoch = _a.epoch, period = _a.period, proposal = _a.proposal, duplicated = _a.duplicated, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/proposals", query: {
                'quote': quote,
                'delegate': delegate,
                'level': level,
                'timestamp': timestamp,
                'epoch': epoch,
                'period': period,
                'proposal': proposal,
                'duplicated': duplicated,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get proposal by hash
     * Returns a proposal operation with specified hash.
     * @returns ProposalOperation
     * @throws ApiError
     */
    OperationsService.prototype.getProposalByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getProposalByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get proposal by hash
     * Returns a proposal operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getProposalByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/proposals/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get proposals count
     * Returns the total number of proposal operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getProposalsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getProposalsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get proposals count
     * Returns the total number of proposal operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getProposalsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/proposals/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get activations
     * Returns a list of activation operations.
     * @returns ActivationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getActivations = function (_a) {
        var quote = _a.quote, account = _a.account, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getActivationsApiRequestOptions({
                            quote: quote,
                            account: account,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get activations
     * Returns a list of activation operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getActivationsApiRequestOptions = function (_a) {
        var quote = _a.quote, account = _a.account, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/activations", query: {
                'quote': quote,
                'account': account,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get activation by hash
     * Returns an activation operation with specified hash.
     * @returns ActivationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getActivationByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getActivationByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get activation by hash
     * Returns an activation operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getActivationByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/activations/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get activations count
     * Returns the total number of activation operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getActivationsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getActivationsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get activations count
     * Returns the total number of activation operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getActivationsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/activations/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get double baking
     * Returns a list of double baking operations.
     * @returns DoubleBakingOperation
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleBaking = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, accuser = _a.accuser, offender = _a.offender, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getDoubleBakingApiRequestOptions({
                            quote: quote,
                            anyof: anyof,
                            accuser: accuser,
                            offender: offender,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get double baking
     * Returns a list of double baking operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleBakingApiRequestOptions = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, accuser = _a.accuser, offender = _a.offender, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/double_baking", query: {
                'quote': quote,
                'anyof': anyof,
                'accuser': accuser,
                'offender': offender,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get double baking by hash
     * Returns a double baking operation with specified hash.
     * @returns DoubleBakingOperation
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleBakingByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getDoubleBakingByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get double baking by hash
     * Returns a double baking operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleBakingByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/double_baking/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get double baking count
     * Returns the total number of double baking operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleBakingCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getDoubleBakingCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get double baking count
     * Returns the total number of double baking operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleBakingCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/double_baking/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get double endorsing
     * Returns a list of double endorsing operations.
     * @returns DoubleEndorsingOperation
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleEndorsing = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, accuser = _a.accuser, offender = _a.offender, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getDoubleEndorsingApiRequestOptions({
                            quote: quote,
                            anyof: anyof,
                            accuser: accuser,
                            offender: offender,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get double endorsing
     * Returns a list of double endorsing operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleEndorsingApiRequestOptions = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, accuser = _a.accuser, offender = _a.offender, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/double_endorsing", query: {
                'quote': quote,
                'anyof': anyof,
                'accuser': accuser,
                'offender': offender,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get double endorsing by hash
     * Returns a double endorsing operation with specified hash.
     * @returns DoubleEndorsingOperation
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleEndorsingByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getDoubleEndorsingByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get double endorsing by hash
     * Returns a double endorsing operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleEndorsingByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/double_endorsing/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get double endorsing count
     * Returns the total number of double endorsing operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleEndorsingCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getDoubleEndorsingCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get double endorsing count
     * Returns the total number of double endorsing operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDoubleEndorsingCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/double_endorsing/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get nonce revelations
     * Returns a list of seed nonce revelation operations.
     * @returns NonceRevelationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getNonceRevelations = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, baker = _a.baker, sender = _a.sender, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getNonceRevelationsApiRequestOptions({
                            quote: quote,
                            anyof: anyof,
                            baker: baker,
                            sender: sender,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get nonce revelations
     * Returns a list of seed nonce revelation operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getNonceRevelationsApiRequestOptions = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, baker = _a.baker, sender = _a.sender, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/nonce_revelations", query: {
                'quote': quote,
                'anyof': anyof,
                'baker': baker,
                'sender': sender,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get nonce revelation by hash
     * Returns a seed nonce revelation operation with specified hash.
     * @returns NonceRevelationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getNonceRevelationByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getNonceRevelationByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get nonce revelation by hash
     * Returns a seed nonce revelation operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getNonceRevelationByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/nonce_revelations/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get nonce revelations count
     * Returns the total number of seed nonce revelation operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getNonceRevelationsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getNonceRevelationsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get nonce revelations count
     * Returns the total number of seed nonce revelation operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getNonceRevelationsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/nonce_revelations/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get delegations
     * Returns a list of delegation operations.
     * @returns DelegationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getDelegations = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, initiator = _a.initiator, sender = _a.sender, prevDelegate = _a.prevDelegate, newDelegate = _a.newDelegate, level = _a.level, timestamp = _a.timestamp, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getDelegationsApiRequestOptions({
                            quote: quote,
                            anyof: anyof,
                            initiator: initiator,
                            sender: sender,
                            prevDelegate: prevDelegate,
                            newDelegate: newDelegate,
                            level: level,
                            timestamp: timestamp,
                            status: status,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get delegations
     * Returns a list of delegation operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDelegationsApiRequestOptions = function (_a) {
        var quote = _a.quote, anyof = _a.anyof, initiator = _a.initiator, sender = _a.sender, prevDelegate = _a.prevDelegate, newDelegate = _a.newDelegate, level = _a.level, timestamp = _a.timestamp, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/delegations", query: {
                'quote': quote,
                'anyof': anyof,
                'initiator': initiator,
                'sender': sender,
                'prevDelegate': prevDelegate,
                'newDelegate': newDelegate,
                'level': level,
                'timestamp': timestamp,
                'status': status,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get delegation by hash
     * Returns a delegation operation with specified hash.
     * @returns DelegationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getDelegationByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getDelegationByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get delegation by hash
     * Returns a delegation operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDelegationByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/delegations/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get delegations count
     * Returns the total number of delegation operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getDelegationsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getDelegationsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get delegations count
     * Returns the total number of delegation operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getDelegationsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/delegations/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get originations
     * Returns a list of origination operations.
     * @returns OriginationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getOriginations = function (_a) {
        var micheline = _a.micheline, quote = _a.quote, anyof = _a.anyof, initiator = _a.initiator, sender = _a.sender, contractManager = _a.contractManager, contractDelegate = _a.contractDelegate, originatedContract = _a.originatedContract, typeHash = _a.typeHash, codeHash = _a.codeHash, level = _a.level, timestamp = _a.timestamp, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getOriginationsApiRequestOptions({
                            micheline: micheline,
                            quote: quote,
                            anyof: anyof,
                            initiator: initiator,
                            sender: sender,
                            contractManager: contractManager,
                            contractDelegate: contractDelegate,
                            originatedContract: originatedContract,
                            typeHash: typeHash,
                            codeHash: codeHash,
                            level: level,
                            timestamp: timestamp,
                            status: status,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get originations
     * Returns a list of origination operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getOriginationsApiRequestOptions = function (_a) {
        var micheline = _a.micheline, quote = _a.quote, anyof = _a.anyof, initiator = _a.initiator, sender = _a.sender, contractManager = _a.contractManager, contractDelegate = _a.contractDelegate, originatedContract = _a.originatedContract, typeHash = _a.typeHash, codeHash = _a.codeHash, level = _a.level, timestamp = _a.timestamp, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/originations", query: {
                'micheline': micheline,
                'quote': quote,
                'anyof': anyof,
                'initiator': initiator,
                'sender': sender,
                'contractManager': contractManager,
                'contractDelegate': contractDelegate,
                'originatedContract': originatedContract,
                'typeHash': typeHash,
                'codeHash': codeHash,
                'level': level,
                'timestamp': timestamp,
                'status': status,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get origination by hash
     * Returns origination operations with specified hash.
     * @returns OriginationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getOriginationByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote, micheline = _a.micheline;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getOriginationByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                            micheline: micheline,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get origination by hash
     * Returns origination operations with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getOriginationByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote, micheline = _a.micheline;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/originations/" + hash, query: {
                'quote': quote,
                'micheline': micheline,
            } });
    };
    /**
     * Get originations count
     * Returns the total number of origination operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getOriginationsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getOriginationsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get originations count
     * Returns the total number of origination operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getOriginationsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/originations/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get transactions
     * Returns a list of transaction operations.
     * @returns TransactionOperation
     * @throws ApiError
     */
    OperationsService.prototype.getTransactions = function (_a) {
        var micheline = _a.micheline, quote = _a.quote, anyof = _a.anyof, initiator = _a.initiator, sender = _a.sender, target = _a.target, amount = _a.amount, level = _a.level, timestamp = _a.timestamp, entrypoint = _a.entrypoint, parameter = _a.parameter, parameters = _a.parameters, hasInternals = _a.hasInternals, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getTransactionsApiRequestOptions({
                            micheline: micheline,
                            quote: quote,
                            anyof: anyof,
                            initiator: initiator,
                            sender: sender,
                            target: target,
                            amount: amount,
                            level: level,
                            timestamp: timestamp,
                            entrypoint: entrypoint,
                            parameter: parameter,
                            parameters: parameters,
                            hasInternals: hasInternals,
                            status: status,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get transactions
     * Returns a list of transaction operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionsApiRequestOptions = function (_a) {
        var micheline = _a.micheline, quote = _a.quote, anyof = _a.anyof, initiator = _a.initiator, sender = _a.sender, target = _a.target, amount = _a.amount, level = _a.level, timestamp = _a.timestamp, entrypoint = _a.entrypoint, parameter = _a.parameter, parameters = _a.parameters, hasInternals = _a.hasInternals, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/transactions", query: {
                'micheline': micheline,
                'quote': quote,
                'anyof': anyof,
                'initiator': initiator,
                'sender': sender,
                'target': target,
                'amount': amount,
                'level': level,
                'timestamp': timestamp,
                'entrypoint': entrypoint,
                'parameter': parameter,
                'parameters': parameters,
                'hasInternals': hasInternals,
                'status': status,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get transaction by hash
     * Returns transaction operations with specified hash.
     * @returns TransactionOperation
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionByHash = function (_a) {
        var hash = _a.hash, micheline = _a.micheline, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getTransactionByHashApiRequestOptions({
                            hash: hash,
                            micheline: micheline,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get transaction by hash
     * Returns transaction operations with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, micheline = _a.micheline, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/transactions/" + hash, query: {
                'micheline': micheline,
                'quote': quote,
            } });
    };
    /**
     * Get transaction by hash and counter
     * Returns transaction operations with specified hash and counter.
     * @returns TransactionOperation
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionByHashCounter = function (_a) {
        var hash = _a.hash, counter = _a.counter, micheline = _a.micheline, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getTransactionByHashCounterApiRequestOptions({
                            hash: hash,
                            counter: counter,
                            micheline: micheline,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get transaction by hash and counter
     * Returns transaction operations with specified hash and counter.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionByHashCounterApiRequestOptions = function (_a) {
        var hash = _a.hash, counter = _a.counter, micheline = _a.micheline, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/transactions/" + hash + "/" + counter, query: {
                'micheline': micheline,
                'quote': quote,
            } });
    };
    /**
     * Get transaction by hash, counter and nonce
     * Returns an internal transaction operation with specified hash, counter and nonce.
     * @returns TransactionOperation
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionByHashCounterNonce = function (_a) {
        var hash = _a.hash, counter = _a.counter, nonce = _a.nonce, micheline = _a.micheline, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getTransactionByHashCounterNonceApiRequestOptions({
                            hash: hash,
                            counter: counter,
                            nonce: nonce,
                            micheline: micheline,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get transaction by hash, counter and nonce
     * Returns an internal transaction operation with specified hash, counter and nonce.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionByHashCounterNonceApiRequestOptions = function (_a) {
        var hash = _a.hash, counter = _a.counter, nonce = _a.nonce, micheline = _a.micheline, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/transactions/" + hash + "/" + counter + "/" + nonce, query: {
                'micheline': micheline,
                'quote': quote,
            } });
    };
    /**
     * Get transactions count
     * Returns the total number of transaction operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp, status = _a.status;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getTransactionsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                            status: status,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get transactions count
     * Returns the total number of transaction operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getTransactionsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp, status = _a.status;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/transactions/count", query: {
                'level': level,
                'timestamp': timestamp,
                'status': status,
            } });
    };
    /**
     * Get reveals
     * Returns a list of reveal operations.
     * @returns RevealOperation
     * @throws ApiError
     */
    OperationsService.prototype.getReveals = function (_a) {
        var quote = _a.quote, sender = _a.sender, level = _a.level, timestamp = _a.timestamp, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getRevealsApiRequestOptions({
                            quote: quote,
                            sender: sender,
                            level: level,
                            timestamp: timestamp,
                            status: status,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get reveals
     * Returns a list of reveal operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getRevealsApiRequestOptions = function (_a) {
        var quote = _a.quote, sender = _a.sender, level = _a.level, timestamp = _a.timestamp, status = _a.status, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/reveals", query: {
                'quote': quote,
                'sender': sender,
                'level': level,
                'timestamp': timestamp,
                'status': status,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get reveal by hash
     * Returns reveal operation with specified hash.
     * @returns RevealOperation
     * @throws ApiError
     */
    OperationsService.prototype.getRevealByHash = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getRevealByHashApiRequestOptions({
                            hash: hash,
                            quote: quote,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get reveal by hash
     * Returns reveal operation with specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getRevealByHashApiRequestOptions = function (_a) {
        var hash = _a.hash, quote = _a.quote;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/reveals/" + hash, query: {
                'quote': quote,
            } });
    };
    /**
     * Get reveals count
     * Returns the total number of reveal operations.
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getRevealsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getRevealsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get reveals count
     * Returns the total number of reveal operations.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getRevealsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/reveals/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get migrations
     * Returns a list of migration operations (synthetic type).
     * @returns MigrationOperation
     * @throws ApiError
     */
    OperationsService.prototype.getMigrations = function (_a) {
        var quote = _a.quote, account = _a.account, kind = _a.kind, balanceChange = _a.balanceChange, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getMigrationsApiRequestOptions({
                            quote: quote,
                            account: account,
                            kind: kind,
                            balanceChange: balanceChange,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get migrations
     * Returns a list of migration operations (synthetic type).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getMigrationsApiRequestOptions = function (_a) {
        var quote = _a.quote, account = _a.account, kind = _a.kind, balanceChange = _a.balanceChange, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/migrations", query: {
                'quote': quote,
                'account': account,
                'kind': kind,
                'balanceChange': balanceChange,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get migrations count
     * Returns the total number of migration operations (synthetic type).
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getMigrationsCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getMigrationsCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get migrations count
     * Returns the total number of migration operations (synthetic type).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getMigrationsCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/migrations/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get revelation penalties
     * Returns a list of revelation penalty operations (synthetic type).
     * @returns RevelationPenaltyOperation
     * @throws ApiError
     */
    OperationsService.prototype.getRevelationPenalties = function (_a) {
        var quote = _a.quote, baker = _a.baker, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getRevelationPenaltiesApiRequestOptions({
                            quote: quote,
                            baker: baker,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get revelation penalties
     * Returns a list of revelation penalty operations (synthetic type).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getRevelationPenaltiesApiRequestOptions = function (_a) {
        var quote = _a.quote, baker = _a.baker, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/revelation_penalties", query: {
                'quote': quote,
                'baker': baker,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get revelation penalties count
     * Returns the total number of revelation penalty operations (synthetic type).
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getRevelationPenaltiesCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getRevelationPenaltiesCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get revelation penalties count
     * Returns the total number of revelation penalty operations (synthetic type).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getRevelationPenaltiesCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/revelation_penalties/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    /**
     * Get baking
     * Returns a list of baking operations (synthetic type).
     * @returns BakingOperation
     * @throws ApiError
     */
    OperationsService.prototype.getBaking = function (_a) {
        var quote = _a.quote, baker = _a.baker, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getBakingApiRequestOptions({
                            quote: quote,
                            baker: baker,
                            level: level,
                            timestamp: timestamp,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get baking
     * Returns a list of baking operations (synthetic type).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getBakingApiRequestOptions = function (_a) {
        var quote = _a.quote, baker = _a.baker, level = _a.level, timestamp = _a.timestamp, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/baking", query: {
                'quote': quote,
                'baker': baker,
                'level': level,
                'timestamp': timestamp,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get baking count
     * Returns the total number of baking operations (synthetic type).
     * @returns number
     * @throws ApiError
     */
    OperationsService.prototype.getBakingCount = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getBakingCountApiRequestOptions({
                            level: level,
                            timestamp: timestamp,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get baking count
     * Returns the total number of baking operations (synthetic type).
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    OperationsService.prototype.getBakingCountApiRequestOptions = function (_a) {
        var level = _a.level, timestamp = _a.timestamp;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/operations/baking/count", query: {
                'level': level,
                'timestamp': timestamp,
            } });
    };
    return OperationsService;
}());
export { OperationsService };
