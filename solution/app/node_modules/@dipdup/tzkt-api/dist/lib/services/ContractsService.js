var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { request as __request } from '../core/request';
var ContractsService = /** @class */ (function () {
    /**
     * creates a new service
     * @param config the configuration to use
     */
    function ContractsService(config) {
        this.config = config;
    }
    /**
     * Get contracts
     * Returns a list of contract accounts.
     * @returns Contract
     * @throws ApiError
     */
    ContractsService.prototype.get = function (_a) {
        var kind = _a.kind, creator = _a.creator, manager = _a.manager, delegate = _a.delegate, lastActivity = _a.lastActivity, typeHash = _a.typeHash, codeHash = _a.codeHash, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b, _c = _a.includeStorage, includeStorage = _c === void 0 ? false : _c;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        options = this.getApiRequestOptions({
                            kind: kind,
                            creator: creator,
                            manager: manager,
                            delegate: delegate,
                            lastActivity: lastActivity,
                            typeHash: typeHash,
                            codeHash: codeHash,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                            includeStorage: includeStorage,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _d.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contracts
     * Returns a list of contract accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getApiRequestOptions = function (_a) {
        var kind = _a.kind, creator = _a.creator, manager = _a.manager, delegate = _a.delegate, lastActivity = _a.lastActivity, typeHash = _a.typeHash, codeHash = _a.codeHash, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b, _c = _a.includeStorage, includeStorage = _c === void 0 ? false : _c;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts", query: {
                'kind': kind,
                'creator': creator,
                'manager': manager,
                'delegate': delegate,
                'lastActivity': lastActivity,
                'typeHash': typeHash,
                'codeHash': codeHash,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
                'includeStorage': includeStorage,
            } });
    };
    /**
     * Get contracts count
     * Returns a number of contract accounts.
     * @returns number
     * @throws ApiError
     */
    ContractsService.prototype.getCount = function (_a) {
        var kind = _a.kind;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getCountApiRequestOptions({
                            kind: kind,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contracts count
     * Returns a number of contract accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getCountApiRequestOptions = function (_a) {
        var kind = _a.kind;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/count", query: {
                'kind': kind,
            } });
    };
    /**
     * Get contract by address
     * Returns a contract account with the specified address.
     * @returns Contract
     * @throws ApiError
     */
    ContractsService.prototype.getByAddress = function (_a) {
        var address = _a.address;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getByAddressApiRequestOptions({
                            address: address,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contract by address
     * Returns a contract account with the specified address.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getByAddressApiRequestOptions = function (_a) {
        var address = _a.address;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address });
    };
    /**
     * Get same contracts
     * Returns contracts which have the same script as the specified one.
     * Note, contract scripts are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns Contract
     * @throws ApiError
     */
    ContractsService.prototype.getSame = function (_a) {
        var address = _a.address, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b, _c = _a.includeStorage, includeStorage = _c === void 0 ? false : _c;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        options = this.getSameApiRequestOptions({
                            address: address,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                            includeStorage: includeStorage,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _d.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get same contracts
     * Returns contracts which have the same script as the specified one.
     * Note, contract scripts are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getSameApiRequestOptions = function (_a) {
        var address = _a.address, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b, _c = _a.includeStorage, includeStorage = _c === void 0 ? false : _c;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/same", query: {
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
                'includeStorage': includeStorage,
            } });
    };
    /**
     * Get similar contracts
     * Returns contracts which have the same interface (parameter and storage types) as the specified one.
     * Note, contract parameter and storage types are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns Contract
     * @throws ApiError
     */
    ContractsService.prototype.getSimilar = function (_a) {
        var address = _a.address, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b, _c = _a.includeStorage, includeStorage = _c === void 0 ? false : _c;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        options = this.getSimilarApiRequestOptions({
                            address: address,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                            includeStorage: includeStorage,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _d.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get similar contracts
     * Returns contracts which have the same interface (parameter and storage types) as the specified one.
     * Note, contract parameter and storage types are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getSimilarApiRequestOptions = function (_a) {
        var address = _a.address, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b, _c = _a.includeStorage, includeStorage = _c === void 0 ? false : _c;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/similar", query: {
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
                'includeStorage': includeStorage,
            } });
    };
    /**
     * Get contract code
     * Returns a code of the specified contract.
     * @returns any
     * @throws ApiError
     */
    ContractsService.prototype.getCode = function (_a) {
        var address = _a.address, format = _a.format;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getCodeApiRequestOptions({
                            address: address,
                            format: format,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contract code
     * Returns a code of the specified contract.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getCodeApiRequestOptions = function (_a) {
        var address = _a.address, format = _a.format;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/code", query: {
                'format': format,
            } });
    };
    /**
     * Get JSON Schema [2020-12] interface for the contract
     * Returns standard JSON Schema for contract storage, entrypoints, and Big_map entries.
     * @returns ContractInterface
     * @throws ApiError
     */
    ContractsService.prototype.getInterface = function (_a) {
        var address = _a.address;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getInterfaceApiRequestOptions({
                            address: address,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get JSON Schema [2020-12] interface for the contract
     * Returns standard JSON Schema for contract storage, entrypoints, and Big_map entries.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getInterfaceApiRequestOptions = function (_a) {
        var address = _a.address;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/interface" });
    };
    /**
     * Get contract entrypoints
     * Returns entrypoints of the specified contract.
     * @returns Entrypoint
     * @throws ApiError
     */
    ContractsService.prototype.getEntrypoints = function (_a) {
        var address = _a.address, _b = _a.all, all = _b === void 0 ? false : _b, _c = _a.json, json = _c === void 0 ? true : _c, _d = _a.micheline, micheline = _d === void 0 ? false : _d, _e = _a.michelson, michelson = _e === void 0 ? false : _e;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        options = this.getEntrypointsApiRequestOptions({
                            address: address,
                            all: all,
                            json: json,
                            micheline: micheline,
                            michelson: michelson,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _f.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contract entrypoints
     * Returns entrypoints of the specified contract.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getEntrypointsApiRequestOptions = function (_a) {
        var address = _a.address, _b = _a.all, all = _b === void 0 ? false : _b, _c = _a.json, json = _c === void 0 ? true : _c, _d = _a.micheline, micheline = _d === void 0 ? false : _d, _e = _a.michelson, michelson = _e === void 0 ? false : _e;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/entrypoints", query: {
                'all': all,
                'json': json,
                'micheline': micheline,
                'michelson': michelson,
            } });
    };
    /**
     * Get entrypoint by name
     * Returns contract's entrypoint with specified name.
     * @returns Entrypoint
     * @throws ApiError
     */
    ContractsService.prototype.getEntrypointByName = function (_a) {
        var address = _a.address, name = _a.name, _b = _a.json, json = _b === void 0 ? true : _b, _c = _a.micheline, micheline = _c === void 0 ? false : _c, _d = _a.michelson, michelson = _d === void 0 ? false : _d;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        options = this.getEntrypointByNameApiRequestOptions({
                            address: address,
                            name: name,
                            json: json,
                            micheline: micheline,
                            michelson: michelson,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _e.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get entrypoint by name
     * Returns contract's entrypoint with specified name.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getEntrypointByNameApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, _b = _a.json, json = _b === void 0 ? true : _b, _c = _a.micheline, micheline = _c === void 0 ? false : _c, _d = _a.michelson, michelson = _d === void 0 ? false : _d;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/entrypoints/" + name, query: {
                'json': json,
                'micheline': micheline,
                'michelson': michelson,
            } });
    };
    /**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns any
     * @throws ApiError
     */
    ContractsService.prototype.buildEntrypointParameters = function (_a) {
        var address = _a.address, name = _a.name, value = _a.value;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.buildEntrypointParametersApiRequestOptions({
                            address: address,
                            name: name,
                            value: value,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.buildEntrypointParametersApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, value = _a.value;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/entrypoints/" + name + "/build", query: {
                'value': value,
            } });
    };
    /**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns any
     * @throws ApiError
     */
    ContractsService.prototype.buildEntrypointParameters2 = function (_a) {
        var address = _a.address, name = _a.name, requestBody = _a.requestBody;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.buildEntrypointParameters2ApiRequestOptions({
                            address: address,
                            name: name,
                            requestBody: requestBody,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.buildEntrypointParameters2ApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, requestBody = _a.requestBody;
        return __assign(__assign({}, this.config), { method: 'POST', path: "/v1/contracts/" + address + "/entrypoints/" + name + "/build", body: requestBody, mediaType: 'application/json' });
    };
    /**
     * Get contract storage
     * Returns contract storage value in JSON format.
     * @returns any
     * @throws ApiError
     */
    ContractsService.prototype.getStorage = function (_a) {
        var address = _a.address, level = _a.level, path = _a.path;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getStorageApiRequestOptions({
                            address: address,
                            level: level,
                            path: path,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contract storage
     * Returns contract storage value in JSON format.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getStorageApiRequestOptions = function (_a) {
        var address = _a.address, level = _a.level, path = _a.path;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/storage", query: {
                'level': level,
                'path': path,
            } });
    };
    /**
     * Get contract storage schema
     * Returns JSON schema of the contract storage.
     * @returns any
     * @throws ApiError
     */
    ContractsService.prototype.getStorageSchema = function (_a) {
        var address = _a.address, level = _a.level;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getStorageSchemaApiRequestOptions({
                            address: address,
                            level: level,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contract storage schema
     * Returns JSON schema of the contract storage.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getStorageSchemaApiRequestOptions = function (_a) {
        var address = _a.address, level = _a.level;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/storage/schema", query: {
                'level': level,
            } });
    };
    /**
     * Get contract storage history
     * Returns contract storage historical values.
     * @returns StorageRecord
     * @throws ApiError
     */
    ContractsService.prototype.getStorageHistory = function (_a) {
        var address = _a.address, lastId = _a.lastId, _b = _a.limit, limit = _b === void 0 ? 10 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getStorageHistoryApiRequestOptions({
                            address: address,
                            lastId: lastId,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contract storage history
     * Returns contract storage historical values.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getStorageHistoryApiRequestOptions = function (_a) {
        var address = _a.address, lastId = _a.lastId, _b = _a.limit, limit = _b === void 0 ? 10 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/storage/history", query: {
                'lastId': lastId,
                'limit': limit,
            } });
    };
    /**
     * Get raw contract storage
     * Returns raw contract storage value in micheline format.
     * @returns IMicheline
     * @throws ApiError
     */
    ContractsService.prototype.getRawStorage = function (_a) {
        var address = _a.address, level = _a.level;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getRawStorageApiRequestOptions({
                            address: address,
                            level: level,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get raw contract storage
     * Returns raw contract storage value in micheline format.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getRawStorageApiRequestOptions = function (_a) {
        var address = _a.address, level = _a.level;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/storage/raw", query: {
                'level': level,
            } });
    };
    /**
     * Get raw contract storage schema
     * Returns micheline schema (type) of the contract storage.
     * @returns IMicheline
     * @throws ApiError
     */
    ContractsService.prototype.getRawStorageSchema = function (_a) {
        var address = _a.address, level = _a.level;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getRawStorageSchemaApiRequestOptions({
                            address: address,
                            level: level,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get raw contract storage schema
     * Returns micheline schema (type) of the contract storage.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getRawStorageSchemaApiRequestOptions = function (_a) {
        var address = _a.address, level = _a.level;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/storage/raw/schema", query: {
                'level': level,
            } });
    };
    /**
     * Get raw contract storage history
     * Returns raw contract storage historical values.
     * @returns StorageRecord
     * @throws ApiError
     */
    ContractsService.prototype.getRawStorageHistory = function (_a) {
        var address = _a.address, lastId = _a.lastId, _b = _a.limit, limit = _b === void 0 ? 10 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getRawStorageHistoryApiRequestOptions({
                            address: address,
                            lastId: lastId,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get raw contract storage history
     * Returns raw contract storage historical values.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getRawStorageHistoryApiRequestOptions = function (_a) {
        var address = _a.address, lastId = _a.lastId, _b = _a.limit, limit = _b === void 0 ? 10 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/storage/raw/history", query: {
                'lastId': lastId,
                'limit': limit,
            } });
    };
    /**
     * Get contract bigmaps
     * Returns all active bigmaps allocated in the contract storage.
     * @returns BigMap
     * @throws ApiError
     */
    ContractsService.prototype.getBigMaps = function (_a) {
        var address = _a.address, micheline = _a.micheline, tags = _a.tags, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getBigMapsApiRequestOptions({
                            address: address,
                            micheline: micheline,
                            tags: tags,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get contract bigmaps
     * Returns all active bigmaps allocated in the contract storage.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getBigMapsApiRequestOptions = function (_a) {
        var address = _a.address, micheline = _a.micheline, tags = _a.tags, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/bigmaps", query: {
                'micheline': micheline,
                'tags': tags,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get bigmap by name
     * Returns contract bigmap with the specified name or storage path.
     * @returns BigMap
     * @throws ApiError
     */
    ContractsService.prototype.getBigMapByName = function (_a) {
        var address = _a.address, name = _a.name, micheline = _a.micheline;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getBigMapByNameApiRequestOptions({
                            address: address,
                            name: name,
                            micheline: micheline,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get bigmap by name
     * Returns contract bigmap with the specified name or storage path.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getBigMapByNameApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, micheline = _a.micheline;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/bigmaps/" + name, query: {
                'micheline': micheline,
            } });
    };
    /**
     * Get bigmap keys
     * Returns keys of a contract bigmap with the specified name.
     * @returns BigMapKey
     * @throws ApiError
     */
    ContractsService.prototype.getBigMapByNameKeys = function (_a) {
        var address = _a.address, name = _a.name, micheline = _a.micheline, active = _a.active, key = _a.key, value = _a.value, lastLevel = _a.lastLevel, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getBigMapByNameKeysApiRequestOptions({
                            address: address,
                            name: name,
                            micheline: micheline,
                            active: active,
                            key: key,
                            value: value,
                            lastLevel: lastLevel,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get bigmap keys
     * Returns keys of a contract bigmap with the specified name.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getBigMapByNameKeysApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, micheline = _a.micheline, active = _a.active, key = _a.key, value = _a.value, lastLevel = _a.lastLevel, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/bigmaps/" + name + "/keys", query: {
                'micheline': micheline,
                'active': active,
                'key': key,
                'value': value,
                'lastLevel': lastLevel,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get bigmap key
     * Returns the specified bigmap key.
     * @returns BigMapKey
     * @throws ApiError
     */
    ContractsService.prototype.getKey = function (_a) {
        var address = _a.address, name = _a.name, key = _a.key, micheline = _a.micheline;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getKeyApiRequestOptions({
                            address: address,
                            name: name,
                            key: key,
                            micheline: micheline,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get bigmap key
     * Returns the specified bigmap key.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getKeyApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, key = _a.key, micheline = _a.micheline;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/bigmaps/" + name + "/keys/" + key, query: {
                'micheline': micheline,
            } });
    };
    /**
     * Get bigmap key updates
     * Returns updates history for the specified bigmap key.
     * @returns BigMapKeyUpdate
     * @throws ApiError
     */
    ContractsService.prototype.getKeyUpdates = function (_a) {
        var address = _a.address, name = _a.name, key = _a.key, micheline = _a.micheline, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getKeyUpdatesApiRequestOptions({
                            address: address,
                            name: name,
                            key: key,
                            micheline: micheline,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get bigmap key updates
     * Returns updates history for the specified bigmap key.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getKeyUpdatesApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, key = _a.key, micheline = _a.micheline, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/bigmaps/" + name + "/keys/" + key + "/updates", query: {
                'micheline': micheline,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get historical keys
     * Returns a list of bigmap keys at the specific block.
     * @returns BigMapKeyHistorical
     * @throws ApiError
     */
    ContractsService.prototype.getHistoricalKeys = function (_a) {
        var address = _a.address, name = _a.name, level = _a.level, micheline = _a.micheline, active = _a.active, key = _a.key, value = _a.value, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getHistoricalKeysApiRequestOptions({
                            address: address,
                            name: name,
                            level: level,
                            micheline: micheline,
                            active: active,
                            key: key,
                            value: value,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get historical keys
     * Returns a list of bigmap keys at the specific block.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getHistoricalKeysApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, level = _a.level, micheline = _a.micheline, active = _a.active, key = _a.key, value = _a.value, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/bigmaps/" + name + "/historical_keys/" + level, query: {
                'micheline': micheline,
                'active': active,
                'key': key,
                'value': value,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get historical key
     * Returns the specified bigmap key at the specific block.
     * @returns BigMapKeyHistorical
     * @throws ApiError
     */
    ContractsService.prototype.getKey2 = function (_a) {
        var address = _a.address, name = _a.name, level = _a.level, key = _a.key, micheline = _a.micheline;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getKey2ApiRequestOptions({
                            address: address,
                            name: name,
                            level: level,
                            key: key,
                            micheline: micheline,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get historical key
     * Returns the specified bigmap key at the specific block.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    ContractsService.prototype.getKey2ApiRequestOptions = function (_a) {
        var address = _a.address, name = _a.name, level = _a.level, key = _a.key, micheline = _a.micheline;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/contracts/" + address + "/bigmaps/" + name + "/historical_keys/" + level + "/" + key, query: {
                'micheline': micheline,
            } });
    };
    return ContractsService;
}());
export { ContractsService };
