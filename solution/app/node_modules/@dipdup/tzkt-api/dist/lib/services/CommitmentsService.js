var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { request as __request } from '../core/request';
var CommitmentsService = /** @class */ (function () {
    /**
     * creates a new service
     * @param config the configuration to use
     */
    function CommitmentsService(config) {
        this.config = config;
    }
    /**
     * Get commitment by blinded address
     * Returns a commitment with the specified blinded address.
     * @returns Commitment
     * @throws ApiError
     */
    CommitmentsService.prototype.get = function (_a) {
        var address = _a.address;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getApiRequestOptions({
                            address: address,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get commitment by blinded address
     * Returns a commitment with the specified blinded address.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    CommitmentsService.prototype.getApiRequestOptions = function (_a) {
        var address = _a.address;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/commitments/" + address });
    };
    /**
     * Get commitments
     * Returns a list of commitments.
     * @returns Commitment
     * @throws ApiError
     */
    CommitmentsService.prototype.getAll = function (_a) {
        var activated = _a.activated, activationLevel = _a.activationLevel, balance = _a.balance, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = this.getAllApiRequestOptions({
                            activated: activated,
                            activationLevel: activationLevel,
                            balance: balance,
                            select: select,
                            sort: sort,
                            offset: offset,
                            limit: limit,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get commitments
     * Returns a list of commitments.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    CommitmentsService.prototype.getAllApiRequestOptions = function (_a) {
        var activated = _a.activated, activationLevel = _a.activationLevel, balance = _a.balance, select = _a.select, sort = _a.sort, offset = _a.offset, _b = _a.limit, limit = _b === void 0 ? 100 : _b;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/commitments", query: {
                'activated': activated,
                'activationLevel': activationLevel,
                'balance': balance,
                'select': select,
                'sort': sort,
                'offset': offset,
                'limit': limit,
            } });
    };
    /**
     * Get commitments count
     * Returns a number of commitments.
     * @returns number
     * @throws ApiError
     */
    CommitmentsService.prototype.getCount = function (_a) {
        var activated = _a.activated, balance = _a.balance;
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.getCountApiRequestOptions({
                            activated: activated,
                            balance: balance,
                        });
                        return [4 /*yield*/, __request(options)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    /**
     * **used to get the request options without making a http request**
     * Get commitments count
     * Returns a number of commitments.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    CommitmentsService.prototype.getCountApiRequestOptions = function (_a) {
        var activated = _a.activated, balance = _a.balance;
        return __assign(__assign({}, this.config), { method: 'GET', path: "/v1/commitments/count", query: {
                'activated': activated,
                'balance': balance,
            } });
    };
    return CommitmentsService;
}());
export { CommitmentsService };
