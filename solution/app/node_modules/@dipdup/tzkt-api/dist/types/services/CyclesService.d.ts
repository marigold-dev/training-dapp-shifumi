import type { Cycle } from '../models/Cycle';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { Symbols } from '../models/Symbols';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiOptions } from '../core/ApiOptions';
export declare class CyclesService {
    private readonly config;
    /**
     * creates a new service
     * @param config the configuration to use
     */
    constructor(config: ApiOptions);
    /**
     * Get cycles count
     * Returns the total number of cycles, including future cycles.
     * @returns number
     * @throws ApiError
     */
    getCount(): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get cycles count
     * Returns the total number of cycles, including future cycles.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCountApiRequestOptions(): ApiRequestOptions;
    /**
     * Get cycles
     * Returns a list of cycles, including future cycles.
     * @returns Cycle
     * @throws ApiError
     */
    get({ quote, snapshotIndex, select, sort, offset, limit, }: {
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters cycles by snapshot index (0..15) **/
        snapshotIndex?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts cycles by specified field. Supported fields: `index` (default, desc). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<Cycle>>;
    /**
     * **used to get the request options without making a http request**
     * Get cycles
     * Returns a list of cycles, including future cycles.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getApiRequestOptions({ quote, snapshotIndex, select, sort, offset, limit, }: {
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters cycles by snapshot index (0..15) **/
        snapshotIndex?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts cycles by specified field. Supported fields: `index` (default, desc). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get cycle by index
     * Returns a cycle at the specified index.
     * @returns Cycle
     * @throws ApiError
     */
    getByIndex({ index, quote, }: {
        /** Cycle index starting from zero **/
        index: number;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
    }): Promise<Cycle>;
    /**
     * **used to get the request options without making a http request**
     * Get cycle by index
     * Returns a cycle at the specified index.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByIndexApiRequestOptions({ index, quote, }: {
        /** Cycle index starting from zero **/
        index: number;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
    }): ApiRequestOptions;
}
