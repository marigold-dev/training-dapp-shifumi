import type { BoolParameter } from '../models/BoolParameter';
import type { Delegate } from '../models/Delegate';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiOptions } from '../core/ApiOptions';
export declare class DelegatesService {
    private readonly config;
    /**
     * creates a new service
     * @param config the configuration to use
     */
    constructor(config: ApiOptions);
    /**
     * Get delegates
     * Returns a list of delegate accounts.
     * @returns Delegate
     * @throws ApiError
     */
    get({ active, lastActivity, select, sort, offset, limit, }: {
        /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
        active?: BoolParameter | null;
        /** Filters delegates by last activity level (where the delegate was updated) **/
        lastActivity?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts delegators by specified field. Supported fields: `id` (default), `activationLevel`, `deactivationLevel`, `stakingBalance`, `balance`, `numDelegators`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<Delegate>>;
    /**
     * **used to get the request options without making a http request**
     * Get delegates
     * Returns a list of delegate accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getApiRequestOptions({ active, lastActivity, select, sort, offset, limit, }: {
        /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
        active?: BoolParameter | null;
        /** Filters delegates by last activity level (where the delegate was updated) **/
        lastActivity?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts delegators by specified field. Supported fields: `id` (default), `activationLevel`, `deactivationLevel`, `stakingBalance`, `balance`, `numDelegators`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get delegates count
     * Returns a number of delegate accounts.
     * @returns number
     * @throws ApiError
     */
    getCount({ active, }: {
        /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
        active?: BoolParameter | null;
    }): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get delegates count
     * Returns a number of delegate accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCountApiRequestOptions({ active, }: {
        /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) **/
        active?: BoolParameter | null;
    }): ApiRequestOptions;
    /**
     * Get delegate by address
     * Returns a delegate with the specified address.
     * @returns Delegate
     * @throws ApiError
     */
    getByAddress({ address, }: {
        /** Delegate address (starting with tz) **/
        address: string | null;
    }): Promise<Delegate>;
    /**
     * **used to get the request options without making a http request**
     * Get delegate by address
     * Returns a delegate with the specified address.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByAddressApiRequestOptions({ address, }: {
        /** Delegate address (starting with tz) **/
        address: string | null;
    }): ApiRequestOptions;
}
