import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { Proposal } from '../models/Proposal';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { VoterSnapshot } from '../models/VoterSnapshot';
import type { VoterStatusParameter } from '../models/VoterStatusParameter';
import type { VotingEpoch } from '../models/VotingEpoch';
import type { VotingPeriod } from '../models/VotingPeriod';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiOptions } from '../core/ApiOptions';
export declare class VotingService {
    private readonly config;
    /**
     * creates a new service
     * @param config the configuration to use
     */
    constructor(config: ApiOptions);
    /**
     * Get proposals count
     * Returns the total number of protocol proposals.
     * @returns number
     * @throws ApiError
     */
    getProposalsCount(): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get proposals count
     * Returns the total number of protocol proposals.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getProposalsCountApiRequestOptions(): ApiRequestOptions;
    /**
     * Get proposals
     * Returns a list of protocol proposals.
     * @returns Proposal
     * @throws ApiError
     */
    getProposals({ epoch, select, sort, offset, limit, }: {
        /** Filters proposals by voting epoch **/
        epoch?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts proposals by specified field. Supported fields: `id` (default), `upvotes`, `rolls`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<Proposal>>;
    /**
     * **used to get the request options without making a http request**
     * Get proposals
     * Returns a list of protocol proposals.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getProposalsApiRequestOptions({ epoch, select, sort, offset, limit, }: {
        /** Filters proposals by voting epoch **/
        epoch?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts proposals by specified field. Supported fields: `id` (default), `upvotes`, `rolls`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get proposal by hash
     * Returns a protocol proposal with the specified hash.
     * @returns Proposal
     * @throws ApiError
     */
    getProposalByHash({ hash, }: {
        /** Proposal hash **/
        hash: string | null;
    }): Promise<Proposal>;
    /**
     * **used to get the request options without making a http request**
     * Get proposal by hash
     * Returns a protocol proposal with the specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getProposalByHashApiRequestOptions({ hash, }: {
        /** Proposal hash **/
        hash: string | null;
    }): ApiRequestOptions;
    /**
     * Get voting periods
     * Returns a list of voting periods.
     * @returns VotingPeriod
     * @throws ApiError
     */
    getPeriods({ select, sort, offset, limit, }: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts voting periods by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<VotingPeriod>>;
    /**
     * **used to get the request options without making a http request**
     * Get voting periods
     * Returns a list of voting periods.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getPeriodsApiRequestOptions({ select, sort, offset, limit, }: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts voting periods by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get voting period by index
     * Returns a voting period at the specified index.
     * @returns VotingPeriod
     * @throws ApiError
     */
    getPeriod({ index, }: {
        /** Voting period index starting from zero **/
        index: number;
    }): Promise<VotingPeriod>;
    /**
     * **used to get the request options without making a http request**
     * Get voting period by index
     * Returns a voting period at the specified index.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getPeriodApiRequestOptions({ index, }: {
        /** Voting period index starting from zero **/
        index: number;
    }): ApiRequestOptions;
    /**
     * Get current voting period
     * Returns current voting period.
     * @returns VotingPeriod
     * @throws ApiError
     */
    getCurrentPeriod(): Promise<VotingPeriod>;
    /**
     * **used to get the request options without making a http request**
     * Get current voting period
     * Returns current voting period.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCurrentPeriodApiRequestOptions(): ApiRequestOptions;
    /**
     * Get period voters
     * Returns voters from the voting period at the specified index.
     * @returns VoterSnapshot
     * @throws ApiError
     */
    getPeriodVotersAll({ index, status, sort, offset, limit, }: {
        /** Voting period index starting from zero **/
        index: number;
        /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
        status?: VoterStatusParameter | null;
        /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<VoterSnapshot>>;
    /**
     * **used to get the request options without making a http request**
     * Get period voters
     * Returns voters from the voting period at the specified index.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getPeriodVotersAllApiRequestOptions({ index, status, sort, offset, limit, }: {
        /** Voting period index starting from zero **/
        index: number;
        /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
        status?: VoterStatusParameter | null;
        /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get period voter
     * Returns a voter with the specified address from the voting period at the specified index.
     * @returns VoterSnapshot
     * @throws ApiError
     */
    getPeriodVoter({ index, address, }: {
        /** Voting period index starting from zero **/
        index: number;
        /** Voter address **/
        address: string | null;
    }): Promise<VoterSnapshot>;
    /**
     * **used to get the request options without making a http request**
     * Get period voter
     * Returns a voter with the specified address from the voting period at the specified index.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getPeriodVoterApiRequestOptions({ index, address, }: {
        /** Voting period index starting from zero **/
        index: number;
        /** Voter address **/
        address: string | null;
    }): ApiRequestOptions;
    /**
     * Get current period voters
     * Returns voters from the current period.
     * @returns VoterSnapshot
     * @throws ApiError
     */
    getPeriodVoters({ status, sort, offset, limit, }: {
        /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
        status?: VoterStatusParameter | null;
        /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<VoterSnapshot>>;
    /**
     * **used to get the request options without making a http request**
     * Get current period voters
     * Returns voters from the current period.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getPeriodVotersApiRequestOptions({ status, sort, offset, limit, }: {
        /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) **/
        status?: VoterStatusParameter | null;
        /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get current period voter
     * Returns a voter with the specified address from the current period.
     * @returns VoterSnapshot
     * @throws ApiError
     */
    getPeriodVoter2({ address, }: {
        /** Voter address **/
        address: string | null;
    }): Promise<VoterSnapshot>;
    /**
     * **used to get the request options without making a http request**
     * Get current period voter
     * Returns a voter with the specified address from the current period.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getPeriodVoter2ApiRequestOptions({ address, }: {
        /** Voter address **/
        address: string | null;
    }): ApiRequestOptions;
    /**
     * Get voting epochs
     * Returns a list of voting epochs.
     * @returns VotingEpoch
     * @throws ApiError
     */
    getEpochs({ sort, offset, limit, }: {
        /** Sorts voting epochs by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<VotingEpoch>>;
    /**
     * **used to get the request options without making a http request**
     * Get voting epochs
     * Returns a list of voting epochs.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getEpochsApiRequestOptions({ sort, offset, limit, }: {
        /** Sorts voting epochs by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get voting epoch by index
     * Returns a voting epoch at the specified index.
     * @returns VotingEpoch
     * @throws ApiError
     */
    getEpoch({ index, }: {
        /** Voting epoch index starting from zero **/
        index: number;
    }): Promise<VotingEpoch>;
    /**
     * **used to get the request options without making a http request**
     * Get voting epoch by index
     * Returns a voting epoch at the specified index.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getEpochApiRequestOptions({ index, }: {
        /** Voting epoch index starting from zero **/
        index: number;
    }): ApiRequestOptions;
    /**
     * Get current voting epoch
     * Returns the current voting epoch
     * @returns VotingEpoch
     * @throws ApiError
     */
    getCurrentEpoch(): Promise<VotingEpoch>;
    /**
     * **used to get the request options without making a http request**
     * Get current voting epoch
     * Returns the current voting epoch
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCurrentEpochApiRequestOptions(): ApiRequestOptions;
    /**
     * Get latest voting
     * Returns the latest epoch with at least one proposal
     * @returns VotingEpoch
     * @throws ApiError
     */
    getLatestVoting(): Promise<VotingEpoch>;
    /**
     * **used to get the request options without making a http request**
     * Get latest voting
     * Returns the latest epoch with at least one proposal
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getLatestVotingApiRequestOptions(): ApiRequestOptions;
}
