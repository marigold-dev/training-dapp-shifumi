import type { BakerRewards } from '../models/BakerRewards';
import type { DelegatorRewards } from '../models/DelegatorRewards';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { RewardSplit } from '../models/RewardSplit';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { SplitDelegator } from '../models/SplitDelegator';
import type { Symbols } from '../models/Symbols';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiOptions } from '../core/ApiOptions';
export declare class RewardsService {
    private readonly config;
    /**
     * creates a new service
     * @param config the configuration to use
     */
    constructor(config: ApiOptions);
    /**
     * Get baker cycle rewards count
     * Returns total number of cycles where the baker was active
     * @returns number
     * @throws ApiError
     */
    getBakerRewardsCount({ address, }: {
        /** Baker address **/
        address: string | null;
    }): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get baker cycle rewards count
     * Returns total number of cycles where the baker was active
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getBakerRewardsCountApiRequestOptions({ address, }: {
        /** Baker address **/
        address: string | null;
    }): ApiRequestOptions;
    /**
     * Get baker cycle rewards
     * Returns a list of baker rewards for every cycle, including future cycles.
     * @returns BakerRewards
     * @throws ApiError
     */
    getBakerRewards({ address, quote, cycle, select, sort, offset, limit, }: {
        /** Baker address. **/
        address: string | null;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters rewards by cycle. **/
        cycle?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<BakerRewards>>;
    /**
     * **used to get the request options without making a http request**
     * Get baker cycle rewards
     * Returns a list of baker rewards for every cycle, including future cycles.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getBakerRewardsApiRequestOptions({ address, quote, cycle, select, sort, offset, limit, }: {
        /** Baker address. **/
        address: string | null;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters rewards by cycle. **/
        cycle?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get baker cycle rewards by cycle
     * Returns baker cycle rewards for the specified cycle.
     * @returns BakerRewards
     * @throws ApiError
     */
    getBakerRewardsByCycle({ address, cycle, quote, }: {
        /** Baker address **/
        address: string | null;
        /** Rewards cycle **/
        cycle: number;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
    }): Promise<BakerRewards>;
    /**
     * **used to get the request options without making a http request**
     * Get baker cycle rewards by cycle
     * Returns baker cycle rewards for the specified cycle.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getBakerRewardsByCycleApiRequestOptions({ address, cycle, quote, }: {
        /** Baker address **/
        address: string | null;
        /** Rewards cycle **/
        cycle: number;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
    }): ApiRequestOptions;
    /**
     * Get delegator cycle rewards count
     * Returns total number of cycles where the delegator was delegated to an active baker
     * @returns number
     * @throws ApiError
     */
    getDelegatorRewardsCount({ address, }: {
        /** Delegator address **/
        address: string | null;
    }): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get delegator cycle rewards count
     * Returns total number of cycles where the delegator was delegated to an active baker
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getDelegatorRewardsCountApiRequestOptions({ address, }: {
        /** Delegator address **/
        address: string | null;
    }): ApiRequestOptions;
    /**
     * Get delegator cycle rewards
     * Returns a list of delegator rewards for every cycle, including future cycles.
     * @returns DelegatorRewards
     * @throws ApiError
     */
    getDelegatorRewards({ address, quote, cycle, select, sort, offset, limit, }: {
        /** Delegator address. **/
        address: string | null;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters rewards by cycle. **/
        cycle?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<DelegatorRewards>>;
    /**
     * **used to get the request options without making a http request**
     * Get delegator cycle rewards
     * Returns a list of delegator rewards for every cycle, including future cycles.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getDelegatorRewardsApiRequestOptions({ address, quote, cycle, select, sort, offset, limit, }: {
        /** Delegator address. **/
        address: string | null;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters rewards by cycle. **/
        cycle?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get delegator cycle rewards by cycle
     * Returns delegator cycle rewards for the specified cycle.
     * @returns DelegatorRewards
     * @throws ApiError
     */
    getDelegatorRewardsByCycle({ address, cycle, quote, }: {
        /** Delegator address **/
        address: string | null;
        /** Rewards cycle **/
        cycle: number;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
    }): Promise<DelegatorRewards>;
    /**
     * **used to get the request options without making a http request**
     * Get delegator cycle rewards by cycle
     * Returns delegator cycle rewards for the specified cycle.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getDelegatorRewardsByCycleApiRequestOptions({ address, cycle, quote, }: {
        /** Delegator address **/
        address: string | null;
        /** Rewards cycle **/
        cycle: number;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
    }): ApiRequestOptions;
    /**
     * Get reward split
     * Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares.
     * @returns RewardSplit
     * @throws ApiError
     */
    getRewardSplit({ address, cycle, offset, limit, }: {
        /** Baker address **/
        address: string | null;
        /** Rewards cycle **/
        cycle: number;
        /** Specifies how many delegators in the reward split should be skipped **/
        offset: number;
        /** Maximum number of delegators to return **/
        limit?: number;
    }): Promise<RewardSplit>;
    /**
     * **used to get the request options without making a http request**
     * Get reward split
     * Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getRewardSplitApiRequestOptions({ address, cycle, offset, limit, }: {
        /** Baker address **/
        address: string | null;
        /** Rewards cycle **/
        cycle: number;
        /** Specifies how many delegators in the reward split should be skipped **/
        offset: number;
        /** Maximum number of delegators to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get reward split delegator
     * Returns delegator from the reward split for the specified cycle.
     * @returns SplitDelegator
     * @throws ApiError
     */
    getRewardSplitDelegator({ baker, cycle, delegator, }: {
        /** Baker address **/
        baker: string | null;
        /** Reward split cycle **/
        cycle: number;
        /** Delegator address **/
        delegator: string | null;
    }): Promise<SplitDelegator>;
    /**
     * **used to get the request options without making a http request**
     * Get reward split delegator
     * Returns delegator from the reward split for the specified cycle.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getRewardSplitDelegatorApiRequestOptions({ baker, cycle, delegator, }: {
        /** Baker address **/
        baker: string | null;
        /** Reward split cycle **/
        cycle: number;
        /** Delegator address **/
        delegator: string | null;
    }): ApiRequestOptions;
}
