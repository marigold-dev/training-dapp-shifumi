import type { OffsetParameter } from '../models/OffsetParameter';
import type { Protocol } from '../models/Protocol';
import type { SortParameter } from '../models/SortParameter';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiOptions } from '../core/ApiOptions';
export declare class ProtocolsService {
    private readonly config;
    /**
     * creates a new service
     * @param config the configuration to use
     */
    constructor(config: ApiOptions);
    /**
     * Get protocols count
     * Returns the total number of protocols.
     * @returns number
     * @throws ApiError
     */
    getCount(): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get protocols count
     * Returns the total number of protocols.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCountApiRequestOptions(): ApiRequestOptions;
    /**
     * Get protocols
     * Returns a list of protocols.
     * @returns Protocol
     * @throws ApiError
     */
    get({ sort, offset, limit, }: {
        /** Sorts protocols by specified field. Supported fields: `id` (default), `code`, `firstLevel`, `lastLevel`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<Protocol>>;
    /**
     * **used to get the request options without making a http request**
     * Get protocols
     * Returns a list of protocols.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getApiRequestOptions({ sort, offset, limit, }: {
        /** Sorts protocols by specified field. Supported fields: `id` (default), `code`, `firstLevel`, `lastLevel`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get current protocol
     * Returns current protocol.
     * @returns Protocol
     * @throws ApiError
     */
    getCurrent(): Promise<Protocol>;
    /**
     * **used to get the request options without making a http request**
     * Get current protocol
     * Returns current protocol.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCurrentApiRequestOptions(): ApiRequestOptions;
    /**
     * Get protocol by code
     * Returns a protocol with the specified proto code.
     * @returns Protocol
     * @throws ApiError
     */
    getByCode({ code, }: {
        /** Protocol code (e.g. 4 for Athens, 5 for Babylon, etc) **/
        code: number;
    }): Promise<Protocol>;
    /**
     * **used to get the request options without making a http request**
     * Get protocol by code
     * Returns a protocol with the specified proto code.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByCodeApiRequestOptions({ code, }: {
        /** Protocol code (e.g. 4 for Athens, 5 for Babylon, etc) **/
        code: number;
    }): ApiRequestOptions;
    /**
     * Get protocol by hash
     * Returns a protocol with the specified hash.
     * @returns Protocol
     * @throws ApiError
     */
    getByHash({ hash, }: {
        /** Protocol hash **/
        hash: string | null;
    }): Promise<Protocol>;
    /**
     * **used to get the request options without making a http request**
     * Get protocol by hash
     * Returns a protocol with the specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByHashApiRequestOptions({ hash, }: {
        /** Protocol hash **/
        hash: string | null;
    }): ApiRequestOptions;
    /**
     * Get protocol by cycle
     * Returns a protocol at the specified cycle.
     * @returns Protocol
     * @throws ApiError
     */
    getByCycle({ cycle, }: {
        /** Cycle index **/
        cycle: number;
    }): Promise<Protocol>;
    /**
     * **used to get the request options without making a http request**
     * Get protocol by cycle
     * Returns a protocol at the specified cycle.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByCycleApiRequestOptions({ cycle, }: {
        /** Cycle index **/
        cycle: number;
    }): ApiRequestOptions;
}
