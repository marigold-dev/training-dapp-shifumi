import type { AccountParameter } from '../models/AccountParameter';
import type { BigMap } from '../models/BigMap';
import type { BigMapKey } from '../models/BigMapKey';
import type { BigMapKeyHistorical } from '../models/BigMapKeyHistorical';
import type { BigMapKeyUpdate } from '../models/BigMapKeyUpdate';
import type { BigMapTagsParameter } from '../models/BigMapTagsParameter';
import type { Contract } from '../models/Contract';
import type { ContractInterface } from '../models/ContractInterface';
import type { ContractKindParameter } from '../models/ContractKindParameter';
import type { Entrypoint } from '../models/Entrypoint';
import type { IMicheline } from '../models/IMicheline';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { JsonParameter } from '../models/JsonParameter';
import type { MichelineFormat } from '../models/MichelineFormat';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { StorageRecord } from '../models/StorageRecord';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiOptions } from '../core/ApiOptions';
export declare class ContractsService {
    private readonly config;
    /**
     * creates a new service
     * @param config the configuration to use
     */
    constructor(config: ApiOptions);
    /**
     * Get contracts
     * Returns a list of contract accounts.
     * @returns Contract
     * @throws ApiError
     */
    get({ kind, creator, manager, delegate, lastActivity, typeHash, codeHash, select, sort, offset, limit, includeStorage, }: {
        /** Contract kind to filter by (`delegator_contract` or `smart_contract`) **/
        kind?: ContractKindParameter | null;
        /** Filters contracts by creator. Allowed fields for `.eqx` mode: `manager`, `delegate`. **/
        creator?: AccountParameter | null;
        /** Filters contracts by manager. Allowed fields for `.eqx` mode: `creator`, `delegate`. **/
        manager?: AccountParameter | null;
        /** Filters contracts by delegate. Allowed fields for `.eqx` mode: `manager`, `creator`. **/
        delegate?: AccountParameter | null;
        /** Filters contracts by last activity level (where the contract was updated) **/
        lastActivity?: Int32Parameter | null;
        /** Filters contracts by 32-bit hash of contract parameter and storage types (helpful for searching similar contracts) **/
        typeHash?: Int32Parameter | null;
        /** Filters contracts by 32-bit hash of contract code (helpful for searching same contracts) **/
        codeHash?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
        /** Specifies whether to include contract storage value in response. **/
        includeStorage?: boolean;
    }): Promise<Array<Contract>>;
    /**
     * **used to get the request options without making a http request**
     * Get contracts
     * Returns a list of contract accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getApiRequestOptions({ kind, creator, manager, delegate, lastActivity, typeHash, codeHash, select, sort, offset, limit, includeStorage, }: {
        /** Contract kind to filter by (`delegator_contract` or `smart_contract`) **/
        kind?: ContractKindParameter | null;
        /** Filters contracts by creator. Allowed fields for `.eqx` mode: `manager`, `delegate`. **/
        creator?: AccountParameter | null;
        /** Filters contracts by manager. Allowed fields for `.eqx` mode: `creator`, `delegate`. **/
        manager?: AccountParameter | null;
        /** Filters contracts by delegate. Allowed fields for `.eqx` mode: `manager`, `creator`. **/
        delegate?: AccountParameter | null;
        /** Filters contracts by last activity level (where the contract was updated) **/
        lastActivity?: Int32Parameter | null;
        /** Filters contracts by 32-bit hash of contract parameter and storage types (helpful for searching similar contracts) **/
        typeHash?: Int32Parameter | null;
        /** Filters contracts by 32-bit hash of contract code (helpful for searching same contracts) **/
        codeHash?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
        /** Specifies whether to include contract storage value in response. **/
        includeStorage?: boolean;
    }): ApiRequestOptions;
    /**
     * Get contracts count
     * Returns a number of contract accounts.
     * @returns number
     * @throws ApiError
     */
    getCount({ kind, }: {
        /** Contract kind to filter by (`delegator_contract` or `smart_contract`) **/
        kind?: ContractKindParameter | null;
    }): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get contracts count
     * Returns a number of contract accounts.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCountApiRequestOptions({ kind, }: {
        /** Contract kind to filter by (`delegator_contract` or `smart_contract`) **/
        kind?: ContractKindParameter | null;
    }): ApiRequestOptions;
    /**
     * Get contract by address
     * Returns a contract account with the specified address.
     * @returns Contract
     * @throws ApiError
     */
    getByAddress({ address, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
    }): Promise<Contract>;
    /**
     * **used to get the request options without making a http request**
     * Get contract by address
     * Returns a contract account with the specified address.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByAddressApiRequestOptions({ address, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
    }): ApiRequestOptions;
    /**
     * Get same contracts
     * Returns contracts which have the same script as the specified one.
     * Note, contract scripts are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns Contract
     * @throws ApiError
     */
    getSame({ address, select, sort, offset, limit, includeStorage, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
        /** Specifies whether to include contract storage value in response. **/
        includeStorage?: boolean;
    }): Promise<Array<Contract>>;
    /**
     * **used to get the request options without making a http request**
     * Get same contracts
     * Returns contracts which have the same script as the specified one.
     * Note, contract scripts are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getSameApiRequestOptions({ address, select, sort, offset, limit, includeStorage, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
        /** Specifies whether to include contract storage value in response. **/
        includeStorage?: boolean;
    }): ApiRequestOptions;
    /**
     * Get similar contracts
     * Returns contracts which have the same interface (parameter and storage types) as the specified one.
     * Note, contract parameter and storage types are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns Contract
     * @throws ApiError
     */
    getSimilar({ address, select, sort, offset, limit, includeStorage, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
        /** Specifies whether to include contract storage value in response. **/
        includeStorage?: boolean;
    }): Promise<Array<Contract>>;
    /**
     * **used to get the request options without making a http request**
     * Get similar contracts
     * Returns contracts which have the same interface (parameter and storage types) as the specified one.
     * Note, contract parameter and storage types are compared by 32-bit hash, so in very rare cases there may be collisions.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getSimilarApiRequestOptions({ address, select, sort, offset, limit, includeStorage, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
        /** Specifies whether to include contract storage value in response. **/
        includeStorage?: boolean;
    }): ApiRequestOptions;
    /**
     * Get contract code
     * Returns a code of the specified contract.
     * @returns any
     * @throws ApiError
     */
    getCode({ address, format, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Code format (`0` - micheline, `1` - michelson, `2` - bytes (base64)) **/
        format: number;
    }): Promise<any>;
    /**
     * **used to get the request options without making a http request**
     * Get contract code
     * Returns a code of the specified contract.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCodeApiRequestOptions({ address, format, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Code format (`0` - micheline, `1` - michelson, `2` - bytes (base64)) **/
        format: number;
    }): ApiRequestOptions;
    /**
     * Get JSON Schema [2020-12] interface for the contract
     * Returns standard JSON Schema for contract storage, entrypoints, and Big_map entries.
     * @returns ContractInterface
     * @throws ApiError
     */
    getInterface({ address, }: {
        /** Contract address **/
        address: string | null;
    }): Promise<ContractInterface>;
    /**
     * **used to get the request options without making a http request**
     * Get JSON Schema [2020-12] interface for the contract
     * Returns standard JSON Schema for contract storage, entrypoints, and Big_map entries.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getInterfaceApiRequestOptions({ address, }: {
        /** Contract address **/
        address: string | null;
    }): ApiRequestOptions;
    /**
     * Get contract entrypoints
     * Returns entrypoints of the specified contract.
     * @returns Entrypoint
     * @throws ApiError
     */
    getEntrypoints({ address, all, json, micheline, michelson, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** If true, returns all entrypoints, including unused ones.
         * Unused means that the entrypoint can be normalized to a more specific one.
         * For example here `(or %entry1 (unit %entry2) (nat %entry3))` the `%entry1` is unused entrypoint
         * because it can be normalized to `%entry2` or `%entry3` **/
        all?: boolean;
        /** Include parameters schema in human-readable JSON format **/
        json?: boolean;
        /** Include parameters schema in micheline format **/
        micheline?: boolean;
        /** Include parameters schema in michelson format **/
        michelson?: boolean;
    }): Promise<Array<Entrypoint>>;
    /**
     * **used to get the request options without making a http request**
     * Get contract entrypoints
     * Returns entrypoints of the specified contract.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getEntrypointsApiRequestOptions({ address, all, json, micheline, michelson, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** If true, returns all entrypoints, including unused ones.
         * Unused means that the entrypoint can be normalized to a more specific one.
         * For example here `(or %entry1 (unit %entry2) (nat %entry3))` the `%entry1` is unused entrypoint
         * because it can be normalized to `%entry2` or `%entry3` **/
        all?: boolean;
        /** Include parameters schema in human-readable JSON format **/
        json?: boolean;
        /** Include parameters schema in micheline format **/
        micheline?: boolean;
        /** Include parameters schema in michelson format **/
        michelson?: boolean;
    }): ApiRequestOptions;
    /**
     * Get entrypoint by name
     * Returns contract's entrypoint with specified name.
     * @returns Entrypoint
     * @throws ApiError
     */
    getEntrypointByName({ address, name, json, micheline, michelson, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Entrypoint name **/
        name: string | null;
        /** Include parameters schema in human-readable JSON format **/
        json?: boolean;
        /** Include parameters schema in micheline format **/
        micheline?: boolean;
        /** Include parameters schema in michelson format **/
        michelson?: boolean;
    }): Promise<Entrypoint>;
    /**
     * **used to get the request options without making a http request**
     * Get entrypoint by name
     * Returns contract's entrypoint with specified name.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getEntrypointByNameApiRequestOptions({ address, name, json, micheline, michelson, }: {
        /** Contract address (starting with KT) **/
        address: string | null;
        /** Entrypoint name **/
        name: string | null;
        /** Include parameters schema in human-readable JSON format **/
        json?: boolean;
        /** Include parameters schema in micheline format **/
        micheline?: boolean;
        /** Include parameters schema in michelson format **/
        michelson?: boolean;
    }): ApiRequestOptions;
    /**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns any
     * @throws ApiError
     */
    buildEntrypointParameters({ address, name, value, }: {
        /** Contract address **/
        address: string | null;
        /** Entrypoint name **/
        name: string | null;
        /** Json parameters **/
        value?: string | null;
    }): Promise<any>;
    /**
     * **used to get the request options without making a http request**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    buildEntrypointParametersApiRequestOptions({ address, name, value, }: {
        /** Contract address **/
        address: string | null;
        /** Entrypoint name **/
        name: string | null;
        /** Json parameters **/
        value?: string | null;
    }): ApiRequestOptions;
    /**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns any
     * @throws ApiError
     */
    buildEntrypointParameters2({ address, name, requestBody, }: {
        /** Contract address **/
        address: string | null;
        /** Entrypoint name **/
        name: string | null;
        /** Json parameters **/
        requestBody: any;
    }): Promise<any>;
    /**
     * **used to get the request options without making a http request**
     * Build entrypoint parameters
     * Returns micheline parameters converted from its JSON representation.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    buildEntrypointParameters2ApiRequestOptions({ address, name, requestBody, }: {
        /** Contract address **/
        address: string | null;
        /** Entrypoint name **/
        name: string | null;
        /** Json parameters **/
        requestBody: any;
    }): ApiRequestOptions;
    /**
     * Get contract storage
     * Returns contract storage value in JSON format.
     * @returns any
     * @throws ApiError
     */
    getStorage({ address, level, path, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage value should be taken. If `0` or not specified, the current value will be returned. **/
        level: number;
        /** Path in the JSON value (point-separated list of field names, e.g. `path=settings.refund_time` to return **/
        path?: string | null;
    }): Promise<any>;
    /**
     * **used to get the request options without making a http request**
     * Get contract storage
     * Returns contract storage value in JSON format.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getStorageApiRequestOptions({ address, level, path, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage value should be taken. If `0` or not specified, the current value will be returned. **/
        level: number;
        /** Path in the JSON value (point-separated list of field names, e.g. `path=settings.refund_time` to return **/
        path?: string | null;
    }): ApiRequestOptions;
    /**
     * Get contract storage schema
     * Returns JSON schema of the contract storage.
     * @returns any
     * @throws ApiError
     */
    getStorageSchema({ address, level, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage schema should be taken. If `0` or not specified, the current schema will be returned. **/
        level: number;
    }): Promise<any>;
    /**
     * **used to get the request options without making a http request**
     * Get contract storage schema
     * Returns JSON schema of the contract storage.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getStorageSchemaApiRequestOptions({ address, level, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage schema should be taken. If `0` or not specified, the current schema will be returned. **/
        level: number;
    }): ApiRequestOptions;
    /**
     * Get contract storage history
     * Returns contract storage historical values.
     * @returns StorageRecord
     * @throws ApiError
     */
    getStorageHistory({ address, lastId, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Id of the last item received (for pagination) **/
        lastId: number;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<StorageRecord>>;
    /**
     * **used to get the request options without making a http request**
     * Get contract storage history
     * Returns contract storage historical values.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getStorageHistoryApiRequestOptions({ address, lastId, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Id of the last item received (for pagination) **/
        lastId: number;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get raw contract storage
     * Returns raw contract storage value in micheline format.
     * @returns IMicheline
     * @throws ApiError
     */
    getRawStorage({ address, level, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage value should be taken. If `0` or not specified, the current value will be returned. **/
        level: number;
    }): Promise<IMicheline>;
    /**
     * **used to get the request options without making a http request**
     * Get raw contract storage
     * Returns raw contract storage value in micheline format.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getRawStorageApiRequestOptions({ address, level, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage value should be taken. If `0` or not specified, the current value will be returned. **/
        level: number;
    }): ApiRequestOptions;
    /**
     * Get raw contract storage schema
     * Returns micheline schema (type) of the contract storage.
     * @returns IMicheline
     * @throws ApiError
     */
    getRawStorageSchema({ address, level, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage schema should be taken. If `0` or not specified, the current schema will be returned. **/
        level: number;
    }): Promise<IMicheline>;
    /**
     * **used to get the request options without making a http request**
     * Get raw contract storage schema
     * Returns micheline schema (type) of the contract storage.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getRawStorageSchemaApiRequestOptions({ address, level, }: {
        /** Contract address **/
        address: string | null;
        /** Level at which storage schema should be taken. If `0` or not specified, the current schema will be returned. **/
        level: number;
    }): ApiRequestOptions;
    /**
     * Get raw contract storage history
     * Returns raw contract storage historical values.
     * @returns StorageRecord
     * @throws ApiError
     */
    getRawStorageHistory({ address, lastId, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Id of the last item received (for pagination) **/
        lastId: number;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<StorageRecord>>;
    /**
     * **used to get the request options without making a http request**
     * Get raw contract storage history
     * Returns raw contract storage historical values.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getRawStorageHistoryApiRequestOptions({ address, lastId, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Id of the last item received (for pagination) **/
        lastId: number;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get contract bigmaps
     * Returns all active bigmaps allocated in the contract storage.
     * @returns BigMap
     * @throws ApiError
     */
    getBigMaps({ address, micheline, tags, select, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Filters bigmaps tags (`token_metadata` - tzip-12, `metadata` - tzip-16). **/
        tags?: BigMapTagsParameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object.
         * If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts bigmaps by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<BigMap>>;
    /**
     * **used to get the request options without making a http request**
     * Get contract bigmaps
     * Returns all active bigmaps allocated in the contract storage.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getBigMapsApiRequestOptions({ address, micheline, tags, select, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Filters bigmaps tags (`token_metadata` - tzip-12, `metadata` - tzip-16). **/
        tags?: BigMapTagsParameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object.
         * If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts bigmaps by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get bigmap by name
     * Returns contract bigmap with the specified name or storage path.
     * @returns BigMap
     * @throws ApiError
     */
    getBigMapByName({ address, name, micheline, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
    }): Promise<BigMap>;
    /**
     * **used to get the request options without making a http request**
     * Get bigmap by name
     * Returns contract bigmap with the specified name or storage path.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getBigMapByNameApiRequestOptions({ address, name, micheline, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
    }): ApiRequestOptions;
    /**
     * Get bigmap keys
     * Returns keys of a contract bigmap with the specified name.
     * @returns BigMapKey
     * @throws ApiError
     */
    getBigMapByNameKeys({ address, name, micheline, active, key, value, lastLevel, select, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Filters keys by status: `true` - active, `false` - removed. **/
        active?: boolean | null;
        /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
        key?: JsonParameter | null;
        /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
        value?: JsonParameter | null;
        /** Filters bigmap keys by the last update level. **/
        lastLevel?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `updates`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<BigMapKey>>;
    /**
     * **used to get the request options without making a http request**
     * Get bigmap keys
     * Returns keys of a contract bigmap with the specified name.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getBigMapByNameKeysApiRequestOptions({ address, name, micheline, active, key, value, lastLevel, select, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Filters keys by status: `true` - active, `false` - removed. **/
        active?: boolean | null;
        /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
        key?: JsonParameter | null;
        /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
        value?: JsonParameter | null;
        /** Filters bigmap keys by the last update level. **/
        lastLevel?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `updates`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get bigmap key
     * Returns the specified bigmap key.
     * @returns BigMapKey
     * @throws ApiError
     */
    getKey({ address, name, key, micheline, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
         * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
        key: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
    }): Promise<BigMapKey>;
    /**
     * **used to get the request options without making a http request**
     * Get bigmap key
     * Returns the specified bigmap key.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getKeyApiRequestOptions({ address, name, key, micheline, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
         * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
        key: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
    }): ApiRequestOptions;
    /**
     * Get bigmap key updates
     * Returns updates history for the specified bigmap key.
     * @returns BigMapKeyUpdate
     * @throws ApiError
     */
    getKeyUpdates({ address, name, key, micheline, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
         * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
        key: string | null;
        /** Format of the key value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Sorts bigmap updates by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<BigMapKeyUpdate>>;
    /**
     * **used to get the request options without making a http request**
     * Get bigmap key updates
     * Returns updates history for the specified bigmap key.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getKeyUpdatesApiRequestOptions({ address, name, key, micheline, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
         * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
        key: string | null;
        /** Format of the key value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Sorts bigmap updates by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get historical keys
     * Returns a list of bigmap keys at the specific block.
     * @returns BigMapKeyHistorical
     * @throws ApiError
     */
    getHistoricalKeys({ address, name, level, micheline, active, key, value, select, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Level of the block at which you want to get bigmap keys **/
        level: number;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Filters keys by status: `true` - active, `false` - removed. **/
        active?: boolean | null;
        /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
        key?: JsonParameter | null;
        /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
        value?: JsonParameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<BigMapKeyHistorical>>;
    /**
     * **used to get the request options without making a http request**
     * Get historical keys
     * Returns a list of bigmap keys at the specific block.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getHistoricalKeysApiRequestOptions({ address, name, level, micheline, active, key, value, select, sort, offset, limit, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Level of the block at which you want to get bigmap keys **/
        level: number;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
        /** Filters keys by status: `true` - active, `false` - removed. **/
        active?: boolean | null;
        /** Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`. **/
        key?: JsonParameter | null;
        /** Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`. **/
        value?: JsonParameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default). **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get historical key
     * Returns the specified bigmap key at the specific block.
     * @returns BigMapKeyHistorical
     * @throws ApiError
     */
    getKey2({ address, name, level, key, micheline, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Level of the block at which you want to get bigmap key **/
        level: number;
        /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
         * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
        key: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
    }): Promise<BigMapKeyHistorical>;
    /**
     * **used to get the request options without making a http request**
     * Get historical key
     * Returns the specified bigmap key at the specific block.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getKey2ApiRequestOptions({ address, name, level, key, micheline, }: {
        /** Contract address **/
        address: string | null;
        /** Bigmap name is the last piece of the bigmap storage path.
         * For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         * If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path. **/
        name: string | null;
        /** Level of the block at which you want to get bigmap key **/
        level: number;
        /** Either a key hash (`expr123...`) or a plain value (`abcde...`).
         * Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","token":123}`. **/
        key: string | null;
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string **/
        micheline: MichelineFormat;
    }): ApiRequestOptions;
}
