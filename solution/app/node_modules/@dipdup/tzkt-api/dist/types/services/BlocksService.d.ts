import type { AccountParameter } from '../models/AccountParameter';
import type { Block } from '../models/Block';
import type { DateTimeParameter } from '../models/DateTimeParameter';
import type { Int32Parameter } from '../models/Int32Parameter';
import type { MichelineFormat } from '../models/MichelineFormat';
import type { OffsetParameter } from '../models/OffsetParameter';
import type { SelectParameter } from '../models/SelectParameter';
import type { SortParameter } from '../models/SortParameter';
import type { Symbols } from '../models/Symbols';
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiOptions } from '../core/ApiOptions';
export declare class BlocksService {
    private readonly config;
    /**
     * creates a new service
     * @param config the configuration to use
     */
    constructor(config: ApiOptions);
    /**
     * Get blocks count
     * Returns the total number of blocks.
     * @returns number
     * @throws ApiError
     */
    getCount(): Promise<number>;
    /**
     * **used to get the request options without making a http request**
     * Get blocks count
     * Returns the total number of blocks.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getCountApiRequestOptions(): ApiRequestOptions;
    /**
     * Get blocks
     * Returns a list of blocks.
     * @returns Block
     * @throws ApiError
     */
    get({ quote, baker, level, timestamp, priority, select, sort, offset, limit, }: {
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters blocks by baker. Allowed fields for `.eqx` mode: none. **/
        baker?: AccountParameter | null;
        /** Filters blocks by level. **/
        level?: Int32Parameter | null;
        /** Filters blocks by timestamp. **/
        timestamp?: DateTimeParameter | null;
        /** Filters blocks by priority. **/
        priority?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts blocks by specified field. Supported fields: `id` (default), `level`, `priority`, `validations`, `reward`, `fees`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): Promise<Array<Block>>;
    /**
     * **used to get the request options without making a http request**
     * Get blocks
     * Returns a list of blocks.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getApiRequestOptions({ quote, baker, level, timestamp, priority, select, sort, offset, limit, }: {
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Filters blocks by baker. Allowed fields for `.eqx` mode: none. **/
        baker?: AccountParameter | null;
        /** Filters blocks by level. **/
        level?: Int32Parameter | null;
        /** Filters blocks by timestamp. **/
        timestamp?: DateTimeParameter | null;
        /** Filters blocks by priority. **/
        priority?: Int32Parameter | null;
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. **/
        select?: SelectParameter | null;
        /** Sorts blocks by specified field. Supported fields: `id` (default), `level`, `priority`, `validations`, `reward`, `fees`. **/
        sort?: SortParameter | null;
        /** Specifies which or how many items should be skipped **/
        offset?: OffsetParameter | null;
        /** Maximum number of items to return **/
        limit?: number;
    }): ApiRequestOptions;
    /**
     * Get block by hash
     * Returns a block with the specified hash.
     * @returns Block
     * @throws ApiError
     */
    getByHash({ hash, micheline, quote, operations, }: {
        /** Block hash **/
        hash: string | null;
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
        micheline: MichelineFormat;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Flag indicating whether to include block operations into returned object or not **/
        operations?: boolean;
    }): Promise<Block>;
    /**
     * **used to get the request options without making a http request**
     * Get block by hash
     * Returns a block with the specified hash.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByHashApiRequestOptions({ hash, micheline, quote, operations, }: {
        /** Block hash **/
        hash: string | null;
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
        micheline: MichelineFormat;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Flag indicating whether to include block operations into returned object or not **/
        operations?: boolean;
    }): ApiRequestOptions;
    /**
     * Get block by level
     * Returns a block at the specified level.
     * @returns Block
     * @throws ApiError
     */
    getByLevel({ level, micheline, quote, operations, }: {
        /** Block level **/
        level: number;
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
        micheline: MichelineFormat;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Flag indicating whether to include block operations into returned object or not **/
        operations?: boolean;
    }): Promise<Block>;
    /**
     * **used to get the request options without making a http request**
     * Get block by level
     * Returns a block at the specified level.
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    getByLevelApiRequestOptions({ level, micheline, quote, operations, }: {
        /** Block level **/
        level: number;
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string **/
        micheline: MichelineFormat;
        /** Comma-separated list of ticker symbols to inject historical prices into response **/
        quote: Symbols;
        /** Flag indicating whether to include block operations into returned object or not **/
        operations?: boolean;
    }): ApiRequestOptions;
}
