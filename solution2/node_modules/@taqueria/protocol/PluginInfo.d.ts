import * as Alias from '@taqueria/protocol/Alias';
import { Flatten } from '@taqueria/protocol/Base';
import * as ParsedOperation from '@taqueria/protocol/ParsedOperation';
import * as ParsedTemplate from '@taqueria/protocol/ParsedTemplate';
import * as Task from '@taqueria/protocol/Task';
import * as VersionNumber from '@taqueria/protocol/VersionNumber';
import { z } from 'zod';
export declare const rawSchema: z.ZodObject<{
    name: z.ZodString;
    version: z.ZodString;
    schema: z.ZodString;
    alias: z.ZodUnion<[z.ZodString, z.ZodString]>;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }>, Task.Task, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }>, "many">, Task.Task[], unknown>>;
    operations: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<Omit<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                output?: unknown;
                hash: string;
                time: number;
            }, {
                output?: unknown;
                hash: string;
                time: number;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                output?: unknown;
                hash: string;
                time: number;
            }>;
            tasks: Record<string, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>;
        }, {
            operations: Record<string, {
                output?: unknown;
                hash: string;
                time: number;
            }>;
            tasks: Record<string, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<z.extendShape<Omit<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            quickstart: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
        }, "quickstart">, {
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<z.extendShape<{
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
            }, {
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }>;
        }>, "passthrough", z.ZodTypeAny, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "handler">, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }>, ParsedOperation.ParsedOperation, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }>, "many">, ParsedOperation.ParsedOperation[], unknown>>;
    templates: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<z.extendShape<Omit<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<z.extendShape<Omit<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            quickstart: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
        }, "quickstart">, {
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<z.extendShape<{
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
            }, {
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }>;
        }>, "passthrough", z.ZodTypeAny, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
            render: "string" | "none" | "table";
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
            render: "string" | "none" | "table";
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "handler">, {
        handler: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }>, ParsedTemplate.ParsedTemplate, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }>, "many">, ParsedTemplate.ParsedTemplate[], unknown>>;
}, "strip", z.ZodTypeAny, {
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: string;
    name: string;
    schema: string;
    alias: string;
}, {
    operations?: unknown;
    tasks?: unknown;
    templates?: unknown;
    version: string;
    name: string;
    schema: string;
    alias: string;
}>;
export declare const internalSchema: z.ZodObject<z.extendShape<{
    name: z.ZodString;
    version: z.ZodString;
    schema: z.ZodString;
    alias: z.ZodUnion<[z.ZodString, z.ZodString]>;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }>, Task.Task, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }>, "many">, Task.Task[], unknown>>;
    operations: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<Omit<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                output?: unknown;
                hash: string;
                time: number;
            }, {
                output?: unknown;
                hash: string;
                time: number;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                output?: unknown;
                hash: string;
                time: number;
            }>;
            tasks: Record<string, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>;
        }, {
            operations: Record<string, {
                output?: unknown;
                hash: string;
                time: number;
            }>;
            tasks: Record<string, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<z.extendShape<Omit<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            quickstart: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
        }, "quickstart">, {
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<z.extendShape<{
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
            }, {
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }>;
        }>, "passthrough", z.ZodTypeAny, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "handler">, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }>, ParsedOperation.ParsedOperation, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }>, "many">, ParsedOperation.ParsedOperation[], unknown>>;
    templates: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<z.extendShape<Omit<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<z.extendShape<Omit<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            quickstart: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
        }, "quickstart">, {
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<z.extendShape<{
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
            }, {
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }>;
        }>, "passthrough", z.ZodTypeAny, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
            render: "string" | "none" | "table";
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
            render: "string" | "none" | "table";
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "handler">, {
        handler: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }>, ParsedTemplate.ParsedTemplate, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }>, "many">, ParsedTemplate.ParsedTemplate[], unknown>>;
}, {
    version: z.ZodEffects<z.ZodString, VersionNumber.VersionNumber, string>;
    schema: z.ZodEffects<z.ZodString, VersionNumber.VersionNumber, string>;
    alias: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodString]>, ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string), string>;
    tasks: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        task: z.ZodString;
        command: z.ZodString;
        aliases: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodString]>, "many">>;
        description: z.ZodOptional<z.ZodString>;
        example: z.ZodOptional<z.ZodString>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
        handler: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodString]>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }>, Task.Task, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        aliases?: string[] | undefined;
        example?: string | undefined;
        handler: string;
        command: string;
        task: string;
    }>, "many">, Task.Task[], unknown>>;
    operations: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<Omit<{
        operation: z.ZodString;
        command: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        handler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            operations: z.ZodRecord<z.ZodString, z.ZodObject<{
                hash: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                output?: unknown;
                hash: string;
                time: number;
            }, {
                output?: unknown;
                hash: string;
                time: number;
            }>>;
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                task: z.ZodString;
                plugin: z.ZodString;
                time: z.ZodNumber;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            operations: Record<string, {
                output?: unknown;
                hash: string;
                time: number;
            }>;
            tasks: Record<string, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>;
        }, {
            operations: Record<string, {
                output?: unknown;
                hash: string;
                time: number;
            }>;
            tasks: Record<string, {
                output?: unknown;
                plugin: string;
                task: string;
                time: number;
            }>;
        }>], z.ZodUnknown>, z.ZodFunction<z.ZodTuple<[z.ZodObject<z.extendShape<Omit<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            quickstart: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
        }, "quickstart">, {
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<z.extendShape<{
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
            }, {
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }>;
        }>, "passthrough", z.ZodTypeAny, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }>], z.ZodUnknown>, z.ZodVoid>>>;
    }, "handler">, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }>, ParsedOperation.ParsedOperation, {
        description?: string | undefined;
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        operation: string;
        command: string;
    }>, "many">, ParsedOperation.ParsedOperation[], unknown>>;
    templates: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<z.extendShape<Omit<{
        template: z.ZodString;
        command: z.ZodString;
        description: z.ZodString;
        hidden: z.ZodOptional<z.ZodBoolean>;
        options: z.ZodOptional<z.ZodArray<z.ZodObject<{
            shortFlag: z.ZodOptional<z.ZodString>;
            flag: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
            boolean: z.ZodOptional<z.ZodBoolean>;
            choices: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }, {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }>, "many">>;
        positionals: z.ZodOptional<z.ZodArray<z.ZodObject<{
            placeholder: z.ZodString;
            description: z.ZodString;
            defaultValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"number">, z.ZodLiteral<"boolean">]>>;
            required: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }, {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }>, "many">>;
        handler: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<z.extendShape<Omit<{
            _: z.ZodArray<z.ZodString, "many">;
            projectDir: z.ZodString;
            maxConcurrency: z.ZodNumber;
            debug: z.ZodBoolean;
            disableState: z.ZodBoolean;
            logPluginRequests: z.ZodBoolean;
            fromVsCode: z.ZodBoolean;
            version: z.ZodBoolean;
            build: z.ZodBoolean;
            help: z.ZodBoolean;
            yes: z.ZodBoolean;
            plugin: z.ZodOptional<z.ZodString>;
            env: z.ZodString;
            quickstart: z.ZodString;
            setBuild: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            setVersion: z.ZodString;
        }, "quickstart">, {
            taqRun: z.ZodUnion<[z.ZodLiteral<"proxy">, z.ZodLiteral<"pluginInfo">, z.ZodLiteral<"checkRuntimeDependencies">, z.ZodLiteral<"installRuntimeDependencies">, z.ZodLiteral<"proxyTemplate">]>;
            config: z.ZodObject<z.extendShape<{
                language: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"en">, z.ZodLiteral<"fr">]>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    projectDescription: z.ZodOptional<z.ZodString>;
                    authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    license: z.ZodOptional<z.ZodString>;
                    homepage: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }, {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                }>>;
                artifactsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contractsDir: z.ZodOptional<z.ZodDefault<z.ZodString>>;
                contracts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    sourceFile: z.ZodString;
                    hash: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    sourceFile: string;
                    hash: string;
                }, {
                    sourceFile: string;
                    hash: string;
                }>>>;
                plugins: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodLiteral<"npm">, z.ZodLiteral<"binary">, z.ZodLiteral<"deno">]>;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }, {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }>, "many">>;
                accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                environment: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                    networks: z.ZodArray<z.ZodString, "many">;
                    sandboxes: z.ZodArray<z.ZodString, "many">;
                    storage: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    aliases: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>>;
                }, "strip", z.ZodTypeAny, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }, {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>, z.ZodString]>>;
                network: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                        publicKeyHash: z.ZodOptional<z.ZodString>;
                        privateKey: z.ZodOptional<z.ZodString>;
                        mnemonic: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }>>>;
                    faucet: z.ZodOptional<z.ZodObject<{
                        pkh: z.ZodString;
                        mnemonic: z.ZodArray<z.ZodString, "many">;
                        email: z.ZodString;
                        password: z.ZodString;
                        amount: z.ZodString;
                        activation_code: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }, {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
                sandbox: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    label: z.ZodString;
                    rpcUrl: z.ZodString;
                    protocol: z.ZodOptional<z.ZodString>;
                    plugin: z.ZodOptional<z.ZodString>;
                    accounts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
                        encryptedKey: z.ZodString;
                        publicKeyHash: z.ZodString;
                        secretKey: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }, {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }>, z.ZodString]>>>;
                    tzkt: z.ZodOptional<z.ZodObject<{
                        disableAutostartWithSandbox: z.ZodOptional<z.ZodBoolean>;
                        postgresqlPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                        apiPort: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
                    }, "strip", z.ZodTypeAny, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }, {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    }>>;
                    annotations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }>>>;
            }, {
                projectDir: z.ZodString;
                configFile: z.ZodString;
                hash: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }, {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            }>;
        }>, "passthrough", z.ZodTypeAny, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }, {
            plugin?: string | undefined;
            _: string[];
            projectDir: string;
            maxConcurrency: number;
            debug: boolean;
            disableState: boolean;
            logPluginRequests: boolean;
            fromVsCode: boolean;
            version: boolean;
            build: boolean;
            help: boolean;
            yes: boolean;
            env: string;
            setBuild: string | number;
            setVersion: string;
            taqRun: "proxy" | "pluginInfo" | "checkRuntimeDependencies" | "installRuntimeDependencies" | "proxyTemplate";
            config: {
                sandbox?: Record<string, {
                    plugin?: string | undefined;
                    accounts?: Record<string, string | {
                        publicKeyHash: string;
                        encryptedKey: string;
                        secretKey: string;
                    }> | undefined;
                    protocol?: string | undefined;
                    tzkt?: {
                        disableAutostartWithSandbox?: boolean | undefined;
                        postgresqlPort?: number | undefined;
                        apiPort?: number | undefined;
                    } | undefined;
                    annotations?: Record<string, unknown> | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                language?: "en" | "fr" | undefined;
                metadata?: {
                    name?: string | undefined;
                    projectDescription?: string | undefined;
                    authors?: string[] | undefined;
                    license?: string | undefined;
                    homepage?: string | undefined;
                } | undefined;
                artifactsDir?: string | undefined;
                contractsDir?: string | undefined;
                contracts?: Record<string, {
                    sourceFile: string;
                    hash: string;
                }> | undefined;
                plugins?: {
                    type: "npm" | "binary" | "deno";
                    name: string;
                }[] | undefined;
                accounts?: Record<string, string> | undefined;
                network?: Record<string, {
                    accounts?: Record<string, {
                        mnemonic?: string | undefined;
                        publicKey?: string | undefined;
                        publicKeyHash?: string | undefined;
                        privateKey?: string | undefined;
                    }> | undefined;
                    faucet?: {
                        pkh: string;
                        mnemonic: string[];
                        email: string;
                        password: string;
                        amount: string;
                        activation_code: string;
                    } | undefined;
                    label: string;
                    rpcUrl: string;
                }> | undefined;
                projectDir: string;
                environment: Record<string, string | {
                    storage?: Record<string, string> | undefined;
                    aliases?: Record<string, Record<string, string>> | undefined;
                    networks: string[];
                    sandboxes: string[];
                }>;
                hash: string;
                configFile: string;
            };
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
            render: "string" | "none" | "table";
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
            data: z.ZodOptional<z.ZodUnknown>;
            render: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"table">, z.ZodLiteral<"string">]>>;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
            render: "string" | "none" | "table";
        }, {
            data?: unknown;
            render?: "string" | "none" | "table" | undefined;
        }>, z.ZodVoid]>>]>>, z.ZodPromise<z.ZodVoid>]>;
        encoding: z.ZodOptional<z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"none">, z.ZodLiteral<"json">, z.ZodLiteral<"application/json">]>>>;
    }, "handler">, {
        handler: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }>, ParsedTemplate.ParsedTemplate, {
        positionals?: {
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            defaultValue?: string | number | boolean | undefined;
            description: string;
            placeholder: string;
        }[] | undefined;
        options?: {
            boolean?: boolean | undefined;
            required?: boolean | undefined;
            type?: "string" | "number" | "boolean" | undefined;
            shortFlag?: string | undefined;
            defaultValue?: string | number | boolean | undefined;
            choices?: string[] | undefined;
            description: string;
            flag: string;
        }[] | undefined;
        hidden?: boolean | undefined;
        encoding?: "none" | "json" | "application/json" | undefined;
        handler: string;
        command: string;
        description: string;
        template: string;
    }>, "many">, ParsedTemplate.ParsedTemplate[], unknown>>;
}>, "strip", z.ZodTypeAny, {
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: VersionNumber.VersionNumber;
    name: string;
    schema: VersionNumber.VersionNumber;
    alias: ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string);
}, {
    operations?: unknown;
    tasks?: unknown;
    templates?: unknown;
    version: string;
    name: string;
    schema: string;
    alias: string;
}>;
export declare const schemas: {
    rawSchema: z.ZodType<any, z.ZodTypeDef, any>;
    internalSchema: z.ZodType<any, z.ZodTypeDef, any>;
    schema: z.ZodEffects<z.ZodType<any, z.ZodTypeDef, any>, Flatten<{
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: VersionNumber.VersionNumber;
        name: string;
        schema: VersionNumber.VersionNumber;
        alias: ({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string);
    }> & {
        readonly __type: any;
    }, any>;
}, factory: {
    make: (input: Flatten<{
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: VersionNumber.VersionNumber;
        name: string;
        schema: VersionNumber.VersionNumber;
        alias: ({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string);
    }>) => import("fluture").FutureInstance<import("./TaqError").TaqError, Flatten<{
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: VersionNumber.VersionNumber;
        name: string;
        schema: VersionNumber.VersionNumber;
        alias: ({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string);
    }> & {
        readonly __type: any;
    }>;
    of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, Flatten<{
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: VersionNumber.VersionNumber;
        name: string;
        schema: VersionNumber.VersionNumber;
        alias: ({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string);
    }> & {
        readonly __type: any;
    }>;
    create: (input: {
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: string;
        name: string;
        schema: string;
        alias: string;
    } | Flatten<{
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: VersionNumber.VersionNumber;
        name: string;
        schema: VersionNumber.VersionNumber;
        alias: ({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string);
    }>) => Flatten<{
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: VersionNumber.VersionNumber;
        name: string;
        schema: VersionNumber.VersionNumber;
        alias: ({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string);
    }> & {
        readonly __type: any;
    };
    from: (input: unknown) => Flatten<{
        operations?: ParsedOperation.ParsedOperation[] | undefined;
        tasks?: Task.Task[] | undefined;
        templates?: ParsedTemplate.ParsedTemplate[] | undefined;
        version: VersionNumber.VersionNumber;
        name: string;
        schema: VersionNumber.VersionNumber;
        alias: ({
            __type: Alias.Alias;
        } & {
            __type: import("./SingleChar").SingleChar;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string) | ({
            __type: Alias.Alias;
        } & {
            __type: import("./Verb").Verb;
        } & {
            __type: import("./NonEmptyString").NonEmptyString;
        } & string);
    }> & {
        readonly __type: any;
    };
};
export type PluginInfo = Flatten<z.infer<typeof schemas.schema>>;
export type t = PluginInfo;
export declare const create: (input: {
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: string;
    name: string;
    schema: string;
    alias: string;
} | Flatten<{
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: VersionNumber.VersionNumber;
    name: string;
    schema: VersionNumber.VersionNumber;
    alias: ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string);
}>) => Flatten<{
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: VersionNumber.VersionNumber;
    name: string;
    schema: VersionNumber.VersionNumber;
    alias: ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string);
}> & {
    readonly __type: any;
}, of: (input: unknown) => import("fluture").FutureInstance<import("./TaqError").TaqError, Flatten<{
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: VersionNumber.VersionNumber;
    name: string;
    schema: VersionNumber.VersionNumber;
    alias: ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string);
}> & {
    readonly __type: any;
}>, make: (input: Flatten<{
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: VersionNumber.VersionNumber;
    name: string;
    schema: VersionNumber.VersionNumber;
    alias: ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string);
}>) => import("fluture").FutureInstance<import("./TaqError").TaqError, Flatten<{
    operations?: ParsedOperation.ParsedOperation[] | undefined;
    tasks?: Task.Task[] | undefined;
    templates?: ParsedTemplate.ParsedTemplate[] | undefined;
    version: VersionNumber.VersionNumber;
    name: string;
    schema: VersionNumber.VersionNumber;
    alias: ({
        __type: Alias.Alias;
    } & {
        __type: import("./SingleChar").SingleChar;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string) | ({
        __type: Alias.Alias;
    } & {
        __type: import("./Verb").Verb;
    } & {
        __type: import("./NonEmptyString").NonEmptyString;
    } & string);
}> & {
    readonly __type: any;
}>;
//# sourceMappingURL=PluginInfo.d.ts.map