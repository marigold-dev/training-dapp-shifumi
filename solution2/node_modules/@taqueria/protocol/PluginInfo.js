"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// PluginInfo.ts
var PluginInfo_exports = {};
__export(PluginInfo_exports, {
  create: () => create,
  factory: () => factory,
  internalSchema: () => internalSchema,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema3,
  schemas: () => schemas6
});
module.exports = __toCommonJS(PluginInfo_exports);
var Alias = __toESM(require("@taqueria/protocol/Alias"));
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var ParsedOperation = __toESM(require("@taqueria/protocol/ParsedOperation"));
var ParsedTemplate = __toESM(require("@taqueria/protocol/ParsedTemplate"));
var Task = __toESM(require("@taqueria/protocol/Task"));
var VersionNumber = __toESM(require("@taqueria/protocol/VersionNumber"));
var import_zod = require("zod");
var rawSchema3 = import_zod.z.object({
  name: import_zod.z.string({ description: "Plugin Name" }).min(1),
  version: VersionNumber.rawSchema.describe("Plugin Version #"),
  schema: VersionNumber.rawSchema.describe("Plugin Schema Version #"),
  alias: Alias.rawSchema.describe("Plugin Alias"),
  tasks: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      Task.schemas.schema.describe("Plugin Task"),
      { description: "Plugin Tasks" }
    )
  ).optional(),
  operations: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      ParsedOperation.schemas.schema.describe("Plugin Operation"),
      { description: "Plugin Operations" }
    )
  ).optional(),
  templates: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      ParsedTemplate.schemas.schema.describe("Plugin Template")
    )
  ).optional()
});
var internalSchema = rawSchema3.extend({
  version: VersionNumber.schemas.schema.describe("Plugin Version #"),
  schema: VersionNumber.schemas.schema.describe("Plugin Schema Version #"),
  alias: Alias.schemas.schema.describe("Plugin Alias"),
  tasks: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      Task.schemas.schema.describe("Plugin Task"),
      { description: "Plugin Tasks" }
    )
  ).optional(),
  operations: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      ParsedOperation.schemas.schema.describe("Plugin Operation"),
      { description: "Plugin Operations" }
    )
  ).optional(),
  templates: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      ParsedTemplate.schemas.schema.describe("Plugin Template")
    )
  ).optional()
}).describe("Plugin Schema");
var { schemas: schemas6, factory } = (0, import_Base.default)({
  rawSchema: rawSchema3,
  internalSchema,
  parseErrMsg: "The schema returned from the plugin is invalid",
  unknownErrMsg: "Something went wrong parsing the schema from a plugin"
});
var { create, of, make } = factory;
//# sourceMappingURL=PluginInfo.js.map