{"version":3,"sources":["PluginSchema.ts"],"sourcesContent":["import { RequestArgs } from '@taqueria/protocol';\nimport * as Alias from '@taqueria/protocol/Alias';\nimport createType from '@taqueria/protocol/Base';\nimport * as Operation from '@taqueria/protocol/Operation';\nimport * as PluginInfo from '@taqueria/protocol/PluginInfo';\nimport * as Template from '@taqueria/protocol/Template';\nimport { PluginDependenciesResponse, PluginProxyResponse } from '@taqueria/protocol/types';\nimport { z } from 'zod';\n\nconst internalSchema = PluginInfo.internalSchema.extend({\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tOperation.schemas.schema,\n\t\t\t{ description: 'ParsedOperations' },\n\t\t)\n\t\t\t.optional(),\n\t),\n\ttemplates: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tTemplate.schemas.schema,\n\t\t).optional(),\n\t),\n}).passthrough().describe('ParsedPluginInfo');\n\nexport const rawSchema = PluginInfo.rawSchema.extend({\n\tname: Alias.rawSchema.optional(),\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tOperation.rawSchema,\n\t\t\t{ description: 'ParsedOperation' },\n\t\t),\n\t)\n\t\t.optional(),\n\ttemplates: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tTemplate.schemas.schema,\n\t\t).optional(),\n\t),\n}).passthrough().describe('ParsedPluginInfo');\n\ntype Input = z.infer<typeof internalSchema> & {\n\tproxy: <T extends RequestArgs.t>(\n\t\targs: T,\n\t) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;\n\tcheckRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;\n\tinstallRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;\n};\n\nexport type RawPluginSchema = z.infer<typeof rawSchema> & {\n\tproxy: <T extends RequestArgs.t>(\n\t\targs: T,\n\t) => PluginProxyResponse | Promise<PluginProxyResponse> | Promise<void> | void;\n\tcheckRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;\n\tinstallRuntimeDependencies?: <T extends RequestArgs.t>(args: T) => PluginDependenciesResponse;\n};\n\nexport const { schemas: generatedSchemas, factory } = createType<RawPluginSchema, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: (value: unknown) =>\n\t\t`The following plugin info gave us trouble when parsing the following plugin information: ${value}`,\n\tunknownErrMsg: 'Something went wrong trying to parse the plugin information',\n});\n\nexport type ParsedPluginInfo = z.infer<typeof generatedSchemas.schema>;\nexport type t = ParsedPluginInfo;\nexport const { create, of, make } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as ParsedPluginInfo),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA,eAAAC;AAAA;AAAA;AACA,YAAuB;AACvB,kBAAuB;AACvB,gBAA2B;AAC3B,iBAA4B;AAC5B,eAA0B;AAE1B,iBAAkB;AAElB,IAAMC,kBAA4B,0BAAe,OAAO;AAAA,EACvD,YAAY,aAAE;AAAA,IACb,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACS,kBAAQ;AAAA,MAClB,EAAE,aAAa,mBAAmB;AAAA,IACnC,EACE,SAAS;AAAA,EACZ;AAAA,EACA,WAAW,aAAE;AAAA,IACZ,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACQ,iBAAQ;AAAA,IAClB,EAAE,SAAS;AAAA,EACZ;AACD,CAAC,EAAE,YAAY,EAAE,SAAS,kBAAkB;AAErC,IAAMC,aAAuB,qBAAU,OAAO;AAAA,EACpD,MAAY,gBAAU,SAAS;AAAA,EAC/B,YAAY,aAAE;AAAA,IACb,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACS;AAAA,MACV,EAAE,aAAa,kBAAkB;AAAA,IAClC;AAAA,EACD,EACE,SAAS;AAAA,EACX,WAAW,aAAE;AAAA,IACZ,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACQ,iBAAQ;AAAA,IAClB,EAAE,SAAS;AAAA,EACZ;AACD,CAAC,EAAE,YAAY,EAAE,SAAS,kBAAkB;AAkBrC,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAC,SAAmC;AAAA,EACxF,WAAAD;AAAA,EACA,gBAAAD;AAAA,EACA,aAAa,CAAC,UACb,4FAA4F;AAAA,EAC7F,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;AAC7B,IAAMG,WAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAuB;AACzE;","names":["rawSchema","schemas","internalSchema","rawSchema","createType","schemas"]}