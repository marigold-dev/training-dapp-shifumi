{"version":3,"sources":["PluginInfo.ts"],"sourcesContent":["import * as Alias from '@taqueria/protocol/Alias';\nimport createType, { Flatten } from '@taqueria/protocol/Base';\nimport * as ParsedOperation from '@taqueria/protocol/ParsedOperation';\nimport * as ParsedTemplate from '@taqueria/protocol/ParsedTemplate';\nimport * as Task from '@taqueria/protocol/Task';\nimport * as VersionNumber from '@taqueria/protocol/VersionNumber';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object({\n\tname: z.string({ description: 'Plugin Name' }).min(1),\n\tversion: VersionNumber.rawSchema.describe('Plugin Version #'),\n\tschema: VersionNumber.rawSchema.describe('Plugin Schema Version #'),\n\talias: Alias.rawSchema.describe('Plugin Alias'),\n\ttasks: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tTask.schemas.schema.describe('Plugin Task'),\n\t\t\t{ description: 'Plugin Tasks' },\n\t\t),\n\t).optional(),\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedOperation.schemas.schema.describe('Plugin Operation'),\n\t\t\t{ description: 'Plugin Operations' },\n\t\t),\n\t).optional(),\n\ttemplates: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedTemplate.schemas.schema.describe('Plugin Template'),\n\t\t),\n\t).optional(),\n});\n\nexport const internalSchema = rawSchema.extend({\n\tversion: VersionNumber.schemas.schema.describe('Plugin Version #'),\n\tschema: VersionNumber.schemas.schema.describe('Plugin Schema Version #'),\n\talias: Alias.schemas.schema.describe('Plugin Alias'),\n\ttasks: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tTask.schemas.schema.describe('Plugin Task'),\n\t\t\t{ description: 'Plugin Tasks' },\n\t\t),\n\t).optional(),\n\toperations: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedOperation.schemas.schema.describe('Plugin Operation'),\n\t\t\t{ description: 'Plugin Operations' },\n\t\t),\n\t).optional(),\n\ttemplates: z.preprocess(\n\t\tval => val ?? [],\n\t\tz.array(\n\t\t\tParsedTemplate.schemas.schema.describe('Plugin Template'),\n\t\t),\n\t).optional(),\n}).describe('Plugin Schema');\n\n// export const rawSchema = internalSchema;\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype Input = Flatten<z.infer<typeof internalSchema>>;\n\nexport const { schemas, factory } = createType<RawInput, Input>({\n\trawSchema,\n\tinternalSchema,\n\tparseErrMsg: 'The schema returned from the plugin is invalid',\n\tunknownErrMsg: 'Something went wrong parsing the schema from a plugin',\n});\n\nexport type PluginInfo = Flatten<z.infer<typeof schemas.schema>>;\nexport type t = PluginInfo;\nexport const { create, of, make } = factory;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA,eAAAC;AAAA;AAAA;AAAA,YAAuB;AACvB,kBAAoC;AACpC,sBAAiC;AACjC,qBAAgC;AAChC,WAAsB;AACtB,oBAA+B;AAC/B,iBAAkB;AAEX,IAAMC,aAAY,aAAE,OAAO;AAAA,EACjC,MAAM,aAAE,OAAO,EAAE,aAAa,cAAc,CAAC,EAAE,IAAI,CAAC;AAAA,EACpD,SAAuB,wBAAU,SAAS,kBAAkB;AAAA,EAC5D,QAAsB,wBAAU,SAAS,yBAAyB;AAAA,EAClE,OAAa,gBAAU,SAAS,cAAc;AAAA,EAC9C,OAAO,aAAE;AAAA,IACR,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACI,aAAQ,OAAO,SAAS,aAAa;AAAA,MAC1C,EAAE,aAAa,eAAe;AAAA,IAC/B;AAAA,EACD,EAAE,SAAS;AAAA,EACX,YAAY,aAAE;AAAA,IACb,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACe,wBAAQ,OAAO,SAAS,kBAAkB;AAAA,MAC1D,EAAE,aAAa,oBAAoB;AAAA,IACpC;AAAA,EACD,EAAE,SAAS;AAAA,EACX,WAAW,aAAE;AAAA,IACZ,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACc,uBAAQ,OAAO,SAAS,iBAAiB;AAAA,IACzD;AAAA,EACD,EAAE,SAAS;AACZ,CAAC;AAEM,IAAM,iBAAiBA,WAAU,OAAO;AAAA,EAC9C,SAAuB,sBAAQ,OAAO,SAAS,kBAAkB;AAAA,EACjE,QAAsB,sBAAQ,OAAO,SAAS,yBAAyB;AAAA,EACvE,OAAa,cAAQ,OAAO,SAAS,cAAc;AAAA,EACnD,OAAO,aAAE;AAAA,IACR,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACI,aAAQ,OAAO,SAAS,aAAa;AAAA,MAC1C,EAAE,aAAa,eAAe;AAAA,IAC/B;AAAA,EACD,EAAE,SAAS;AAAA,EACX,YAAY,aAAE;AAAA,IACb,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACe,wBAAQ,OAAO,SAAS,kBAAkB;AAAA,MAC1D,EAAE,aAAa,oBAAoB;AAAA,IACpC;AAAA,EACD,EAAE,SAAS;AAAA,EACX,WAAW,aAAE;AAAA,IACZ,SAAO,oBAAO,CAAC;AAAA,IACf,aAAE;AAAA,MACc,uBAAQ,OAAO,SAAS,iBAAiB;AAAA,IACzD;AAAA,EACD,EAAE,SAAS;AACZ,CAAC,EAAE,SAAS,eAAe;AAOpB,IAAM,EAAE,SAAAC,UAAS,QAAQ,QAAI,YAAAC,SAA4B;AAAA,EAC/D,WAAAF;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb,eAAe;AAChB,CAAC;AAIM,IAAM,EAAE,QAAQ,IAAI,KAAK,IAAI;","names":["rawSchema","schemas","rawSchema","schemas","createType"]}