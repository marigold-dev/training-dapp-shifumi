"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// SanitizedArgs.ts
var SanitizedArgs_exports = {};
__export(SanitizedArgs_exports, {
  create: () => create,
  createCreateTaskArgs: () => createCreateTaskArgs,
  createInstallTaskArgs: () => createInstallTaskArgs,
  createProvisionTaskArgs: () => createProvisionTaskArgs,
  createScaffoldTaskArgs: () => createScaffoldTaskArgs,
  createSetEnvTaskArgs: () => createSetEnvTaskArgs,
  createTaskArgs: () => createTaskArgs,
  createUninstallTaskArgs: () => createUninstallTaskArgs,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  initRawSchema: () => initRawSchema,
  installTaskArgs: () => installTaskArgs,
  make: () => make,
  makeCreateTaskArgs: () => makeCreateTaskArgs,
  makeInstallTaskArgs: () => makeInstallTaskArgs,
  makeProvisionTaskArgs: () => makeProvisionTaskArgs,
  makeScaffoldTaskArgs: () => makeScaffoldTaskArgs,
  makeSetEnvTaskArgs: () => makeSetEnvTaskArgs,
  makeUninstallTaskArgs: () => makeUninstallTaskArgs,
  managePluginRawSchema: () => managePluginRawSchema,
  of: () => of,
  ofCreateTaskArgs: () => ofCreateTaskArgs,
  ofInstallTaskArgs: () => ofInstallTaskArgs,
  ofProvisionTaskArgs: () => ofProvisionTaskArgs,
  ofScaffoldTaskArgs: () => ofScaffoldTaskArgs,
  ofSetEnvTaskArgs: () => ofSetEnvTaskArgs,
  ofUninstallTaskArgs: () => ofUninstallTaskArgs,
  provisionRawSchema: () => provisionRawSchema,
  provisionTaskArgs: () => provisionTaskArgs,
  rawSchema: () => rawSchema,
  scaffoldRawSchema: () => scaffoldRawSchema,
  scaffoldTaskArgs: () => scaffoldTaskArgs,
  schemas: () => schemas3,
  setEnvRawSchema: () => setEnvRawSchema,
  setEnvTaskArgs: () => setEnvTaskArgs,
  templateRawSchema: () => templateRawSchema,
  uninstallTaskArgs: () => uninstallTaskArgs
});
module.exports = __toCommonJS(SanitizedArgs_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var NonEmptyString = __toESM(require("@taqueria/protocol/NonEmptyString"));
var SanitizedAbsPath = __toESM(require("@taqueria/protocol/SanitizedAbsPath"));
var import_zod = require("zod");
var rawSchema = import_zod.z.object({
  _: import_zod.z.array(import_zod.z.union([import_zod.z.string().min(1), import_zod.z.number()])),
  projectDir: SanitizedAbsPath.schemas.schema,
  maxConcurrency: import_zod.z.preprocess(
    (val) => typeof val === "string" ? parseInt(val) : Number(val),
    import_zod.z.number().int().min(1).default(10)
  ),
  debug: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  disableState: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  logPluginRequests: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  fromVsCode: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().default(false)
  ),
  version: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  build: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  help: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  yes: import_zod.z.preprocess(
    (val) => Boolean(val),
    import_zod.z.boolean().optional()
  ),
  plugin: NonEmptyString.schemas.schema.optional(),
  env: import_zod.z.string().optional(),
  quickstart: import_zod.z.string().min(1).optional(),
  setBuild: import_zod.z.preprocess(
    (val) => String(val),
    import_zod.z.string().min(3)
  ),
  setVersion: import_zod.z.string().min(3),
  pluginName: import_zod.z.string().min(1).optional()
}, { description: "Sanitizied Args" }).passthrough();
var scaffoldRawSchema = rawSchema.extend({
  scaffoldProjectDir: import_zod.z.string().min(1).transform((val) => val),
  scaffoldUrl: import_zod.z.string().min(1).url().transform((val) => val),
  branch: import_zod.z.string().min(1).optional()
});
var initRawSchema = rawSchema.extend({
  workflow: import_zod.z.string().refine((val) => val === "ligo" || val === "smartpy" || val === "archetype" || val === "michelson").optional()
});
var provisionRawSchema = rawSchema.extend({
  operation: import_zod.z.string().min(1).describe("Operation name"),
  name: import_zod.z.string().min(1).regex(
    /^[a-z0-9]+[a-z0-9-_]$/,
    "Provisioner name must consist of one or more letters/numbers and may not start with an underscore or dash."
  ).describe("Provisioner name").optional()
}).passthrough();
var templateRawSchema = rawSchema.extend({
  template: import_zod.z.string().min(1)
}).passthrough();
var managePluginRawSchema = rawSchema.omit({ pluginName: true }).extend({
  pluginName: import_zod.z.string().min(1)
});
var setEnvRawSchema = rawSchema.extend({
  defaultEnvironment: import_zod.z.string().min(1)
});
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema,
  parseErrMsg: "The arguments provided are invalid",
  unknownErrMsg: "Something went wrong parsing the command-line arguments"
});
var { create, of, make } = factory;
var schemas3 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
var scaffoldTaskArgs = (0, import_Base.default)({
  rawSchema: scaffoldRawSchema,
  parseErrMsg: "The arguments provided are invalid for the scaffold task",
  unknownErrMsg: "Something went wrong parsing the arguments for the scaffold task"
});
var provisionTaskArgs = (0, import_Base.default)({
  rawSchema: provisionRawSchema,
  parseErrMsg: "The arguments provided are invalid for the provision task",
  unknownErrMsg: "Something went wrong parsing the arguments for the provision task"
});
var installTaskArgs = (0, import_Base.default)({
  rawSchema: managePluginRawSchema,
  parseErrMsg: "The arguments provided are invalid for the install task",
  unknownErrMsg: "Something went wrong parsing the arguments for the install task"
});
var uninstallTaskArgs = (0, import_Base.default)({
  rawSchema: managePluginRawSchema,
  parseErrMsg: "The arguments provided are invalid for the uninstall task",
  unknownErrMsg: "Something went wrong parsing the arguments for the uninstall task"
});
var setEnvTaskArgs = (0, import_Base.default)({
  rawSchema: setEnvRawSchema,
  parseErrMsg: "The arguments provided are invalid for the set-environment task",
  unknownErrMsg: "Something went wrong parsing the arguments for the set-environment task"
});
var createTaskArgs = (0, import_Base.default)({
  rawSchema: templateRawSchema,
  parseErrMsg: "The arguments provided are invalid for the create task",
  unknownErrMsg: "Something went wrong parsing the arguments for the create task"
});
var createScaffoldTaskArgs = scaffoldTaskArgs.factory.from;
var makeScaffoldTaskArgs = scaffoldTaskArgs.factory.make;
var ofScaffoldTaskArgs = scaffoldTaskArgs.factory.of;
var createProvisionTaskArgs = provisionTaskArgs.factory.create;
var makeProvisionTaskArgs = provisionTaskArgs.factory.make;
var ofProvisionTaskArgs = provisionTaskArgs.factory.of;
var createInstallTaskArgs = installTaskArgs.factory.create;
var makeInstallTaskArgs = installTaskArgs.factory.make;
var ofInstallTaskArgs = installTaskArgs.factory.of;
var createUninstallTaskArgs = uninstallTaskArgs.factory.create;
var makeUninstallTaskArgs = uninstallTaskArgs.factory.make;
var ofUninstallTaskArgs = uninstallTaskArgs.factory.of;
var createSetEnvTaskArgs = setEnvTaskArgs.factory.create;
var makeSetEnvTaskArgs = setEnvTaskArgs.factory.make;
var ofSetEnvTaskArgs = setEnvTaskArgs.factory.of;
var createCreateTaskArgs = createTaskArgs.factory.create;
var makeCreateTaskArgs = createTaskArgs.factory.make;
var ofCreateTaskArgs = createTaskArgs.factory.of;
//# sourceMappingURL=SanitizedArgs.js.map