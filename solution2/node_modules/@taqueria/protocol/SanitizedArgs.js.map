{"version":3,"sources":["SanitizedArgs.ts"],"sourcesContent":["import { Url } from '@taqueria/protocol';\nimport createType from '@taqueria/protocol/Base';\nimport * as NonEmptyString from '@taqueria/protocol/NonEmptyString';\nimport * as PluginResponseEncoding from '@taqueria/protocol/PluginResponseEncoding';\nimport * as SanitizedAbsPath from '@taqueria/protocol/SanitizedAbsPath';\nimport { z } from 'zod';\n\nexport const rawSchema = z.object({\n\t_: z.array(z.union([z.string().min(1), z.number()])),\n\tprojectDir: SanitizedAbsPath.schemas.schema,\n\tmaxConcurrency: z.preprocess(\n\t\tval => typeof val === 'string' ? parseInt(val) : Number(val),\n\t\tz.number().int().min(1).default(10),\n\t),\n\tdebug: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().default(false),\n\t),\n\tdisableState: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().default(false),\n\t),\n\tlogPluginRequests: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().default(false),\n\t),\n\tfromVsCode: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().default(false),\n\t),\n\tversion: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().optional(),\n\t),\n\tbuild: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().optional(),\n\t),\n\thelp: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().optional(),\n\t),\n\tyes: z.preprocess(\n\t\tval => Boolean(val),\n\t\tz.boolean().optional(),\n\t),\n\tplugin: NonEmptyString.schemas.schema.optional(),\n\tenv: z.string().optional(),\n\tquickstart: z.string().min(1).optional(),\n\tsetBuild: z.preprocess(\n\t\tval => String(val),\n\t\tz.string().min(3),\n\t),\n\tsetVersion: z.string().min(3),\n\tpluginName: z.string().min(1).optional(),\n}, { description: 'Sanitizied Args' }).passthrough();\n\nexport const scaffoldRawSchema = rawSchema.extend({\n\tscaffoldProjectDir: z.string().min(1).transform((val: unknown) => val as SanitizedAbsPath.t),\n\tscaffoldUrl: z.string().min(1).url().transform((val: unknown) => val as Url.t),\n\tbranch: z.string().min(1).optional(),\n});\n\nexport const initRawSchema = rawSchema.extend({\n\tworkflow: z.string().refine(val => val === 'ligo' || val === 'smartpy' || val === 'archetype' || val === 'michelson')\n\t\t.optional(),\n});\n\nexport type rawInitSchemaInput = z.infer<typeof initRawSchema>;\n\nexport const provisionRawSchema = rawSchema\n\t.extend({\n\t\toperation: z\n\t\t\t.string()\n\t\t\t.min(1)\n\t\t\t.describe('Operation name'),\n\t\tname: z\n\t\t\t.string()\n\t\t\t.min(1)\n\t\t\t.regex(\n\t\t\t\t/^[a-z0-9]+[a-z0-9-_]$/,\n\t\t\t\t'Provisioner name must consist of one or more letters/numbers and may not start with an underscore or dash.',\n\t\t\t)\n\t\t\t.describe('Provisioner name')\n\t\t\t.optional(),\n\t})\n\t.passthrough();\n\nexport const templateRawSchema = rawSchema.extend({\n\ttemplate: z.string().min(1),\n}).passthrough();\n\nexport const managePluginRawSchema = rawSchema.omit({ pluginName: true }).extend({\n\tpluginName: z.string().min(1),\n});\n\nexport const setEnvRawSchema = rawSchema.extend({\n\tdefaultEnvironment: z.string().min(1),\n});\n\ntype RawInput = z.infer<typeof rawSchema>;\ntype RawScaffoldInput = z.infer<typeof scaffoldRawSchema>;\ntype RawProvisionInput = z.infer<typeof provisionRawSchema>;\ntype RawManagePluginInput = z.infer<typeof managePluginRawSchema>;\ntype RawSetEnvInput = z.infer<typeof setEnvRawSchema>;\ntype RawTemplateInput = z.infer<typeof templateRawSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, RawInput>({\n\trawSchema,\n\tparseErrMsg: 'The arguments provided are invalid',\n\tunknownErrMsg: 'Something went wrong parsing the command-line arguments',\n});\n\nexport const { create, of, make } = factory;\n\nexport type SanitizedArgs = z.infer<typeof generatedSchemas.schema>;\nexport type t = SanitizedArgs;\n\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as SanitizedArgs),\n};\n\nexport const scaffoldTaskArgs = createType<RawScaffoldInput, RawScaffoldInput>({\n\trawSchema: scaffoldRawSchema,\n\tparseErrMsg: 'The arguments provided are invalid for the scaffold task',\n\tunknownErrMsg: 'Something went wrong parsing the arguments for the scaffold task',\n});\n\nexport const provisionTaskArgs = createType<RawProvisionInput, RawProvisionInput>({\n\trawSchema: provisionRawSchema,\n\tparseErrMsg: 'The arguments provided are invalid for the provision task',\n\tunknownErrMsg: 'Something went wrong parsing the arguments for the provision task',\n});\n\nexport const installTaskArgs = createType<RawManagePluginInput, RawManagePluginInput>({\n\trawSchema: managePluginRawSchema,\n\tparseErrMsg: 'The arguments provided are invalid for the install task',\n\tunknownErrMsg: 'Something went wrong parsing the arguments for the install task',\n});\n\nexport const uninstallTaskArgs = createType<RawManagePluginInput, RawManagePluginInput>({\n\trawSchema: managePluginRawSchema,\n\tparseErrMsg: 'The arguments provided are invalid for the uninstall task',\n\tunknownErrMsg: 'Something went wrong parsing the arguments for the uninstall task',\n});\n\nexport const setEnvTaskArgs = createType<RawSetEnvInput, RawSetEnvInput>({\n\trawSchema: setEnvRawSchema,\n\tparseErrMsg: 'The arguments provided are invalid for the set-environment task',\n\tunknownErrMsg: 'Something went wrong parsing the arguments for the set-environment task',\n});\n\nexport const createTaskArgs = createType<RawTemplateInput, RawTemplateInput>({\n\trawSchema: templateRawSchema,\n\tparseErrMsg: 'The arguments provided are invalid for the create task',\n\tunknownErrMsg: 'Something went wrong parsing the arguments for the create task',\n});\n\nexport type ScaffoldTaskArgs = z.infer<typeof scaffoldTaskArgs.schemas.schema>;\nexport type ProvisionTaskArgs = z.infer<typeof provisionTaskArgs.schemas.schema>;\nexport type InstallTaskArgs = z.infer<typeof installTaskArgs.schemas.schema>;\nexport type UninstallTaskArgs = z.infer<typeof uninstallTaskArgs.schemas.schema>;\nexport type SetEnvTaskArgs = z.infer<typeof setEnvTaskArgs.schemas.schema>;\nexport type CreateTaskArgs = z.infer<typeof createTaskArgs.schemas.schema>;\n\nexport const createScaffoldTaskArgs = scaffoldTaskArgs.factory.from;\nexport const makeScaffoldTaskArgs = scaffoldTaskArgs.factory.make;\nexport const ofScaffoldTaskArgs = scaffoldTaskArgs.factory.of;\n\nexport const createProvisionTaskArgs = provisionTaskArgs.factory.create;\nexport const makeProvisionTaskArgs = provisionTaskArgs.factory.make;\nexport const ofProvisionTaskArgs = provisionTaskArgs.factory.of;\n\nexport const createInstallTaskArgs = installTaskArgs.factory.create;\nexport const makeInstallTaskArgs = installTaskArgs.factory.make;\nexport const ofInstallTaskArgs = installTaskArgs.factory.of;\n\nexport const createUninstallTaskArgs = uninstallTaskArgs.factory.create;\nexport const makeUninstallTaskArgs = uninstallTaskArgs.factory.make;\nexport const ofUninstallTaskArgs = uninstallTaskArgs.factory.of;\n\nexport const createSetEnvTaskArgs = setEnvTaskArgs.factory.create;\nexport const makeSetEnvTaskArgs = setEnvTaskArgs.factory.make;\nexport const ofSetEnvTaskArgs = setEnvTaskArgs.factory.of;\n\nexport const createCreateTaskArgs = createTaskArgs.factory.create;\nexport const makeCreateTaskArgs = createTaskArgs.factory.make;\nexport const ofCreateTaskArgs = createTaskArgs.factory.of;\n"],"mappings":"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","names":["schemas","createType","schemas"]}