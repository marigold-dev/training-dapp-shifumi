{"version":3,"sources":["SanitizedAbsPath.ts"],"sourcesContent":["import createType from '@taqueria/protocol/Base';\nimport * as path from 'path';\nimport { z } from 'zod';\n\nexport const rawSchema = z.string({ description: 'SanitizedAbsPath' }).min(1);\n\ntype RawInput = z.infer<typeof rawSchema>;\n\nexport const { schemas: generatedSchemas, factory } = createType<RawInput, RawInput>({\n\tisStringLike: true,\n\trawSchema,\n\ttransformer: (value: unknown) => path.resolve(value as string) as unknown,\n\tparseErrMsg: (value: unknown) => `${value} is an invalid absolute path`,\n\tunknownErrMsg: (value: unknown) => `Something went wrong trying to parse the absolute path, ${value}`,\n});\n\nexport type SanitizedAbsPath = z.infer<typeof generatedSchemas.schema>;\nexport type t = SanitizedAbsPath;\nexport const { create, make, of } = factory;\nexport const schemas = {\n\t...generatedSchemas,\n\tschema: generatedSchemas.schema.transform(val => val as SanitizedAbsPath),\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuB;AACvB,WAAsB;AACtB,iBAAkB;AAEX,IAAM,YAAY,aAAE,OAAO,EAAE,aAAa,mBAAmB,CAAC,EAAE,IAAI,CAAC;AAIrE,IAAM,EAAE,SAAS,kBAAkB,QAAQ,QAAI,YAAAA,SAA+B;AAAA,EACpF,cAAc;AAAA,EACd;AAAA,EACA,aAAa,CAAC,UAAwB,aAAQ,KAAe;AAAA,EAC7D,aAAa,CAAC,UAAmB,GAAG;AAAA,EACpC,eAAe,CAAC,UAAmB,2DAA2D;AAC/F,CAAC;AAIM,IAAM,EAAE,QAAQ,MAAM,GAAG,IAAI;AAC7B,IAAM,UAAU;AAAA,EACtB,GAAG;AAAA,EACH,QAAQ,iBAAiB,OAAO,UAAU,SAAO,GAAuB;AACzE;","names":["createType"]}