"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// PersistentState.ts
var PersistentState_exports = {};
__export(PersistentState_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  internalSchema: () => internalSchema,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema3,
  schemas: () => schemas4
});
module.exports = __toCommonJS(PersistentState_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var SHA256 = __toESM(require("@taqueria/protocol/SHA256"));
var Timestamp = __toESM(require("@taqueria/protocol/Timestamp"));
var Verb = __toESM(require("@taqueria/protocol/Verb"));
var import_zod = require("zod");
var rawOpSchema = import_zod.z.object({
  hash: SHA256.rawSchema.describe("state.op.hash"),
  time: Timestamp.rawSchema.describe("state.op.time"),
  output: import_zod.z.unknown().describe("state.op.output")
}).describe("Persistent State Operation");
var rawTaskSchema = import_zod.z.object({
  task: Verb.schemas.rawSchema,
  plugin: import_zod.z.string().min(1),
  time: Timestamp.rawSchema.describe("state.task.time"),
  output: import_zod.z.unknown().describe("state.task.output")
});
var internalOpSchema = import_zod.z.object({
  hash: SHA256.schemas.schema.describe("state.op.hash"),
  time: Timestamp.schemas.schema.describe("state.op.time"),
  output: import_zod.z.unknown().describe("state.op.output")
});
var internalTaskSchema = import_zod.z.object({
  task: Verb.schemas.schema,
  plugin: import_zod.z.string().min(1),
  time: Timestamp.schemas.schema.describe("state.task.time"),
  output: import_zod.z.unknown().describe("state.op.output")
});
var rawSchema3 = import_zod.z.object({
  operations: import_zod.z.record(rawOpSchema),
  tasks: import_zod.z.record(rawTaskSchema)
});
var internalSchema = import_zod.z.object({
  operations: import_zod.z.record(internalOpSchema),
  tasks: import_zod.z.record(internalTaskSchema)
}).transform((val) => ({
  operations: val.operations,
  tasks: val.tasks
}));
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema3,
  parseErrMsg: `The persistent state is invalid`,
  unknownErrMsg: `Something went wrong trying to parse the persistent state`
});
var { create, of, make } = factory;
var schemas4 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
//# sourceMappingURL=PersistentState.js.map