"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// SHA256.ts
var SHA256_exports = {};
__export(SHA256_exports, {
  Crypto: () => Crypto,
  create: () => create,
  internalSchema: () => internalSchema,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema,
  schemas: () => schemas,
  toSHA256: () => toSHA256
});
module.exports = __toCommonJS(SHA256_exports);
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var import_TaqError = require("@taqueria/protocol/TaqError");
var import_fluture = require("fluture");
var import_rambda = require("rambda");
var import_util = require("util");
var import_zod = require("zod");
var eager = (f) => (0, import_fluture.promise)(
  (0, import_fluture.mapRej)((err) => new import_TaqError.E_TaqError(err))(f)
);
var Crypto = class {
  constructor() {
    this.subtle = {
      digest(_method, _data) {
        return new ArrayBuffer(50);
      }
    };
  }
};
var getSubtleCrypto = async () => {
  if ((0, import_rambda.has)("SubtleCrypto", globalThis)) {
    return Promise.resolve(crypto.subtle);
  }
  const { Crypto: Crypto2 } = await import("@peculiar/webcrypto");
  const webcrypto = new Crypto2();
  return Promise.resolve(webcrypto.subtle);
};
var rawSchema = import_zod.z.string({ description: "SHA256" }).length(64);
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  isStringLike: true,
  rawSchema,
  parseErrMsg: (value) => `${value} is an invalid SHA256 hash`,
  unknownErrMsg: (value) => `Something went wrong trying to parse the following as a SHA256 value, ${value}`
});
var toSHA256 = async (value) => {
  const encoder = new import_util.TextEncoder();
  const data = encoder.encode(value);
  const hash = await (await getSubtleCrypto()).digest("SHA-256", data);
  const hashArray = Array.from(new Uint8Array(hash));
  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
  return eager(factory.make(hashHex));
};
var internalSchema = generatedSchemas.schema;
var { create, of, make } = factory;
var schemas = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
//# sourceMappingURL=SHA256.js.map