"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// PluginSchema.ts
var PluginSchema_exports = {};
__export(PluginSchema_exports, {
  create: () => create,
  factory: () => factory,
  generatedSchemas: () => generatedSchemas,
  make: () => make,
  of: () => of,
  rawSchema: () => rawSchema4,
  schemas: () => schemas3
});
module.exports = __toCommonJS(PluginSchema_exports);
var Alias = __toESM(require("@taqueria/protocol/Alias"));
var import_Base = __toESM(require("@taqueria/protocol/Base"));
var Operation = __toESM(require("@taqueria/protocol/Operation"));
var PluginInfo = __toESM(require("@taqueria/protocol/PluginInfo"));
var Template = __toESM(require("@taqueria/protocol/Template"));
var import_zod = require("zod");
var internalSchema2 = PluginInfo.internalSchema.extend({
  operations: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      Operation.schemas.schema,
      { description: "ParsedOperations" }
    ).optional()
  ),
  templates: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      Template.schemas.schema
    ).optional()
  )
}).passthrough().describe("ParsedPluginInfo");
var rawSchema4 = PluginInfo.rawSchema.extend({
  name: Alias.rawSchema.optional(),
  operations: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      Operation.rawSchema,
      { description: "ParsedOperation" }
    )
  ).optional(),
  templates: import_zod.z.preprocess(
    (val) => val != null ? val : [],
    import_zod.z.array(
      Template.schemas.schema
    ).optional()
  )
}).passthrough().describe("ParsedPluginInfo");
var { schemas: generatedSchemas, factory } = (0, import_Base.default)({
  rawSchema: rawSchema4,
  internalSchema: internalSchema2,
  parseErrMsg: (value) => `The following plugin info gave us trouble when parsing the following plugin information: ${value}`,
  unknownErrMsg: "Something went wrong trying to parse the plugin information"
});
var { create, of, make } = factory;
var schemas3 = {
  ...generatedSchemas,
  schema: generatedSchemas.schema.transform((val) => val)
};
//# sourceMappingURL=PluginSchema.js.map