"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRevealGasLimit = exports.ChainIds = exports.protocols = exports.Protocols = exports.COST_PER_BYTE = exports.DEFAULT_STORAGE_LIMIT = exports.DEFAULT_FEE = exports.DEFAULT_GAS_LIMIT = void 0;
exports.DEFAULT_GAS_LIMIT = {
    DELEGATION: 10600,
    ORIGINATION: 10600,
    TRANSFER: 10600,
    /* This is used for gas_limit. There is no harm in setting a higher limit.
     Only if an account has a balance that is very close to the total gas consumption,
     then this margin can fail the operation.
     Another benefit of this higher value is that then Dapps build with Taquito 17 can
     still work with Mumbainet, as this value is higher than the reveal cost in Mumbai.
    */
    REVEAL_TZ1: 1000,
    REVEAL_TZ2: 1000,
    REVEAL_TZ3: 2000,
    REVEAL_TZ4: 2000,
};
exports.DEFAULT_FEE = {
    DELEGATION: 1257,
    ORIGINATION: 10000,
    TRANSFER: 10000,
    REVEAL: 374,
};
exports.DEFAULT_STORAGE_LIMIT = {
    DELEGATION: 0,
    ORIGINATION: 257,
    TRANSFER: 257,
    REVEAL: 0,
};
exports.COST_PER_BYTE = 250;
var Protocols;
(function (Protocols) {
    Protocols["Pt24m4xi"] = "Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd";
    Protocols["PsBABY5H"] = "PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU";
    Protocols["PsBabyM1"] = "PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS";
    Protocols["PsCARTHA"] = "PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb";
    Protocols["PsDELPH1"] = "PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo";
    Protocols["PtEdo2Zk"] = "PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA";
    Protocols["PsFLorena"] = "PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i";
    Protocols["PtGRANADs"] = "PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV";
    Protocols["PtHangz2"] = "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
    Protocols["PsiThaCa"] = "PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP";
    Protocols["Psithaca2"] = "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
    Protocols["PtJakart2"] = "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
    Protocols["PtKathman"] = "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
    Protocols["PtLimaPtL"] = "PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW";
    Protocols["PtMumbaii"] = "PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc";
    Protocols["PtMumbai2"] = "PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1";
    Protocols["PtNairobi"] = "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
    Protocols["ProtoALpha"] = "ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK";
})(Protocols || (exports.Protocols = Protocols = {}));
exports.protocols = {
    '004': [Protocols.Pt24m4xi],
    '005': [Protocols.PsBABY5H, Protocols.PsBabyM1],
    '006': [Protocols.PsCARTHA],
    '007': [Protocols.PsDELPH1],
    '008': [Protocols.PtEdo2Zk],
    '009': [Protocols.PsFLorena],
    '010': [Protocols.PtGRANADs],
    '011': [Protocols.PtHangz2],
    '012': [Protocols.PsiThaCa, Protocols.Psithaca2],
    '013': [Protocols.PtJakart2],
    '014': [Protocols.PtKathman],
    '015': [Protocols.PtLimaPtL],
    '016': [Protocols.PtMumbai2],
    '017': [Protocols.PtNairobi],
    '018': [Protocols.ProtoALpha],
};
var ChainIds;
(function (ChainIds) {
    ChainIds["MAINNET"] = "NetXdQprcVkpaWU";
    ChainIds["CARTHAGENET"] = "NetXjD3HPJJjmcd";
    ChainIds["DELPHINET"] = "NetXm8tYqnMWky1";
    ChainIds["EDONET"] = "NetXSgo1ZT2DRUG";
    ChainIds["FLORENCENET"] = "NetXxkAx4woPLyu";
    ChainIds["GRANADANET"] = "NetXz969SFaFn8k";
    ChainIds["HANGZHOUNET"] = "NetXZSsxBpMQeAT";
    ChainIds["ITHACANET"] = "NetXbhmtAbMukLc";
    ChainIds["ITHACANET2"] = "NetXnHfVqm9iesp";
    ChainIds["JAKARTANET2"] = "NetXLH1uAxK7CCh";
    ChainIds["KATHMANDUNET"] = "NetXazhm4yetmff";
    ChainIds["LIMANET"] = "NetXizpkH94bocH";
    ChainIds["MUMBAINET"] = "NetXQw6nWSnrJ5t";
    ChainIds["MUMBAINET2"] = "NetXgbcrNtXD2yA";
    ChainIds["NAIROBINET"] = "NetXyuzvDo2Ugzb";
})(ChainIds || (exports.ChainIds = ChainIds = {}));
const getRevealGasLimit = (address) => Math.round((getRevealGasLimitInternal(address) * 11) / 10);
exports.getRevealGasLimit = getRevealGasLimit;
const getRevealGasLimitInternal = (address) => {
    switch (address.substring(0, 3)) {
        case 'tz1':
            return exports.DEFAULT_GAS_LIMIT.REVEAL_TZ1;
        case 'tz2':
            return exports.DEFAULT_GAS_LIMIT.REVEAL_TZ2;
        case 'tz3':
            return exports.DEFAULT_GAS_LIMIT.REVEAL_TZ3;
        case 'tz4':
            return exports.DEFAULT_GAS_LIMIT.REVEAL_TZ4;
        default:
            throw new Error(`Cannot estimate reveal gas limit for ${address}`);
    }
};
